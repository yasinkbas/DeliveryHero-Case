// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.113.202 clang-1400.0.16.2)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name GRDB
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import CoreGraphics
import Dispatch
import Foundation
@_exported import GRDB
@_exported import SQLite3
import Swift
import UIKit
import _Concurrency
import _StringProcessing
public struct SQLOrdering {
}
public protocol SQLOrderingTerm {
  var sqlOrdering: GRDB.SQLOrdering { get }
}
extension GRDB.SQLOrdering : GRDB.SQLOrderingTerm {
  @available(*, deprecated, message: "Already QLOrdering:")
  public var sqlOrdering: GRDB.SQLOrdering {
    get
  }
}
public protocol FetchRequest : GRDB.DatabaseRegionConvertible, GRDB.SQLSubqueryable {
  associatedtype RowDecoder
  func makePreparedRequest(_ db: GRDB.Database, forSingleResult singleResult: Swift.Bool) throws -> GRDB.PreparedRequest
  func fetchCount(_ db: GRDB.Database) throws -> Swift.Int
}
extension GRDB.FetchRequest {
  public func databaseRegion(_ db: GRDB.Database) throws -> GRDB.DatabaseRegion
}
public struct PreparedRequest {
  public var statement: GRDB.Statement
  public var adapter: GRDB.RowAdapter?
}
extension GRDB.FetchRequest {
  public func adapted(_ adapter: @escaping (GRDB.Database) throws -> GRDB.RowAdapter) -> GRDB.AdaptedFetchRequest<Self>
}
public struct AdaptedFetchRequest<Base> : GRDB.FetchRequest where Base : GRDB.FetchRequest {
  public typealias RowDecoder = Base.RowDecoder
  public var sqlSubquery: GRDB.SQLSubquery {
    get
  }
  public func fetchCount(_ db: GRDB.Database) throws -> Swift.Int
  public func makePreparedRequest(_ db: GRDB.Database, forSingleResult singleResult: Swift.Bool = false) throws -> GRDB.PreparedRequest
}
public struct AnyFetchRequest<RowDecoder> : GRDB.FetchRequest {
  public func asRequest<RowDecoder>(of type: RowDecoder.Type) -> GRDB.AnyFetchRequest<RowDecoder>
  public var sqlSubquery: GRDB.SQLSubquery {
    get
  }
  public func fetchCount(_ db: GRDB.Database) throws -> Swift.Int
  public func makePreparedRequest(_ db: GRDB.Database, forSingleResult singleResult: Swift.Bool = false) throws -> GRDB.PreparedRequest
}
extension GRDB.AnyFetchRequest {
  public init<Request>(_ request: Request) where RowDecoder == Request.RowDecoder, Request : GRDB.FetchRequest
}
extension GRDB.AssociationToMany {
  public var count: GRDB.AssociationAggregate<Self.OriginRowDecoder> {
    get
  }
  public var isEmpty: GRDB.AssociationAggregate<Self.OriginRowDecoder> {
    get
  }
  @available(*, deprecated, message: "Did you mean average(Column(...))? If not, prefer average(value.databaseValue) instead.")
  public func average(_ expression: GRDB.SQLExpressible) -> GRDB.AssociationAggregate<Self.OriginRowDecoder>
  public func average(_ expression: GRDB.SQLSpecificExpressible) -> GRDB.AssociationAggregate<Self.OriginRowDecoder>
  @available(*, deprecated, message: "Did you mean max(Column(...))? If not, prefer max(value.databaseValue) instead.")
  public func max(_ expression: GRDB.SQLExpressible) -> GRDB.AssociationAggregate<Self.OriginRowDecoder>
  public func max(_ expression: GRDB.SQLSpecificExpressible) -> GRDB.AssociationAggregate<Self.OriginRowDecoder>
  @available(*, deprecated, message: "Did you mean min(Column(...))? If not, prefer min(value.databaseValue) instead.")
  public func min(_ expression: GRDB.SQLExpressible) -> GRDB.AssociationAggregate<Self.OriginRowDecoder>
  public func min(_ expression: GRDB.SQLSpecificExpressible) -> GRDB.AssociationAggregate<Self.OriginRowDecoder>
  @available(*, deprecated, message: "Did you mean sum(Column(...))? If not, prefer sum(value.databaseValue) instead.")
  public func sum(_ expression: GRDB.SQLExpressible) -> GRDB.AssociationAggregate<Self.OriginRowDecoder>
  public func sum(_ expression: GRDB.SQLSpecificExpressible) -> GRDB.AssociationAggregate<Self.OriginRowDecoder>
  public func total(_ expression: GRDB.SQLSpecificExpressible) -> GRDB.AssociationAggregate<Self.OriginRowDecoder>
}
public struct AssociationAggregate<RowDecoder> {
}
extension GRDB.AssociationAggregate {
  public func forKey(_ key: Swift.String) -> GRDB.AssociationAggregate<RowDecoder>
  public func forKey(_ key: Swift.CodingKey) -> GRDB.AssociationAggregate<RowDecoder>
}
prefix public func ! <RowDecoder>(aggregate: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func && <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func && <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: GRDB.SQLExpressible) -> GRDB.AssociationAggregate<RowDecoder>
public func && <RowDecoder>(lhs: GRDB.SQLExpressible, rhs: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func || <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func || <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: GRDB.SQLExpressible) -> GRDB.AssociationAggregate<RowDecoder>
public func || <RowDecoder>(lhs: GRDB.SQLExpressible, rhs: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func == <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func == <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: GRDB.SQLExpressible) -> GRDB.AssociationAggregate<RowDecoder>
public func == <RowDecoder>(lhs: GRDB.SQLExpressible, rhs: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func == <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: Swift.Bool) -> GRDB.AssociationAggregate<RowDecoder>
public func == <RowDecoder>(lhs: Swift.Bool, rhs: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func != <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func != <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: GRDB.SQLExpressible) -> GRDB.AssociationAggregate<RowDecoder>
public func != <RowDecoder>(lhs: GRDB.SQLExpressible, rhs: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func != <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: Swift.Bool) -> GRDB.AssociationAggregate<RowDecoder>
public func != <RowDecoder>(lhs: Swift.Bool, rhs: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func === <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func === <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: GRDB.SQLExpressible) -> GRDB.AssociationAggregate<RowDecoder>
public func === <RowDecoder>(lhs: GRDB.SQLExpressible, rhs: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func !== <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func !== <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: GRDB.SQLExpressible) -> GRDB.AssociationAggregate<RowDecoder>
public func !== <RowDecoder>(lhs: GRDB.SQLExpressible, rhs: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func <= <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func <= <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: GRDB.SQLExpressible) -> GRDB.AssociationAggregate<RowDecoder>
public func <= <RowDecoder>(lhs: GRDB.SQLExpressible, rhs: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func < <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func < <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: GRDB.SQLExpressible) -> GRDB.AssociationAggregate<RowDecoder>
public func < <RowDecoder>(lhs: GRDB.SQLExpressible, rhs: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func > <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func > <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: GRDB.SQLExpressible) -> GRDB.AssociationAggregate<RowDecoder>
public func > <RowDecoder>(lhs: GRDB.SQLExpressible, rhs: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func >= <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func >= <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: GRDB.SQLExpressible) -> GRDB.AssociationAggregate<RowDecoder>
public func >= <RowDecoder>(lhs: GRDB.SQLExpressible, rhs: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
prefix public func - <RowDecoder>(aggregate: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func + <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func + <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: GRDB.SQLExpressible) -> GRDB.AssociationAggregate<RowDecoder>
public func + <RowDecoder>(lhs: GRDB.SQLExpressible, rhs: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func - <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func - <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: GRDB.SQLExpressible) -> GRDB.AssociationAggregate<RowDecoder>
public func - <RowDecoder>(lhs: GRDB.SQLExpressible, rhs: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func * <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func * <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: GRDB.SQLExpressible) -> GRDB.AssociationAggregate<RowDecoder>
public func * <RowDecoder>(lhs: GRDB.SQLExpressible, rhs: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func / <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func / <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: GRDB.SQLExpressible) -> GRDB.AssociationAggregate<RowDecoder>
public func / <RowDecoder>(lhs: GRDB.SQLExpressible, rhs: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func ?? <RowDecoder>(lhs: GRDB.AssociationAggregate<RowDecoder>, rhs: GRDB.SQLExpressible) -> GRDB.AssociationAggregate<RowDecoder>
public func abs<RowDecoder>(_ aggregate: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public func length<RowDecoder>(_ aggregate: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.AssociationAggregate<RowDecoder>
public struct QueryInterfaceRequest<RowDecoder> {
}
extension GRDB.QueryInterfaceRequest : GRDB.FetchRequest {
  public var sqlSubquery: GRDB.SQLSubquery {
    get
  }
  public func fetchCount(_ db: GRDB.Database) throws -> Swift.Int
  public func makePreparedRequest(_ db: GRDB.Database, forSingleResult singleResult: Swift.Bool = false) throws -> GRDB.PreparedRequest
}
extension GRDB.QueryInterfaceRequest : GRDB.SelectionRequest {
  public func select(_ selection: @escaping (GRDB.Database) throws -> [GRDB.SQLSelectable]) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func select<RowDecoder>(_ selection: [GRDB.SQLSelectable], as type: RowDecoder.Type = RowDecoder.self) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func select<RowDecoder>(_ selection: GRDB.SQLSelectable..., as type: RowDecoder.Type = RowDecoder.self) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func select<RowDecoder>(sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments(), as type: RowDecoder.Type = RowDecoder.self) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func select<RowDecoder>(literal sqlLiteral: GRDB.SQL, as type: RowDecoder.Type = RowDecoder.self) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func annotated(with selection: @escaping (GRDB.Database) throws -> [GRDB.SQLSelectable]) -> GRDB.QueryInterfaceRequest<RowDecoder>
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension GRDB.QueryInterfaceRequest where RowDecoder : Swift.Identifiable, RowDecoder.ID : GRDB.DatabaseValueConvertible {
  public func selectID() -> GRDB.QueryInterfaceRequest<RowDecoder.ID>
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension GRDB.QueryInterfaceRequest where RowDecoder : Swift.Identifiable, RowDecoder.ID : GRDB._OptionalProtocol, RowDecoder.ID.Wrapped : GRDB.DatabaseValueConvertible {
  public func selectID() -> GRDB.QueryInterfaceRequest<RowDecoder.ID.Wrapped>
}
extension GRDB.QueryInterfaceRequest : GRDB.FilteredRequest {
  public func filter(_ predicate: @escaping (GRDB.Database) throws -> GRDB.SQLExpressible) -> GRDB.QueryInterfaceRequest<RowDecoder>
}
extension GRDB.QueryInterfaceRequest : GRDB.OrderedRequest {
  public func order(_ orderings: @escaping (GRDB.Database) throws -> [GRDB.SQLOrderingTerm]) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func reversed() -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func unordered() -> GRDB.QueryInterfaceRequest<RowDecoder>
}
extension GRDB.QueryInterfaceRequest : GRDB.AggregatingRequest {
  public func group(_ expressions: @escaping (GRDB.Database) throws -> [GRDB.SQLExpressible]) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func having(_ predicate: @escaping (GRDB.Database) throws -> GRDB.SQLExpressible) -> GRDB.QueryInterfaceRequest<RowDecoder>
}
extension GRDB.QueryInterfaceRequest : GRDB._JoinableRequest {
  public func _including(all association: GRDB._SQLAssociation) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func _including(optional association: GRDB._SQLAssociation) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func _including(required association: GRDB._SQLAssociation) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func _joining(optional association: GRDB._SQLAssociation) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func _joining(required association: GRDB._SQLAssociation) -> GRDB.QueryInterfaceRequest<RowDecoder>
}
extension GRDB.QueryInterfaceRequest : GRDB.JoinableRequest {
}
extension GRDB.QueryInterfaceRequest : GRDB.TableRequest {
  public var databaseTableName: Swift.String {
    get
  }
  public func aliased(_ alias: GRDB.TableAlias) -> GRDB.QueryInterfaceRequest<RowDecoder>
}
extension GRDB.QueryInterfaceRequest : GRDB.DerivableRequest {
  public func distinct() -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func limit(_ limit: Swift.Int, offset: Swift.Int?) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func with<RowDecoder>(_ cte: GRDB.CommonTableExpression<RowDecoder>) -> GRDB.QueryInterfaceRequest<RowDecoder>
}
extension GRDB.QueryInterfaceRequest {
  public func asRequest<RowDecoder>(of type: RowDecoder.Type) -> GRDB.QueryInterfaceRequest<RowDecoder>
}
extension GRDB.QueryInterfaceRequest {
  public func isEmpty(_ db: GRDB.Database) throws -> Swift.Bool
}
extension GRDB.QueryInterfaceRequest {
  @discardableResult
  public func deleteAll(_ db: GRDB.Database) throws -> Swift.Int
}
extension GRDB.QueryInterfaceRequest {
  @discardableResult
  public func updateAll(_ db: GRDB.Database, onConflict conflictResolution: GRDB.Database.ConflictResolution? = nil, _ assignments: [GRDB.ColumnAssignment]) throws -> Swift.Int
  @discardableResult
  public func updateAll(_ db: GRDB.Database, onConflict conflictResolution: GRDB.Database.ConflictResolution? = nil, _ assignment: GRDB.ColumnAssignment, _ otherAssignments: GRDB.ColumnAssignment...) throws -> Swift.Int
}
public struct ColumnAssignment {
}
extension GRDB.ColumnExpression {
  public func set(to value: GRDB.SQLExpressible?) -> GRDB.ColumnAssignment
}
public func += (column: GRDB.ColumnExpression, value: GRDB.SQLExpressible) -> GRDB.ColumnAssignment
public func -= (column: GRDB.ColumnExpression, value: GRDB.SQLExpressible) -> GRDB.ColumnAssignment
public func *= (column: GRDB.ColumnExpression, value: GRDB.SQLExpressible) -> GRDB.ColumnAssignment
public func /= (column: GRDB.ColumnExpression, value: GRDB.SQLExpressible) -> GRDB.ColumnAssignment
extension GRDB.TableRecord {
  public static func all() -> GRDB.QueryInterfaceRequest<Self>
  public static func none() -> GRDB.QueryInterfaceRequest<Self>
  public static func select(_ selection: GRDB.SQLSelectable...) -> GRDB.QueryInterfaceRequest<Self>
  public static func select(_ selection: [GRDB.SQLSelectable]) -> GRDB.QueryInterfaceRequest<Self>
  public static func select(sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments()) -> GRDB.QueryInterfaceRequest<Self>
  public static func select(literal sqlLiteral: GRDB.SQL) -> GRDB.QueryInterfaceRequest<Self>
  public static func select<RowDecoder>(_ selection: [GRDB.SQLSelectable], as type: RowDecoder.Type = RowDecoder.self) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public static func select<RowDecoder>(_ selection: GRDB.SQLSelectable..., as type: RowDecoder.Type = RowDecoder.self) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public static func select<RowDecoder>(sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments(), as type: RowDecoder.Type = RowDecoder.self) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public static func select<RowDecoder>(literal sqlLiteral: GRDB.SQL, as type: RowDecoder.Type = RowDecoder.self) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public static func annotated(with selection: [GRDB.SQLSelectable]) -> GRDB.QueryInterfaceRequest<Self>
  public static func annotated(with selection: GRDB.SQLSelectable...) -> GRDB.QueryInterfaceRequest<Self>
  @available(*, deprecated, message: "Did you mean filter(id:) or filter(key:)? If not, prefer filter(value.databaseValue) instead. See also none().")
  public static func filter(_ predicate: GRDB.SQLExpressible) -> GRDB.QueryInterfaceRequest<Self>
  public static func filter(_ predicate: GRDB.SQLSpecificExpressible) -> GRDB.QueryInterfaceRequest<Self>
  public static func filter<PrimaryKeyType>(key: PrimaryKeyType?) -> GRDB.QueryInterfaceRequest<Self> where PrimaryKeyType : GRDB.DatabaseValueConvertible
  public static func filter<Sequence>(keys: Sequence) -> GRDB.QueryInterfaceRequest<Self> where Sequence : Swift.Sequence, Sequence.Element : GRDB.DatabaseValueConvertible
  public static func filter(key: [Swift.String : GRDB.DatabaseValueConvertible?]?) -> GRDB.QueryInterfaceRequest<Self>
  public static func filter(keys: [[Swift.String : GRDB.DatabaseValueConvertible?]]) -> GRDB.QueryInterfaceRequest<Self>
  public static func filter(sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments()) -> GRDB.QueryInterfaceRequest<Self>
  public static func filter(literal sqlLiteral: GRDB.SQL) -> GRDB.QueryInterfaceRequest<Self>
  public static func order(_ orderings: GRDB.SQLOrderingTerm...) -> GRDB.QueryInterfaceRequest<Self>
  public static func order(_ orderings: [GRDB.SQLOrderingTerm]) -> GRDB.QueryInterfaceRequest<Self>
  public static func orderByPrimaryKey() -> GRDB.QueryInterfaceRequest<Self>
  public static func order(sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments()) -> GRDB.QueryInterfaceRequest<Self>
  public static func order(literal sqlLiteral: GRDB.SQL) -> GRDB.QueryInterfaceRequest<Self>
  public static func limit(_ limit: Swift.Int, offset: Swift.Int? = nil) -> GRDB.QueryInterfaceRequest<Self>
  public static func aliased(_ alias: GRDB.TableAlias) -> GRDB.QueryInterfaceRequest<Self>
  public static func with<RowDecoder>(_ cte: GRDB.CommonTableExpression<RowDecoder>) -> GRDB.QueryInterfaceRequest<Self>
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension GRDB.TableRecord where Self : Swift.Identifiable, Self.ID : GRDB.DatabaseValueConvertible {
  public static func filter(id: Self.ID) -> GRDB.QueryInterfaceRequest<Self>
  public static func filter<Collection>(ids: Collection) -> GRDB.QueryInterfaceRequest<Self> where Collection : Swift.Collection, Self.ID == Collection.Element
  public static func selectID() -> GRDB.QueryInterfaceRequest<Self.ID>
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension GRDB.TableRecord where Self : Swift.Identifiable, Self.ID : GRDB._OptionalProtocol, Self.ID.Wrapped : GRDB.DatabaseValueConvertible {
  public static func filter(id: Self.ID.Wrapped) -> GRDB.QueryInterfaceRequest<Self>
  public static func filter<Collection>(ids: Collection) -> GRDB.QueryInterfaceRequest<Self> where Collection : Swift.Collection, Collection.Element : GRDB.DatabaseValueConvertible, Collection.Element == Self.ID.Wrapped
  public static func selectID() -> GRDB.QueryInterfaceRequest<Self.ID.Wrapped>
}
public struct SQLExpression {
  public struct AssociativeBinaryOperator : Swift.Hashable {
    public static let add: GRDB.SQLExpression.AssociativeBinaryOperator
    public static let multiply: GRDB.SQLExpression.AssociativeBinaryOperator
    public static let and: GRDB.SQLExpression.AssociativeBinaryOperator
    public static let or: GRDB.SQLExpression.AssociativeBinaryOperator
    public static let concat: GRDB.SQLExpression.AssociativeBinaryOperator
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GRDB.SQLExpression.AssociativeBinaryOperator, b: GRDB.SQLExpression.AssociativeBinaryOperator) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(*, deprecated, renamed: "SQLExpression.AssociativeBinaryOperator")
public typealias SQLAssociativeBinaryOperator = GRDB.SQLExpression.AssociativeBinaryOperator
public protocol SQLExpressible {
  var sqlExpression: GRDB.SQLExpression { get }
}
extension GRDB.SQLExpressible where Self == GRDB.Column {
  public static var rowID: GRDB.Column {
    get
  }
}
public protocol SQLSpecificExpressible : GRDB.SQLExpressible, GRDB.SQLOrderingTerm, GRDB.SQLSelectable {
}
extension GRDB.SQLSpecificExpressible {
  public var sqlSelection: GRDB.SQLSelection {
    get
  }
  public var sqlOrdering: GRDB.SQLOrdering {
    get
  }
}
extension GRDB.SQLExpression : GRDB.SQLSpecificExpressible {
  @available(*, deprecated, message: "Already SQLExpression")
  public var sqlExpression: GRDB.SQLExpression {
    get
  }
}
extension Swift.Sequence where Self.Element : GRDB.SQLSpecificExpressible {
  public func joined(operator: GRDB.SQLExpression.AssociativeBinaryOperator) -> GRDB.SQLExpression
}
extension Swift.Sequence where Self.Element == GRDB.SQLSpecificExpressible {
  public func joined(operator: GRDB.SQLExpression.AssociativeBinaryOperator) -> GRDB.SQLExpression
}
extension GRDB.SQLSpecificExpressible {
  public var asc: GRDB.SQLOrdering {
    get
  }
  public var desc: GRDB.SQLOrdering {
    get
  }
  @available(macOS 11.0, iOS 14, tvOS 14, watchOS 7, *)
  public var ascNullsLast: GRDB.SQLOrdering {
    get
  }
  @available(macOS 11.0, iOS 14, tvOS 14, watchOS 7, *)
  public var descNullsFirst: GRDB.SQLOrdering {
    get
  }
}
extension GRDB.SQLSpecificExpressible {
  public func forKey(_ key: Swift.String) -> GRDB.SQLSelection
  public func forKey(_ key: Swift.CodingKey) -> GRDB.SQLSelection
}
extension GRDB.SQLSpecificExpressible {
  public func collating(_ collation: GRDB.Database.CollationName) -> GRDB.SQLExpression
  public func collating(_ collation: GRDB.DatabaseCollation) -> GRDB.SQLExpression
}
extension GRDB.EncodableRecord where Self : Swift.Encodable {
  public func encode(to container: inout GRDB.PersistenceContainer)
}
public func == (lhs: GRDB.SQLSpecificExpressible, rhs: GRDB.SQLExpressible?) -> GRDB.SQLExpression
public func == (lhs: GRDB.SQLSpecificExpressible, rhs: Swift.Bool) -> GRDB.SQLExpression
public func == (lhs: GRDB.SQLExpressible?, rhs: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func == (lhs: Swift.Bool, rhs: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func == (lhs: GRDB.SQLSpecificExpressible, rhs: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func != (lhs: GRDB.SQLSpecificExpressible, rhs: GRDB.SQLExpressible?) -> GRDB.SQLExpression
public func != (lhs: GRDB.SQLSpecificExpressible, rhs: Swift.Bool) -> GRDB.SQLExpression
public func != (lhs: GRDB.SQLExpressible?, rhs: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func != (lhs: Swift.Bool, rhs: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func != (lhs: GRDB.SQLSpecificExpressible, rhs: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func === (lhs: GRDB.SQLSpecificExpressible, rhs: GRDB.SQLExpressible?) -> GRDB.SQLExpression
public func === (lhs: GRDB.SQLExpressible?, rhs: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func === (lhs: GRDB.SQLSpecificExpressible, rhs: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func !== (lhs: GRDB.SQLSpecificExpressible, rhs: GRDB.SQLExpressible?) -> GRDB.SQLExpression
public func !== (lhs: GRDB.SQLExpressible?, rhs: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func !== (lhs: GRDB.SQLSpecificExpressible, rhs: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func < (lhs: GRDB.SQLSpecificExpressible, rhs: GRDB.SQLExpressible) -> GRDB.SQLExpression
public func < (lhs: GRDB.SQLExpressible, rhs: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func < (lhs: GRDB.SQLSpecificExpressible, rhs: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func <= (lhs: GRDB.SQLSpecificExpressible, rhs: GRDB.SQLExpressible) -> GRDB.SQLExpression
public func <= (lhs: GRDB.SQLExpressible, rhs: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func <= (lhs: GRDB.SQLSpecificExpressible, rhs: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func > (lhs: GRDB.SQLSpecificExpressible, rhs: GRDB.SQLExpressible) -> GRDB.SQLExpression
public func > (lhs: GRDB.SQLExpressible, rhs: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func > (lhs: GRDB.SQLSpecificExpressible, rhs: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func >= (lhs: GRDB.SQLSpecificExpressible, rhs: GRDB.SQLExpressible) -> GRDB.SQLExpression
public func >= (lhs: GRDB.SQLExpressible, rhs: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func >= (lhs: GRDB.SQLSpecificExpressible, rhs: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
extension Swift.Range where Bound : GRDB.SQLExpressible {
  public func contains(_ element: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
}
extension Swift.ClosedRange where Bound : GRDB.SQLExpressible {
  public func contains(_ element: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
}
extension Swift.CountableRange where Bound : GRDB.SQLExpressible, Bound : Swift.Strideable, Bound.Stride : Swift.SignedInteger {
  public func contains(_ element: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
}
extension Swift.CountableClosedRange where Bound : GRDB.SQLExpressible, Bound : Swift.Strideable, Bound.Stride : Swift.SignedInteger {
  public func contains(_ element: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
}
extension Swift.Sequence where Self.Element : GRDB.SQLExpressible {
  public func contains(_ element: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
}
extension Swift.Sequence where Self.Element == GRDB.SQLExpressible {
  public func contains(_ element: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
}
public func * (lhs: GRDB.SQLSpecificExpressible, rhs: GRDB.SQLExpressible) -> GRDB.SQLExpression
public func * (lhs: GRDB.SQLExpressible, rhs: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func * (lhs: GRDB.SQLSpecificExpressible, rhs: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func / (lhs: GRDB.SQLSpecificExpressible, rhs: GRDB.SQLExpressible) -> GRDB.SQLExpression
public func / (lhs: GRDB.SQLExpressible, rhs: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func / (lhs: GRDB.SQLSpecificExpressible, rhs: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func + (lhs: GRDB.SQLSpecificExpressible, rhs: GRDB.SQLExpressible) -> GRDB.SQLExpression
public func + (lhs: GRDB.SQLExpressible, rhs: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func + (lhs: GRDB.SQLSpecificExpressible, rhs: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
prefix public func - (value: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func - (lhs: GRDB.SQLSpecificExpressible, rhs: GRDB.SQLExpressible) -> GRDB.SQLExpression
public func - (lhs: GRDB.SQLExpressible, rhs: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func - (lhs: GRDB.SQLSpecificExpressible, rhs: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func && (lhs: GRDB.SQLSpecificExpressible, rhs: GRDB.SQLExpressible) -> GRDB.SQLExpression
public func && (lhs: GRDB.SQLExpressible, rhs: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func && (lhs: GRDB.SQLSpecificExpressible, rhs: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func || (lhs: GRDB.SQLSpecificExpressible, rhs: GRDB.SQLExpressible) -> GRDB.SQLExpression
public func || (lhs: GRDB.SQLExpressible, rhs: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func || (lhs: GRDB.SQLSpecificExpressible, rhs: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
prefix public func ! (value: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
extension GRDB.SQLSpecificExpressible {
  public func like(_ pattern: GRDB.SQLExpressible, escape: GRDB.SQLExpressible? = nil) -> GRDB.SQLExpression
}
public struct CommonTableExpression<RowDecoder> {
  public var tableName: Swift.String
}
extension GRDB.CommonTableExpression {
  public init<Request>(recursive: Swift.Bool = false, named tableName: Swift.String, columns: [Swift.String]? = nil, request: Request) where Request : GRDB.SQLSubqueryable
  public init(recursive: Swift.Bool = false, named tableName: Swift.String, columns: [Swift.String]? = nil, sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments())
  public init(recursive: Swift.Bool = false, named tableName: Swift.String, columns: [Swift.String]? = nil, literal sqlLiteral: GRDB.SQL)
}
extension GRDB.CommonTableExpression where RowDecoder == GRDB.Row {
  public init<Request>(recursive: Swift.Bool = false, named tableName: Swift.String, columns: [Swift.String]? = nil, request: Request) where Request : GRDB.SQLSubqueryable
  public init(recursive: Swift.Bool = false, named tableName: Swift.String, columns: [Swift.String]? = nil, sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments())
  public init(recursive: Swift.Bool = false, named tableName: Swift.String, columns: [Swift.String]? = nil, literal sqlLiteral: GRDB.SQL)
}
extension GRDB.CommonTableExpression {
  public func all() -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func contains(_ element: GRDB.SQLExpressible) -> GRDB.SQLExpression
}
extension GRDB.CommonTableExpression {
  public func association<Destination>(to cte: GRDB.CommonTableExpression<Destination>, on condition: @escaping (_ left: GRDB.TableAlias, _ right: GRDB.TableAlias) -> GRDB.SQLExpressible) -> GRDB.JoinAssociation<RowDecoder, Destination>
  public func association<Destination>(to cte: GRDB.CommonTableExpression<Destination>) -> GRDB.JoinAssociation<RowDecoder, Destination>
  public func association<Destination>(to destination: Destination.Type, on condition: @escaping (_ left: GRDB.TableAlias, _ right: GRDB.TableAlias) -> GRDB.SQLExpressible) -> GRDB.JoinAssociation<RowDecoder, Destination> where Destination : GRDB.TableRecord
  public func association<Destination>(to destination: Destination.Type) -> GRDB.JoinAssociation<RowDecoder, Destination> where Destination : GRDB.TableRecord
  public func association<Destination>(to destination: GRDB.Table<Destination>, on condition: @escaping (_ left: GRDB.TableAlias, _ right: GRDB.TableAlias) -> GRDB.SQLExpressible) -> GRDB.JoinAssociation<RowDecoder, Destination>
  public func association<Destination>(to destination: GRDB.Table<Destination>) -> GRDB.JoinAssociation<RowDecoder, Destination>
}
public struct Table<RowDecoder> {
  public var tableName: Swift.String
  public init(_ tableName: Swift.String)
}
extension GRDB.Table where RowDecoder == GRDB.Row {
  public init(_ tableName: Swift.String)
}
extension GRDB.Table : GRDB.DatabaseRegionConvertible {
  public func databaseRegion(_ db: GRDB.Database) throws -> GRDB.DatabaseRegion
}
extension GRDB.Table {
  public func all() -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func none() -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func select(_ selection: GRDB.SQLSelectable...) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func select(_ selection: [GRDB.SQLSelectable]) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func select(sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments()) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func select(literal sqlLiteral: GRDB.SQL) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func select<RowDecoder>(_ selection: [GRDB.SQLSelectable], as type: RowDecoder.Type = RowDecoder.self) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func select<RowDecoder>(_ selection: GRDB.SQLSelectable..., as type: RowDecoder.Type = RowDecoder.self) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func select<RowDecoder>(sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments(), as type: RowDecoder.Type = RowDecoder.self) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func select<RowDecoder>(literal sqlLiteral: GRDB.SQL, as type: RowDecoder.Type = RowDecoder.self) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func annotated(with selection: [GRDB.SQLSelectable]) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func annotated(with selection: GRDB.SQLSelectable...) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func filter(_ predicate: GRDB.SQLSpecificExpressible) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func filter<PrimaryKeyType>(key: PrimaryKeyType?) -> GRDB.QueryInterfaceRequest<RowDecoder> where PrimaryKeyType : GRDB.DatabaseValueConvertible
  public func filter<Sequence>(keys: Sequence) -> GRDB.QueryInterfaceRequest<RowDecoder> where Sequence : Swift.Sequence, Sequence.Element : GRDB.DatabaseValueConvertible
  public func filter(key: [Swift.String : GRDB.DatabaseValueConvertible?]?) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func filter(keys: [[Swift.String : GRDB.DatabaseValueConvertible?]]) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func filter(sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments()) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func filter(literal sqlLiteral: GRDB.SQL) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func order(_ orderings: GRDB.SQLOrderingTerm...) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func order(_ orderings: [GRDB.SQLOrderingTerm]) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func orderByPrimaryKey() -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func order(sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments()) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func order(literal sqlLiteral: GRDB.SQL) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func limit(_ limit: Swift.Int, offset: Swift.Int? = nil) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func aliased(_ alias: GRDB.TableAlias) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func with<T>(_ cte: GRDB.CommonTableExpression<T>) -> GRDB.QueryInterfaceRequest<RowDecoder>
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension GRDB.Table where RowDecoder : Swift.Identifiable, RowDecoder.ID : GRDB.DatabaseValueConvertible {
  public func filter(id: RowDecoder.ID) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func filter<Collection>(ids: Collection) -> GRDB.QueryInterfaceRequest<RowDecoder> where Collection : Swift.Collection, RowDecoder.ID == Collection.Element
  public func selectID() -> GRDB.QueryInterfaceRequest<RowDecoder.ID>
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension GRDB.Table where RowDecoder : Swift.Identifiable, RowDecoder.ID : GRDB._OptionalProtocol, RowDecoder.ID.Wrapped : GRDB.DatabaseValueConvertible {
  public func filter(id: RowDecoder.ID.Wrapped) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func filter<Collection>(ids: Collection) -> GRDB.QueryInterfaceRequest<RowDecoder> where Collection : Swift.Collection, Collection.Element : GRDB.DatabaseValueConvertible, Collection.Element == RowDecoder.ID.Wrapped
  public func selectID() -> GRDB.QueryInterfaceRequest<RowDecoder.ID.Wrapped>
}
extension GRDB.Table {
  public func fetchCount(_ db: GRDB.Database) throws -> Swift.Int
}
extension GRDB.Table where RowDecoder : GRDB.FetchableRecord {
  public func fetchCursor(_ db: GRDB.Database) throws -> GRDB.RecordCursor<RowDecoder>
  public func fetchAll(_ db: GRDB.Database) throws -> [RowDecoder]
  public func fetchOne(_ db: GRDB.Database) throws -> RowDecoder?
}
extension GRDB.Table where RowDecoder : GRDB.FetchableRecord, RowDecoder : Swift.Hashable {
  public func fetchSet(_ db: GRDB.Database) throws -> Swift.Set<RowDecoder>
}
extension GRDB.Table where RowDecoder == GRDB.Row {
  public func fetchCursor(_ db: GRDB.Database) throws -> GRDB.RowCursor
  public func fetchAll(_ db: GRDB.Database) throws -> [GRDB.Row]
  public func fetchOne(_ db: GRDB.Database) throws -> GRDB.Row?
  public func fetchSet(_ db: GRDB.Database) throws -> Swift.Set<GRDB.Row>
}
extension GRDB.Table where RowDecoder : GRDB.DatabaseValueConvertible {
  public func fetchCursor(_ db: GRDB.Database) throws -> GRDB.DatabaseValueCursor<RowDecoder>
  public func fetchAll(_ db: GRDB.Database) throws -> [RowDecoder]
  public func fetchOne(_ db: GRDB.Database) throws -> RowDecoder?
}
extension GRDB.Table where RowDecoder : GRDB.DatabaseValueConvertible, RowDecoder : Swift.Hashable {
  public func fetchSet(_ db: GRDB.Database) throws -> Swift.Set<RowDecoder>
}
extension GRDB.Table where RowDecoder : GRDB._OptionalProtocol, RowDecoder.Wrapped : GRDB.DatabaseValueConvertible {
  public func fetchCursor(_ db: GRDB.Database) throws -> GRDB.NullableDatabaseValueCursor<RowDecoder.Wrapped>
  public func fetchAll(_ db: GRDB.Database) throws -> [RowDecoder.Wrapped?]
  public func fetchOne(_ db: GRDB.Database) throws -> RowDecoder.Wrapped?
}
extension GRDB.Table where RowDecoder : GRDB._OptionalProtocol, RowDecoder.Wrapped : GRDB.DatabaseValueConvertible, RowDecoder.Wrapped : Swift.Hashable {
  public func fetchSet(_ db: GRDB.Database) throws -> Swift.Set<RowDecoder.Wrapped?>
}
extension GRDB.Table where RowDecoder : GRDB.DatabaseValueConvertible, RowDecoder : GRDB.StatementColumnConvertible {
  public func fetchCursor(_ db: GRDB.Database) throws -> GRDB.FastDatabaseValueCursor<RowDecoder>
  public func fetchAll(_ db: GRDB.Database) throws -> [RowDecoder]
  public func fetchOne(_ db: GRDB.Database) throws -> RowDecoder?
}
extension GRDB.Table where RowDecoder : GRDB.DatabaseValueConvertible, RowDecoder : GRDB.StatementColumnConvertible, RowDecoder : Swift.Hashable {
  public func fetchSet(_ db: GRDB.Database) throws -> Swift.Set<RowDecoder>
}
extension GRDB.Table where RowDecoder : GRDB._OptionalProtocol, RowDecoder.Wrapped : GRDB.DatabaseValueConvertible, RowDecoder.Wrapped : GRDB.StatementColumnConvertible {
  public func fetchCursor(_ db: GRDB.Database) throws -> GRDB.FastNullableDatabaseValueCursor<RowDecoder.Wrapped>
  public func fetchAll(_ db: GRDB.Database) throws -> [RowDecoder.Wrapped?]
  public func fetchOne(_ db: GRDB.Database) throws -> RowDecoder.Wrapped?
}
extension GRDB.Table where RowDecoder : GRDB._OptionalProtocol, RowDecoder.Wrapped : GRDB.DatabaseValueConvertible, RowDecoder.Wrapped : GRDB.StatementColumnConvertible, RowDecoder.Wrapped : Swift.Hashable {
  public func fetchSet(_ db: GRDB.Database) throws -> Swift.Set<RowDecoder.Wrapped?>
}
extension GRDB.Table {
  public func belongsTo<Destination>(_ destination: Destination.Type, key: Swift.String? = nil, using foreignKey: GRDB.ForeignKey? = nil) -> GRDB.BelongsToAssociation<RowDecoder, Destination> where Destination : GRDB.TableRecord
  public func hasMany<Destination>(_ destination: Destination.Type, key: Swift.String? = nil, using foreignKey: GRDB.ForeignKey? = nil) -> GRDB.HasManyAssociation<RowDecoder, Destination> where Destination : GRDB.TableRecord
  public func hasOne<Destination>(_ destination: Destination.Type, key: Swift.String? = nil, using foreignKey: GRDB.ForeignKey? = nil) -> GRDB.HasOneAssociation<RowDecoder, Destination> where Destination : GRDB.TableRecord
}
extension GRDB.Table {
  public func belongsTo<Destination>(_ destination: GRDB.Table<Destination>, key: Swift.String? = nil, using foreignKey: GRDB.ForeignKey? = nil) -> GRDB.BelongsToAssociation<RowDecoder, Destination>
  public func hasMany<Destination>(_ destination: GRDB.Table<Destination>, key: Swift.String? = nil, using foreignKey: GRDB.ForeignKey? = nil) -> GRDB.HasManyAssociation<RowDecoder, Destination>
  public func hasOne<Destination>(_ destination: GRDB.Table<Destination>, key: Swift.String? = nil, using foreignKey: GRDB.ForeignKey? = nil) -> GRDB.HasOneAssociation<RowDecoder, Destination>
}
extension GRDB.Table {
  public func association<Destination>(to cte: GRDB.CommonTableExpression<Destination>, on condition: @escaping (_ left: GRDB.TableAlias, _ right: GRDB.TableAlias) -> GRDB.SQLExpressible) -> GRDB.JoinAssociation<RowDecoder, Destination>
  public func association<Destination>(to cte: GRDB.CommonTableExpression<Destination>) -> GRDB.JoinAssociation<RowDecoder, Destination>
}
extension GRDB.Table {
  public func hasMany<Pivot, Target>(_ destination: Target.RowDecoder.Type, through pivot: Pivot, using target: Target, key: Swift.String? = nil) -> GRDB.HasManyThroughAssociation<RowDecoder, Target.RowDecoder> where RowDecoder == Pivot.OriginRowDecoder, Pivot : GRDB.Association, Target : GRDB.Association, Pivot.RowDecoder == Target.OriginRowDecoder
  public func hasOne<Pivot, Target>(_ destination: Target.RowDecoder.Type, through pivot: Pivot, using target: Target, key: Swift.String? = nil) -> GRDB.HasOneThroughAssociation<RowDecoder, Target.RowDecoder> where RowDecoder == Pivot.OriginRowDecoder, Pivot : GRDB.AssociationToOne, Target : GRDB.AssociationToOne, Pivot.RowDecoder == Target.OriginRowDecoder
}
extension GRDB.Table {
  public func including<A>(all association: A) -> GRDB.QueryInterfaceRequest<RowDecoder> where RowDecoder == A.OriginRowDecoder, A : GRDB.AssociationToMany
  public func including<A>(optional association: A) -> GRDB.QueryInterfaceRequest<RowDecoder> where RowDecoder == A.OriginRowDecoder, A : GRDB.Association
  public func including<A>(required association: A) -> GRDB.QueryInterfaceRequest<RowDecoder> where RowDecoder == A.OriginRowDecoder, A : GRDB.Association
  public func joining<A>(optional association: A) -> GRDB.QueryInterfaceRequest<RowDecoder> where RowDecoder == A.OriginRowDecoder, A : GRDB.Association
  public func joining<A>(required association: A) -> GRDB.QueryInterfaceRequest<RowDecoder> where RowDecoder == A.OriginRowDecoder, A : GRDB.Association
  public func annotated<A>(withOptional association: A) -> GRDB.QueryInterfaceRequest<RowDecoder> where RowDecoder == A.OriginRowDecoder, A : GRDB.Association
  public func annotated<A>(withRequired association: A) -> GRDB.QueryInterfaceRequest<RowDecoder> where RowDecoder == A.OriginRowDecoder, A : GRDB.Association
}
extension GRDB.Table {
  public func annotated(with aggregates: GRDB.AssociationAggregate<RowDecoder>...) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func annotated(with aggregates: [GRDB.AssociationAggregate<RowDecoder>]) -> GRDB.QueryInterfaceRequest<RowDecoder>
  public func having(_ predicate: GRDB.AssociationAggregate<RowDecoder>) -> GRDB.QueryInterfaceRequest<RowDecoder>
}
extension GRDB.Table {
  @discardableResult
  public func deleteAll(_ db: GRDB.Database) throws -> Swift.Int
}
extension GRDB.Table {
  public func exists<PrimaryKeyType>(_ db: GRDB.Database, key: PrimaryKeyType) throws -> Swift.Bool where PrimaryKeyType : GRDB.DatabaseValueConvertible
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension GRDB.Table where RowDecoder : Swift.Identifiable, RowDecoder.ID : GRDB.DatabaseValueConvertible {
  public func exists(_ db: GRDB.Database, id: RowDecoder.ID) throws -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension GRDB.Table where RowDecoder : Swift.Identifiable, RowDecoder.ID : GRDB._OptionalProtocol, RowDecoder.ID.Wrapped : GRDB.DatabaseValueConvertible {
  public func exists(_ db: GRDB.Database, id: RowDecoder.ID.Wrapped) throws -> Swift.Bool
}
extension GRDB.Table {
  public func exists(_ db: GRDB.Database, key: [Swift.String : GRDB.DatabaseValueConvertible?]) throws -> Swift.Bool
}
extension GRDB.Table {
  @discardableResult
  public func deleteAll<Sequence>(_ db: GRDB.Database, keys: Sequence) throws -> Swift.Int where Sequence : Swift.Sequence, Sequence.Element : GRDB.DatabaseValueConvertible
  @discardableResult
  public func deleteOne<PrimaryKeyType>(_ db: GRDB.Database, key: PrimaryKeyType?) throws -> Swift.Bool where PrimaryKeyType : GRDB.DatabaseValueConvertible
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension GRDB.Table where RowDecoder : Swift.Identifiable, RowDecoder.ID : GRDB.DatabaseValueConvertible {
  @discardableResult
  public func deleteAll<Collection>(_ db: GRDB.Database, ids: Collection) throws -> Swift.Int where Collection : Swift.Collection, RowDecoder.ID == Collection.Element
  @discardableResult
  public func deleteOne(_ db: GRDB.Database, id: RowDecoder.ID) throws -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension GRDB.Table where RowDecoder : Swift.Identifiable, RowDecoder.ID : GRDB._OptionalProtocol, RowDecoder.ID.Wrapped : GRDB.DatabaseValueConvertible {
  @discardableResult
  public func deleteAll<Collection>(_ db: GRDB.Database, ids: Collection) throws -> Swift.Int where Collection : Swift.Collection, Collection.Element : GRDB.DatabaseValueConvertible, Collection.Element == RowDecoder.ID.Wrapped
  @discardableResult
  public func deleteOne(_ db: GRDB.Database, id: RowDecoder.ID.Wrapped) throws -> Swift.Bool
}
extension GRDB.Table {
  @discardableResult
  public func deleteAll(_ db: GRDB.Database, keys: [[Swift.String : GRDB.DatabaseValueConvertible?]]) throws -> Swift.Int
  @discardableResult
  public func deleteOne(_ db: GRDB.Database, key: [Swift.String : GRDB.DatabaseValueConvertible?]) throws -> Swift.Bool
}
extension GRDB.Table {
  @discardableResult
  public func updateAll(_ db: GRDB.Database, onConflict conflictResolution: GRDB.Database.ConflictResolution? = nil, _ assignments: [GRDB.ColumnAssignment]) throws -> Swift.Int
  @discardableResult
  public func updateAll(_ db: GRDB.Database, onConflict conflictResolution: GRDB.Database.ConflictResolution? = nil, _ assignment: GRDB.ColumnAssignment, _ otherAssignments: GRDB.ColumnAssignment...) throws -> Swift.Int
}
public protocol _Association {
  var _sqlAssociation: GRDB._SQLAssociation { get set }
}
public protocol Association : GRDB.DerivableRequest, GRDB._Association {
  associatedtype OriginRowDecoder
  func forKey(_ key: Swift.String) -> Self
}
extension GRDB.Association {
  public func _including(all association: GRDB._SQLAssociation) -> Self
  public func _including(optional association: GRDB._SQLAssociation) -> Self
  public func _including(required association: GRDB._SQLAssociation) -> Self
  public func _joining(optional association: GRDB._SQLAssociation) -> Self
  public func _joining(required association: GRDB._SQLAssociation) -> Self
}
extension GRDB.Association {
  public func forKey(_ codingKey: Swift.CodingKey) -> Self
  public func aliased(_ alias: GRDB.TableAlias) -> Self
}
extension GRDB.Association {
  public func select(_ selection: @escaping (GRDB.Database) throws -> [GRDB.SQLSelectable]) -> Self
  public func annotated(with selection: @escaping (GRDB.Database) throws -> [GRDB.SQLSelectable]) -> Self
}
extension GRDB.Association {
  public func filter(_ predicate: @escaping (GRDB.Database) throws -> GRDB.SQLExpressible) -> Self
}
extension GRDB.Association {
  public func order(_ orderings: @escaping (GRDB.Database) throws -> [GRDB.SQLOrderingTerm]) -> Self
  public func reversed() -> Self
  public func unordered() -> Self
}
extension GRDB.Association {
  public var databaseTableName: Swift.String {
    get
  }
}
extension GRDB.Association {
  public func group(_ expressions: @escaping (GRDB.Database) throws -> [GRDB.SQLExpressible]) -> Self
  public func having(_ predicate: @escaping (GRDB.Database) throws -> GRDB.SQLExpressible) -> Self
}
extension GRDB.Association {
  public func distinct() -> Self
  public func limit(_ limit: Swift.Int, offset: Swift.Int? = nil) -> Self
  public func with<RowDecoder>(_ cte: GRDB.CommonTableExpression<RowDecoder>) -> Self
}
public protocol AssociationToOne : GRDB.Association {
}
extension GRDB.AssociationToOne {
  public func forKey(_ key: Swift.String) -> Self
}
public protocol AssociationToMany : GRDB.Association {
}
extension GRDB.AssociationToMany {
  public func forKey(_ key: Swift.String) -> Self
}
public typealias SQLiteConnection = Swift.OpaquePointer
@_hasMissingDesignatedInitializers final public class Database : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  final public var sqliteConnection: GRDB.SQLiteConnection?
  public static var logError: GRDB.Database.LogErrorFunction? {
    get
    set
  }
  final public let configuration: GRDB.Configuration
  final public let description: Swift.String
  final public var debugDescription: Swift.String {
    get
  }
  final public var lastInsertedRowID: Swift.Int64 {
    get
  }
  final public var changesCount: Swift.Int {
    get
  }
  final public var totalChangesCount: Swift.Int {
    get
  }
  final public var isInsideTransaction: Swift.Bool {
    get
  }
  final public var lastErrorCode: GRDB.ResultCode {
    get
  }
  final public var lastErrorMessage: Swift.String? {
    get
  }
  @objc deinit
  final public var maximumStatementArgumentCount: Swift.Int {
    get
  }
  final public func add(function: GRDB.DatabaseFunction)
  final public func remove(function: GRDB.DatabaseFunction)
  final public func add(collation: GRDB.DatabaseCollation)
  final public func remove(collation: GRDB.DatabaseCollation)
  final public func trace(options: GRDB.Database.TracingOptions = .statement, _ trace: ((GRDB.Database.TraceEvent) -> Swift.Void)? = nil)
  @discardableResult
  final public func checkpoint(_ kind: GRDB.Database.CheckpointMode = .passive, on dbName: Swift.String? = "main") throws -> (walFrameCount: Swift.Int, checkpointedFrameCount: Swift.Int)
  public static let suspendNotification: Foundation.Notification.Name
  public static let resumeNotification: Foundation.Notification.Name
  final public func inTransaction(_ kind: GRDB.Database.TransactionKind? = nil, _ block: () throws -> GRDB.Database.TransactionCompletion) throws
  final public func inSavepoint(_ block: () throws -> GRDB.Database.TransactionCompletion) throws
  final public func beginTransaction(_ kind: GRDB.Database.TransactionKind? = nil) throws
  final public func rollback() throws
  final public func commit() throws
  final public func releaseMemory()
  final public func backup(to destDb: GRDB.Database, pagesPerStep: Swift.Int32 = -1, progress: ((GRDB.DatabaseBackupProgress) throws -> Swift.Void)? = nil) throws
}
extension GRDB.Database {
  public typealias BusyCallback = (_ numberOfTries: Swift.Int) -> Swift.Bool
  public enum BusyMode {
    case immediateError
    case timeout(Foundation.TimeInterval)
    case callback(GRDB.Database.BusyCallback)
  }
  public enum CheckpointMode : Swift.Int32 {
    case passive
    case full
    case restart
    case truncate
    public init?(rawValue: Swift.Int32)
    public typealias RawValue = Swift.Int32
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public struct CollationName : Swift.RawRepresentable, Swift.Hashable {
    public let rawValue: Swift.String
    public init(rawValue: Swift.String)
    public static let binary: GRDB.Database.CollationName
    public static let nocase: GRDB.Database.CollationName
    public static let rtrim: GRDB.Database.CollationName
    public typealias RawValue = Swift.String
  }
  public struct ColumnType : Swift.RawRepresentable, Swift.Hashable {
    public let rawValue: Swift.String
    public init(rawValue: Swift.String)
    public static let text: GRDB.Database.ColumnType
    public static let integer: GRDB.Database.ColumnType
    public static let double: GRDB.Database.ColumnType
    public static let real: GRDB.Database.ColumnType
    public static let numeric: GRDB.Database.ColumnType
    public static let boolean: GRDB.Database.ColumnType
    public static let blob: GRDB.Database.ColumnType
    public static let date: GRDB.Database.ColumnType
    public static let datetime: GRDB.Database.ColumnType
    public static let any: GRDB.Database.ColumnType
    public typealias RawValue = Swift.String
  }
  public enum ConflictResolution : Swift.String {
    case rollback
    case abort
    case fail
    case ignore
    case replace
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ForeignKeyAction : Swift.String {
    case cascade
    case restrict
    case setNull
    case setDefault
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public typealias LogErrorFunction = (_ resultCode: GRDB.ResultCode, _ message: Swift.String) -> Swift.Void
  public struct TracingOptions : Swift.OptionSet {
    public let rawValue: Swift.CInt
    public init(rawValue: Swift.CInt)
    public static let statement: GRDB.Database.TracingOptions
    public static let profile: GRDB.Database.TracingOptions
    public typealias ArrayLiteralElement = GRDB.Database.TracingOptions
    public typealias Element = GRDB.Database.TracingOptions
    public typealias RawValue = Swift.CInt
  }
  public enum TraceEvent : Swift.CustomStringConvertible {
    public struct Statement : Swift.CustomStringConvertible {
      public var sql: Swift.String {
        get
      }
      public var expandedSQL: Swift.String {
        get
      }
      public var description: Swift.String {
        get
      }
    }
    case statement(GRDB.Database.TraceEvent.Statement)
    case profile(statement: GRDB.Database.TraceEvent.Statement, duration: Foundation.TimeInterval)
    public var description: Swift.String {
      get
    }
    public var expandedDescription: Swift.String {
      get
    }
  }
  @frozen public enum TransactionCompletion {
    case commit
    case rollback
    public static func == (a: GRDB.Database.TransactionCompletion, b: GRDB.Database.TransactionCompletion) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum TransactionKind : Swift.String {
    case deferred
    case immediate
    case exclusive
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct FTS3 : GRDB.VirtualTableModule {
  public enum Diacritics {
    case keep
    case removeLegacy
    @available(macOS 11.0, iOS 14, tvOS 14, watchOS 7, *)
    case remove
    public static func == (a: GRDB.FTS3.Diacritics, b: GRDB.FTS3.Diacritics) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init()
  public static func tokenize(_ string: Swift.String, withTokenizer tokenizer: GRDB.FTS3TokenizerDescriptor = .simple) -> [Swift.String]
  public let moduleName: Swift.String
  public func makeTableDefinition() -> GRDB.FTS3TableDefinition
  public func makeTableDefinition(configuration: GRDB.VirtualTableConfiguration) -> GRDB.FTS3TableDefinition
  public func moduleArguments(for definition: GRDB.FTS3TableDefinition, in db: GRDB.Database) -> [Swift.String]
  public func database(_ db: GRDB.Database, didCreate tableName: Swift.String, using definition: GRDB.FTS3TableDefinition)
  public typealias TableDefinition = GRDB.FTS3TableDefinition
}
@_hasMissingDesignatedInitializers final public class FTS3TableDefinition {
  final public var tokenizer: GRDB.FTS3TokenizerDescriptor?
  final public func column(_ name: Swift.String)
  @objc deinit
}
extension CoreFoundation.CGFloat : GRDB.DatabaseValueConvertible {
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> CoreFoundation.CGFloat?
}
public protocol ColumnExpression : GRDB.SQLSpecificExpressible {
  var name: Swift.String { get }
}
extension GRDB.ColumnExpression {
  public var sqlExpression: GRDB.SQLExpression {
    get
  }
  public var detached: GRDB.SQLExpression {
    get
  }
}
extension GRDB.ColumnExpression where Self == GRDB.Column {
  public static var rowID: GRDB.Column {
    get
  }
}
public struct Column : GRDB.ColumnExpression, Swift.Equatable {
  public static let rowID: GRDB.Column
  public var name: Swift.String
  public init(_ name: Swift.String)
  public init(_ codingKey: Swift.CodingKey)
  @_disfavoredOverload public static func == (lhs: GRDB.Column, rhs: GRDB.Column) -> Swift.Bool
}
extension GRDB.ColumnExpression where Self : Swift.RawRepresentable, Self.RawValue == Swift.String {
  public var name: Swift.String {
    get
  }
}
extension Foundation.NSDate : GRDB.DatabaseValueConvertible {
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> Self?
}
extension Foundation.Date : GRDB.DatabaseValueConvertible {
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> Foundation.Date?
  @usableFromInline
  internal init?(databaseDateComponents: GRDB.DatabaseDateComponents)
  public init?(julianDay: Swift.Double)
}
extension Foundation.Date : GRDB.StatementColumnConvertible {
  @inline(__always) @inlinable public init?(sqliteStatement: GRDB.SQLiteStatement, index: Swift.Int32) {
        switch sqlite3_column_type(sqliteStatement, index) {
        case SQLITE_INTEGER, SQLITE_FLOAT:
            self.init(timeIntervalSince1970: sqlite3_column_double(sqliteStatement, index))
        case SQLITE_TEXT:
            guard let components = DatabaseDateComponents(sqliteStatement: sqliteStatement, index: index),
                  let date = Date(databaseDateComponents: components)
            else {
                return nil
            }
            self.init(timeIntervalSinceReferenceDate: date.timeIntervalSinceReferenceDate)
        default:
            return nil
        }
    }
}
extension GRDB.Database {
  final public func add(transactionObserver: GRDB.TransactionObserver, extent: GRDB.Database.TransactionObservationExtent = .observerLifetime)
  final public func remove(transactionObserver: GRDB.TransactionObserver)
  final public func afterNextTransactionCommit(_ closure: @escaping (GRDB.Database) -> Swift.Void)
  public enum TransactionObservationExtent {
    case observerLifetime
    case nextTransaction
    case databaseLifetime
    public static func == (a: GRDB.Database.TransactionObservationExtent, b: GRDB.Database.TransactionObservationExtent) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public protocol TransactionObserver : AnyObject {
  func observes(eventsOfKind eventKind: GRDB.DatabaseEventKind) -> Swift.Bool
  func databaseDidChange(with event: GRDB.DatabaseEvent)
  func databaseWillCommit() throws
  func databaseDidCommit(_ db: GRDB.Database)
  func databaseDidRollback(_ db: GRDB.Database)
}
extension GRDB.TransactionObserver {
  public func databaseWillCommit() throws
  public func stopObservingDatabaseChangesUntilNextTransaction()
}
@frozen public enum DatabaseEventKind {
  case insert(tableName: Swift.String)
  case delete(tableName: Swift.String)
  case update(tableName: Swift.String, columnNames: Swift.Set<Swift.String>)
}
extension GRDB.DatabaseEventKind {
  public var tableName: Swift.String {
    get
  }
}
public struct DatabaseEvent {
  public enum Kind : Swift.Int32 {
    case insert
    case delete
    case update
    public init?(rawValue: Swift.Int32)
    public typealias RawValue = Swift.Int32
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public let kind: GRDB.DatabaseEvent.Kind
  public var databaseName: Swift.String {
    get
  }
  public var tableName: Swift.String {
    get
  }
  public let rowID: Swift.Int64
  public func copy() -> GRDB.DatabaseEvent
}
public struct SQLSelection {
}
public protocol SQLSelectable {
  var sqlSelection: GRDB.SQLSelection { get }
}
extension GRDB.SQLSelection : GRDB.SQLSelectable {
  @available(*, deprecated, message: "Already SQLSelection")
  public var sqlSelection: GRDB.SQLSelection {
    get
  }
}
public struct AllColumns : GRDB.SQLSelectable {
  public init()
  public var sqlSelection: GRDB.SQLSelection {
    get
  }
}
extension GRDB.ValueReducers {
  public struct Fetch<Value> : GRDB.ValueReducer {
    public func _fetch(_ db: GRDB.Database) throws -> Value
    public func _value(_ fetched: Value) -> Value?
    public typealias Fetched = Value
  }
}
extension GRDB.SQLSelectable where Self : Swift.RawRepresentable, Self.RawValue : GRDB.SQLSelectable {
  public var sqlSelection: GRDB.SQLSelection {
    get
  }
}
extension GRDB.SQLOrderingTerm where Self : Swift.RawRepresentable, Self.RawValue : GRDB.SQLOrderingTerm {
  public var sqlOrdering: GRDB.SQLOrdering {
    get
  }
}
extension GRDB.SQLExpressible where Self : Swift.RawRepresentable, Self.RawValue : GRDB.SQLExpressible {
  public var sqlExpression: GRDB.SQLExpression {
    get
  }
}
extension GRDB.StatementBinding where Self : Swift.RawRepresentable, Self.RawValue : GRDB.StatementBinding {
  public func bind(to sqliteStatement: GRDB.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension GRDB.DatabaseValueConvertible where Self : Swift.RawRepresentable, Self.RawValue : GRDB.DatabaseValueConvertible {
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> Self?
}
extension GRDB.TableRequest where Self : GRDB.FilteredRequest {
  public func matching(_ pattern: GRDB.FTS3Pattern?) -> Self
}
extension GRDB.TableRecord {
  public static func matching(_ pattern: GRDB.FTS3Pattern?) -> GRDB.QueryInterfaceRequest<Self>
}
extension GRDB.ColumnExpression {
  public func match(_ pattern: GRDB.FTS3Pattern?) -> GRDB.SQLExpression
}
public func abs(_ value: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func average(_ value: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
@available(*, deprecated)
public func count(_ counted: GRDB.SQLSelectable) -> GRDB.SQLExpression
public func count(_ counted: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func count(distinct value: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func ?? (lhs: GRDB.SQLSpecificExpressible, rhs: GRDB.SQLExpressible) -> GRDB.SQLExpression
public func length(_ value: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func max(_ value: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func min(_ value: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func sum(_ value: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
public func total(_ value: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression
extension GRDB.SQLSpecificExpressible {
  public var capitalized: GRDB.SQLExpression {
    get
  }
  public var lowercased: GRDB.SQLExpression {
    get
  }
  public var uppercased: GRDB.SQLExpression {
    get
  }
}
extension GRDB.SQLSpecificExpressible {
  @available(macOS 10.11, watchOS 3.0, *)
  public var localizedCapitalized: GRDB.SQLExpression {
    get
  }
  @available(macOS 10.11, watchOS 3.0, *)
  public var localizedLowercased: GRDB.SQLExpression {
    get
  }
  @available(macOS 10.11, watchOS 3.0, *)
  public var localizedUppercased: GRDB.SQLExpression {
    get
  }
}
public enum SQLDateModifier : GRDB.SQLSpecificExpressible {
  case second(Swift.Double)
  case minute(Swift.Int)
  case hour(Swift.Int)
  case day(Swift.Int)
  case month(Swift.Int)
  case year(Swift.Int)
  case startOfDay
  case startOfMonth
  case startOfYear
  case weekday(Swift.Int)
  case unixEpoch
  case localTime
  case utc
  public var sqlExpression: GRDB.SQLExpression {
    get
  }
}
public func julianDay(_ value: GRDB.SQLSpecificExpressible, _ modifiers: GRDB.SQLDateModifier...) -> GRDB.SQLExpression
public func dateTime(_ value: GRDB.SQLSpecificExpressible, _ modifiers: GRDB.SQLDateModifier...) -> GRDB.SQLExpression
public struct HasOneAssociation<Origin, Destination> : GRDB.AssociationToOne {
  public typealias OriginRowDecoder = Origin
  public typealias RowDecoder = Destination
  public var _sqlAssociation: GRDB._SQLAssociation
}
public protocol DatabaseCancellable {
  func cancel()
}
public class AnyDatabaseCancellable : GRDB.DatabaseCancellable {
  public init(cancel: @escaping () -> Swift.Void)
  convenience public init(_ cancellable: GRDB.DatabaseCancellable)
  @objc deinit
  public func cancel()
}
public struct FTS3Pattern {
  public let rawPattern: Swift.String
  public init(rawPattern: Swift.String) throws
  public init?(matchingAnyTokenIn string: Swift.String)
  public init?(matchingAllTokensIn string: Swift.String)
  public init?(matchingAllPrefixesIn string: Swift.String)
  public init?(matchingPhrase string: Swift.String)
}
extension GRDB.FTS3Pattern : GRDB.DatabaseValueConvertible {
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> GRDB.FTS3Pattern?
}
public func splittingRowAdapters(columnCounts: [Swift.Int]) -> [GRDB.RowAdapter]
public struct _LayoutedColumnMapping {
  public let _layoutColumns: [(Swift.Int, Swift.String)]
}
extension GRDB._LayoutedColumnMapping : GRDB._LayoutedRowAdapter {
  public var _mapping: GRDB._LayoutedColumnMapping {
    get
  }
  public var _scopes: [Swift.String : GRDB._LayoutedRowAdapter] {
    get
  }
}
extension GRDB._LayoutedColumnMapping : GRDB._RowLayout {
  public func _layoutIndex(ofColumn name: Swift.String) -> Swift.Int?
}
public protocol _LayoutedRowAdapter {
  var _mapping: GRDB._LayoutedColumnMapping { get }
  var _scopes: [Swift.String : GRDB._LayoutedRowAdapter] { get }
}
public protocol _RowLayout {
  var _layoutColumns: [(Swift.Int, Swift.String)] { get }
  func _layoutIndex(ofColumn name: Swift.String) -> Swift.Int?
}
extension GRDB.Statement : GRDB._RowLayout {
  final public var _layoutColumns: [(Swift.Int, Swift.String)] {
    get
  }
  final public func _layoutIndex(ofColumn name: Swift.String) -> Swift.Int?
}
public protocol _RowAdapter {
  func _layoutedAdapter(from layout: GRDB._RowLayout) throws -> GRDB._LayoutedRowAdapter
}
public protocol RowAdapter : GRDB._RowAdapter {
}
extension GRDB.RowAdapter {
  public func addingScopes(_ scopes: [Swift.String : GRDB.RowAdapter]) -> GRDB.RowAdapter
}
public struct EmptyRowAdapter : GRDB.RowAdapter {
  public init()
  public func _layoutedAdapter(from layout: GRDB._RowLayout) throws -> GRDB._LayoutedRowAdapter
}
public struct ColumnMapping : GRDB.RowAdapter {
  public init(_ mapping: [Swift.String : Swift.String])
  public func _layoutedAdapter(from layout: GRDB._RowLayout) throws -> GRDB._LayoutedRowAdapter
}
public struct SuffixRowAdapter : GRDB.RowAdapter {
  public init(fromIndex index: Swift.Int)
  public func _layoutedAdapter(from layout: GRDB._RowLayout) throws -> GRDB._LayoutedRowAdapter
}
public struct RangeRowAdapter : GRDB.RowAdapter {
  public init(_ range: Swift.CountableRange<Swift.Int>)
  public init(_ range: Swift.CountableClosedRange<Swift.Int>)
  public func _layoutedAdapter(from layout: GRDB._RowLayout) throws -> GRDB._LayoutedRowAdapter
}
public struct ScopeAdapter : GRDB.RowAdapter {
  public init(_ scopes: [Swift.String : GRDB.RowAdapter])
  public init(base: GRDB.RowAdapter, scopes: [Swift.String : GRDB.RowAdapter])
  public func _layoutedAdapter(from layout: GRDB._RowLayout) throws -> GRDB._LayoutedRowAdapter
}
public struct RenameColumnAdapter : GRDB.RowAdapter {
  public init(_ transform: @escaping (Swift.String) -> Swift.String)
  public func _layoutedAdapter(from layout: GRDB._RowLayout) throws -> GRDB._LayoutedRowAdapter
}
public protocol DatabaseWriter : GRDB.DatabaseReader {
  @_disfavoredOverload func write<T>(_ updates: (GRDB.Database) throws -> T) throws -> T
  @_disfavoredOverload func writeWithoutTransaction<T>(_ updates: (GRDB.Database) throws -> T) rethrows -> T
  @_disfavoredOverload func barrierWriteWithoutTransaction<T>(_ updates: (GRDB.Database) throws -> T) rethrows -> T
  func asyncBarrierWriteWithoutTransaction(_ updates: @escaping (GRDB.Database) -> Swift.Void)
  func asyncWrite<T>(_ updates: @escaping (GRDB.Database) throws -> T, completion: @escaping (GRDB.Database, Swift.Result<T, Swift.Error>) -> Swift.Void)
  func asyncWriteWithoutTransaction(_ updates: @escaping (GRDB.Database) -> Swift.Void)
  func unsafeReentrantWrite<T>(_ updates: (GRDB.Database) throws -> T) rethrows -> T
  func concurrentRead<T>(_ value: @escaping (GRDB.Database) throws -> T) -> GRDB.DatabaseFuture<T>
  func spawnConcurrentRead(_ value: @escaping (Swift.Result<GRDB.Database, Swift.Error>) -> Swift.Void)
}
extension GRDB.DatabaseWriter {
  public func write<T>(_ updates: (GRDB.Database) throws -> T) throws -> T
  public func asyncWrite<T>(_ updates: @escaping (GRDB.Database) throws -> T, completion: @escaping (GRDB.Database, Swift.Result<T, Swift.Error>) -> Swift.Void)
  public func add(transactionObserver: GRDB.TransactionObserver, extent: GRDB.Database.TransactionObservationExtent = .observerLifetime)
  public func remove(transactionObserver: GRDB.TransactionObserver)
  @_disfavoredOverload public func erase() throws
  @_disfavoredOverload public func vacuum() throws
  @available(macOS 11.0, iOS 14, tvOS 14, watchOS 7, *)
  @_disfavoredOverload public func vacuum(into filePath: Swift.String) throws
}
extension GRDB.DatabaseWriter {
  #if compiler(>=5.3) && $AsyncAwait && $Sendable
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  public func write<T>(_ updates: @escaping @Sendable (GRDB.Database) throws -> T) async throws -> T
  #endif
  #if compiler(>=5.3) && $AsyncAwait && $Sendable
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  public func writeWithoutTransaction<T>(_ updates: @escaping @Sendable (GRDB.Database) throws -> T) async throws -> T
  #endif
  #if compiler(>=5.3) && $AsyncAwait && $Sendable
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  public func barrierWriteWithoutTransaction<T>(_ updates: @escaping @Sendable (GRDB.Database) throws -> T) async throws -> T
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  public func erase() async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  public func vacuum() async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  public func vacuum(into filePath: Swift.String) async throws
  #endif
}
extension GRDB.DatabaseWriter {
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  public func writePublisher<Output>(updates: @escaping (GRDB.Database) throws -> Output) -> GRDB.DatabasePublishers.Write<Output>
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  public func writePublisher<S, Output>(receiveOn scheduler: S, updates: @escaping (GRDB.Database) throws -> Output) -> GRDB.DatabasePublishers.Write<Output> where S : Combine.Scheduler
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  public func writePublisher<T, Output>(updates: @escaping (GRDB.Database) throws -> T, thenRead value: @escaping (GRDB.Database, T) throws -> Output) -> GRDB.DatabasePublishers.Write<Output>
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  public func writePublisher<S, T, Output>(receiveOn scheduler: S, updates: @escaping (GRDB.Database) throws -> T, thenRead value: @escaping (GRDB.Database, T) throws -> Output) -> GRDB.DatabasePublishers.Write<Output> where S : Combine.Scheduler
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension GRDB.DatabasePublishers {
  public struct Write<Output> : Combine.Publisher {
    public typealias Output = Output
    public typealias Failure = Swift.Error
    public func receive<S>(subscriber: S) where Output == S.Input, S : Combine.Subscriber, S.Failure == Swift.Error
  }
}
@_hasMissingDesignatedInitializers public class DatabaseFuture<Value> {
  public func wait() throws -> Value
  @objc deinit
}
final public class AnyDatabaseWriter : GRDB.DatabaseWriter {
  public init(_ base: GRDB.DatabaseWriter)
  final public var configuration: GRDB.Configuration {
    get
  }
  final public func close() throws
  final public func interrupt()
  @_disfavoredOverload final public func read<T>(_ value: (GRDB.Database) throws -> T) throws -> T
  final public func asyncRead(_ value: @escaping (Swift.Result<GRDB.Database, Swift.Error>) -> Swift.Void)
  @_disfavoredOverload final public func unsafeRead<T>(_ value: (GRDB.Database) throws -> T) throws -> T
  final public func asyncUnsafeRead(_ value: @escaping (Swift.Result<GRDB.Database, Swift.Error>) -> Swift.Void)
  final public func unsafeReentrantRead<T>(_ value: (GRDB.Database) throws -> T) throws -> T
  final public func concurrentRead<T>(_ value: @escaping (GRDB.Database) throws -> T) -> GRDB.DatabaseFuture<T>
  final public func spawnConcurrentRead(_ value: @escaping (Swift.Result<GRDB.Database, Swift.Error>) -> Swift.Void)
  @_disfavoredOverload final public func write<T>(_ updates: (GRDB.Database) throws -> T) throws -> T
  @_disfavoredOverload final public func writeWithoutTransaction<T>(_ updates: (GRDB.Database) throws -> T) rethrows -> T
  @_disfavoredOverload final public func barrierWriteWithoutTransaction<T>(_ updates: (GRDB.Database) throws -> T) rethrows -> T
  final public func asyncBarrierWriteWithoutTransaction(_ updates: @escaping (GRDB.Database) -> Swift.Void)
  final public func asyncWrite<T>(_ updates: @escaping (GRDB.Database) throws -> T, completion: @escaping (GRDB.Database, Swift.Result<T, Swift.Error>) -> Swift.Void)
  final public func asyncWriteWithoutTransaction(_ updates: @escaping (GRDB.Database) -> Swift.Void)
  final public func unsafeReentrantWrite<T>(_ updates: (GRDB.Database) throws -> T) rethrows -> T
  final public func _add<Reducer>(observation: GRDB.ValueObservation<Reducer>, scheduling scheduler: GRDB.ValueObservationScheduler, onChange: @escaping (Reducer.Value) -> Swift.Void) -> GRDB.DatabaseCancellable where Reducer : GRDB.ValueReducer
  @objc deinit
}
public struct BelongsToAssociation<Origin, Destination> : GRDB.AssociationToOne {
  public typealias OriginRowDecoder = Origin
  public typealias RowDecoder = Destination
  public var _sqlAssociation: GRDB._SQLAssociation
}
@_hasMissingDesignatedInitializers final public class DatabaseSnapshot : GRDB.DatabaseReader {
  final public var configuration: GRDB.Configuration {
    get
  }
  @objc deinit
  final public func close() throws
}
extension GRDB.DatabaseSnapshot {
  final public func interrupt()
  final public func read<T>(_ block: (GRDB.Database) throws -> T) rethrows -> T
  final public func asyncRead(_ value: @escaping (Swift.Result<GRDB.Database, Swift.Error>) -> Swift.Void)
  final public func unsafeRead<T>(_ value: (GRDB.Database) throws -> T) rethrows -> T
  final public func asyncUnsafeRead(_ value: @escaping (Swift.Result<GRDB.Database, Swift.Error>) -> Swift.Void)
  final public func unsafeReentrantRead<T>(_ value: (GRDB.Database) throws -> T) throws -> T
  final public func _add<Reducer>(observation: GRDB.ValueObservation<Reducer>, scheduling scheduler: GRDB.ValueObservationScheduler, onChange: @escaping (Reducer.Value) -> Swift.Void) -> GRDB.DatabaseCancellable where Reducer : GRDB.ValueReducer
}
public struct DatabaseMigrator {
  public enum ForeignKeyChecks {
    case deferred
    case immediate
    public static func == (a: GRDB.DatabaseMigrator.ForeignKeyChecks, b: GRDB.DatabaseMigrator.ForeignKeyChecks) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var eraseDatabaseOnSchemaChange: Swift.Bool
  public init()
  public func disablingDeferredForeignKeyChecks() -> GRDB.DatabaseMigrator
  public mutating func registerMigration(_ identifier: Swift.String, foreignKeyChecks: GRDB.DatabaseMigrator.ForeignKeyChecks = .deferred, migrate: @escaping (GRDB.Database) throws -> Swift.Void)
  public func migrate(_ writer: GRDB.DatabaseWriter) throws
  public func migrate(_ writer: GRDB.DatabaseWriter, upTo targetIdentifier: Swift.String) throws
  public func asyncMigrate(_ writer: GRDB.DatabaseWriter, completion: @escaping (GRDB.Database, Swift.Error?) -> Swift.Void)
  public var migrations: [Swift.String] {
    get
  }
  public func appliedMigrations(_ db: GRDB.Database) throws -> [Swift.String]
  public func appliedIdentifiers(_ db: GRDB.Database) throws -> Swift.Set<Swift.String>
  public func completedMigrations(_ db: GRDB.Database) throws -> [Swift.String]
  public func hasCompletedMigrations(_ db: GRDB.Database) throws -> Swift.Bool
  public func hasBeenSuperseded(_ db: GRDB.Database) throws -> Swift.Bool
}
extension GRDB.DatabaseMigrator {
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  public func migratePublisher(_ writer: GRDB.DatabaseWriter) -> GRDB.DatabasePublishers.Migrate
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  public func migratePublisher<S>(_ writer: GRDB.DatabaseWriter, receiveOn scheduler: S) -> GRDB.DatabasePublishers.Migrate where S : Combine.Scheduler
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension GRDB.DatabasePublishers {
  public struct Migrate : Combine.Publisher {
    public typealias Output = Swift.Void
    public typealias Failure = Swift.Error
    public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Error, S.Input == ()
  }
}
extension Foundation.NSString : GRDB.DatabaseValueConvertible {
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> Self?
}
extension GRDB.Database {
  final public func makeStatement(sql: Swift.String) throws -> GRDB.Statement
  final public func makeStatement(literal sqlLiteral: GRDB.SQL) throws -> GRDB.Statement
  @available(*, deprecated, renamed: "makeStatement(sql:)")
  final public func makeSelectStatement(sql: Swift.String) throws -> GRDB.Statement
  @available(*, deprecated, renamed: "makeStatement(literal:)")
  final public func makeSelectStatement(literal sqlLiteral: GRDB.SQL) throws -> GRDB.Statement
  final public func cachedStatement(sql: Swift.String) throws -> GRDB.Statement
  final public func cachedStatement(literal sqlLiteral: GRDB.SQL) throws -> GRDB.Statement
  @available(*, deprecated, renamed: "cachedStatement(sql:)")
  final public func cachedSelectStatement(sql: Swift.String) throws -> GRDB.Statement
  @available(*, deprecated, renamed: "cachedStatement(literal:)")
  final public func cachedSelectStatement(literal sqlLiteral: GRDB.SQL) throws -> GRDB.Statement
  @available(*, deprecated, renamed: "makeStatement(sql:)")
  final public func makeUpdateStatement(sql: Swift.String) throws -> GRDB.Statement
  @available(*, deprecated, renamed: "makeStatement(literal:)")
  final public func makeUpdateStatement(literal sqlLiteral: GRDB.SQL) throws -> GRDB.Statement
  @available(*, deprecated, renamed: "cachedStatement(sql:)")
  final public func cachedUpdateStatement(sql: Swift.String) throws -> GRDB.Statement
  @available(*, deprecated, renamed: "cachedStatement(sql:)")
  final public func cachedUpdateStatement(literal sqlLiteral: GRDB.SQL) throws -> GRDB.Statement
  final public func allStatements(sql: Swift.String, arguments: GRDB.StatementArguments? = nil) throws -> GRDB.SQLStatementCursor
  final public func allStatements(literal sqlLiteral: GRDB.SQL) throws -> GRDB.SQLStatementCursor
  final public func execute(sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments()) throws
  final public func execute(literal sqlLiteral: GRDB.SQL) throws
}
@_hasMissingDesignatedInitializers public class SQLStatementCursor : GRDB.Cursor {
  public func next() throws -> GRDB.Statement?
  public typealias Element = GRDB.Statement
  @objc deinit
}
extension GRDB.Database {
  @usableFromInline
  final internal func statementWillExecute(_ statement: GRDB.Statement) throws
  @usableFromInline
  final internal func statementDidExecute(_ statement: GRDB.Statement) throws
  @usableFromInline
  final internal func statementDidFail(_ statement: GRDB.Statement, withResultCode resultCode: Swift.Int32) throws -> Swift.Never
}
extension Foundation.NSUUID : GRDB.DatabaseValueConvertible {
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> Self?
}
extension Foundation.UUID : GRDB.DatabaseValueConvertible {
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> Foundation.UUID?
}
extension Foundation.UUID : GRDB.StatementColumnConvertible {
  @inline(__always) @inlinable public init?(sqliteStatement: GRDB.SQLiteStatement, index: Swift.Int32) {
        switch sqlite3_column_type(sqliteStatement, index) {
        case SQLITE_TEXT:
            let string = String(cString: sqlite3_column_text(sqliteStatement, index)!)
            guard let uuid = UUID(uuidString: string) else {
                return nil
            }
            self.init(uuid: uuid.uuid)
        case SQLITE_BLOB:
            guard sqlite3_column_bytes(sqliteStatement, index) == 16,
                  let blob = sqlite3_column_blob(sqliteStatement, index) else
            {
                return nil
            }
            self.init(uuid: blob.assumingMemoryBound(to: uuid_t.self).pointee)
        default:
            return nil
        }
    }
}
public protocol DatabaseValueConvertible : GRDB.SQLExpressible, GRDB.StatementBinding {
  var databaseValue: GRDB.DatabaseValue { get }
  static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> Self?
}
extension GRDB.DatabaseValueConvertible {
  public var sqlExpression: GRDB.SQLExpression {
    get
  }
  public func bind(to sqliteStatement: GRDB.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension GRDB.DatabaseValueConvertible {
  @usableFromInline
  internal static func decode(fromRow row: GRDB.Row, atUncheckedIndex index: Swift.Int) throws -> Self
  @usableFromInline
  internal static func decodeIfPresent(fromRow row: GRDB.Row, atUncheckedIndex index: Swift.Int) throws -> Self?
}
@_hasMissingDesignatedInitializers final public class DatabaseValueCursor<Value> : GRDB.DatabaseCursor where Value : GRDB.DatabaseValueConvertible {
  public typealias Element = Value
  final public let statement: GRDB.Statement
  final public var _isDone: Swift.Bool
  @objc deinit
  final public func _element(sqliteStatement: GRDB.SQLiteStatement) -> Value
}
@_hasMissingDesignatedInitializers final public class NullableDatabaseValueCursor<Value> : GRDB.DatabaseCursor where Value : GRDB.DatabaseValueConvertible {
  public typealias Element = Value?
  final public let statement: GRDB.Statement
  final public var _isDone: Swift.Bool
  @objc deinit
  final public func _element(sqliteStatement: GRDB.SQLiteStatement) -> Value?
}
extension GRDB.DatabaseValueConvertible {
  public static func fetchCursor(_ statement: GRDB.Statement, arguments: GRDB.StatementArguments? = nil, adapter: GRDB.RowAdapter? = nil) throws -> GRDB.DatabaseValueCursor<Self>
  public static func fetchAll(_ statement: GRDB.Statement, arguments: GRDB.StatementArguments? = nil, adapter: GRDB.RowAdapter? = nil) throws -> [Self]
  public static func fetchOne(_ statement: GRDB.Statement, arguments: GRDB.StatementArguments? = nil, adapter: GRDB.RowAdapter? = nil) throws -> Self?
}
extension GRDB.DatabaseValueConvertible where Self : Swift.Hashable {
  public static func fetchSet(_ statement: GRDB.Statement, arguments: GRDB.StatementArguments? = nil, adapter: GRDB.RowAdapter? = nil) throws -> Swift.Set<Self>
}
extension GRDB.DatabaseValueConvertible {
  public static func fetchCursor(_ db: GRDB.Database, sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments(), adapter: GRDB.RowAdapter? = nil) throws -> GRDB.DatabaseValueCursor<Self>
  public static func fetchAll(_ db: GRDB.Database, sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments(), adapter: GRDB.RowAdapter? = nil) throws -> [Self]
  public static func fetchOne(_ db: GRDB.Database, sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments(), adapter: GRDB.RowAdapter? = nil) throws -> Self?
}
extension GRDB.DatabaseValueConvertible where Self : Swift.Hashable {
  public static func fetchSet(_ db: GRDB.Database, sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments(), adapter: GRDB.RowAdapter? = nil) throws -> Swift.Set<Self>
}
extension GRDB.DatabaseValueConvertible {
  public static func fetchCursor<R>(_ db: GRDB.Database, _ request: R) throws -> GRDB.DatabaseValueCursor<Self> where R : GRDB.FetchRequest
  public static func fetchAll<R>(_ db: GRDB.Database, _ request: R) throws -> [Self] where R : GRDB.FetchRequest
  public static func fetchOne<R>(_ db: GRDB.Database, _ request: R) throws -> Self? where R : GRDB.FetchRequest
}
extension GRDB.DatabaseValueConvertible where Self : Swift.Hashable {
  public static func fetchSet<R>(_ db: GRDB.Database, _ request: R) throws -> Swift.Set<Self> where R : GRDB.FetchRequest
}
extension GRDB.FetchRequest where Self.RowDecoder : GRDB.DatabaseValueConvertible {
  public func fetchCursor(_ db: GRDB.Database) throws -> GRDB.DatabaseValueCursor<Self.RowDecoder>
  public func fetchAll(_ db: GRDB.Database) throws -> [Self.RowDecoder]
  public func fetchOne(_ db: GRDB.Database) throws -> Self.RowDecoder?
}
extension GRDB.FetchRequest where Self.RowDecoder : GRDB.DatabaseValueConvertible, Self.RowDecoder : Swift.Hashable {
  public func fetchSet(_ db: GRDB.Database) throws -> Swift.Set<Self.RowDecoder>
}
extension Swift.Optional where Wrapped : GRDB.DatabaseValueConvertible {
  public static func fetchCursor(_ statement: GRDB.Statement, arguments: GRDB.StatementArguments? = nil, adapter: GRDB.RowAdapter? = nil) throws -> GRDB.NullableDatabaseValueCursor<Wrapped>
  public static func fetchAll(_ statement: GRDB.Statement, arguments: GRDB.StatementArguments? = nil, adapter: GRDB.RowAdapter? = nil) throws -> [Wrapped?]
}
extension Swift.Optional where Wrapped : GRDB.DatabaseValueConvertible, Wrapped : Swift.Hashable {
  public static func fetchSet(_ statement: GRDB.Statement, arguments: GRDB.StatementArguments? = nil, adapter: GRDB.RowAdapter? = nil) throws -> Swift.Set<Wrapped?>
}
extension Swift.Optional where Wrapped : GRDB.DatabaseValueConvertible {
  public static func fetchCursor(_ db: GRDB.Database, sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments(), adapter: GRDB.RowAdapter? = nil) throws -> GRDB.NullableDatabaseValueCursor<Wrapped>
  public static func fetchAll(_ db: GRDB.Database, sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments(), adapter: GRDB.RowAdapter? = nil) throws -> [Wrapped?]
}
extension Swift.Optional where Wrapped : GRDB.DatabaseValueConvertible, Wrapped : Swift.Hashable {
  public static func fetchSet(_ db: GRDB.Database, sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments(), adapter: GRDB.RowAdapter? = nil) throws -> Swift.Set<Wrapped?>
}
extension Swift.Optional where Wrapped : GRDB.DatabaseValueConvertible {
  public static func fetchCursor<R>(_ db: GRDB.Database, _ request: R) throws -> GRDB.NullableDatabaseValueCursor<Wrapped> where R : GRDB.FetchRequest
  public static func fetchAll<R>(_ db: GRDB.Database, _ request: R) throws -> [Wrapped?] where R : GRDB.FetchRequest
}
extension Swift.Optional where Wrapped : GRDB.DatabaseValueConvertible, Wrapped : Swift.Hashable {
  public static func fetchSet<R>(_ db: GRDB.Database, _ request: R) throws -> Swift.Set<Wrapped?> where R : GRDB.FetchRequest
}
extension GRDB.FetchRequest where Self.RowDecoder : GRDB._OptionalProtocol, Self.RowDecoder.Wrapped : GRDB.DatabaseValueConvertible {
  public func fetchCursor(_ db: GRDB.Database) throws -> GRDB.NullableDatabaseValueCursor<Self.RowDecoder.Wrapped>
  public func fetchAll(_ db: GRDB.Database) throws -> [Self.RowDecoder.Wrapped?]
  public func fetchOne(_ db: GRDB.Database) throws -> Self.RowDecoder.Wrapped?
}
extension GRDB.FetchRequest where Self.RowDecoder : GRDB._OptionalProtocol, Self.RowDecoder.Wrapped : GRDB.DatabaseValueConvertible, Self.RowDecoder.Wrapped : Swift.Hashable {
  public func fetchSet(_ db: GRDB.Database) throws -> Swift.Set<Self.RowDecoder.Wrapped?>
}
open class Record : GRDB.FetchableRecord, GRDB.TableRecord, GRDB.PersistableRecord {
  public init()
  required public init(row: GRDB.Row)
  open class var databaseTableName: Swift.String {
    get
  }
  open class var persistenceConflictPolicy: GRDB.PersistenceConflictPolicy {
    get
  }
  open class var databaseSelection: [GRDB.SQLSelectable] {
    get
  }
  open func encode(to container: inout GRDB.PersistenceContainer)
  open func didInsert(with rowID: Swift.Int64, for column: Swift.String?)
  open func copy() -> Self
  public var hasDatabaseChanges: Swift.Bool {
    get
    set
  }
  public var databaseChanges: [Swift.String : GRDB.DatabaseValue?] {
    get
  }
  open func insert(_ db: GRDB.Database) throws
  open func update(_ db: GRDB.Database, columns: Swift.Set<Swift.String>) throws
  @discardableResult
  final public func updateChanges(_ db: GRDB.Database) throws -> Swift.Bool
  final public func save(_ db: GRDB.Database) throws
  @discardableResult
  open func delete(_ db: GRDB.Database) throws -> Swift.Bool
  @objc deinit
}
public struct FTS3TokenizerDescriptor {
  public static let simple: GRDB.FTS3TokenizerDescriptor
  public static let porter: GRDB.FTS3TokenizerDescriptor
  public static func unicode61(diacritics: GRDB.FTS3.Diacritics = .removeLegacy, separators: Swift.Set<Swift.Character> = [], tokenCharacters: Swift.Set<Swift.Character> = []) -> GRDB.FTS3TokenizerDescriptor
}
extension GRDB.FetchableRecord where Self : GRDB.TableRecord {
  public static func fetchCursor(_ db: GRDB.Database) throws -> GRDB.RecordCursor<Self>
  public static func fetchAll(_ db: GRDB.Database) throws -> [Self]
  public static func fetchOne(_ db: GRDB.Database) throws -> Self?
}
extension GRDB.FetchableRecord where Self : GRDB.TableRecord, Self : Swift.Hashable {
  public static func fetchSet(_ db: GRDB.Database) throws -> Swift.Set<Self>
}
extension GRDB.FetchableRecord where Self : GRDB.TableRecord {
  public static func fetchCursor<Sequence>(_ db: GRDB.Database, keys: Sequence) throws -> GRDB.RecordCursor<Self> where Sequence : Swift.Sequence, Sequence.Element : GRDB.DatabaseValueConvertible
  public static func fetchAll<Sequence>(_ db: GRDB.Database, keys: Sequence) throws -> [Self] where Sequence : Swift.Sequence, Sequence.Element : GRDB.DatabaseValueConvertible
  public static func fetchOne<PrimaryKeyType>(_ db: GRDB.Database, key: PrimaryKeyType?) throws -> Self? where PrimaryKeyType : GRDB.DatabaseValueConvertible
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension GRDB.FetchableRecord where Self : GRDB.TableRecord, Self : Swift.Identifiable, Self.ID : GRDB.DatabaseValueConvertible {
  public static func fetchCursor<Collection>(_ db: GRDB.Database, ids: Collection) throws -> GRDB.RecordCursor<Self> where Collection : Swift.Collection, Self.ID == Collection.Element
  public static func fetchAll<Collection>(_ db: GRDB.Database, ids: Collection) throws -> [Self] where Collection : Swift.Collection, Self.ID == Collection.Element
  public static func fetchOne(_ db: GRDB.Database, id: Self.ID) throws -> Self?
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension GRDB.FetchableRecord where Self : GRDB.TableRecord, Self : Swift.Identifiable, Self.ID : GRDB._OptionalProtocol, Self.ID.Wrapped : GRDB.DatabaseValueConvertible {
  public static func fetchCursor<Collection>(_ db: GRDB.Database, ids: Collection) throws -> GRDB.RecordCursor<Self> where Collection : Swift.Collection, Collection.Element : GRDB.DatabaseValueConvertible, Collection.Element == Self.ID.Wrapped
  public static func fetchAll<Collection>(_ db: GRDB.Database, ids: Collection) throws -> [Self] where Collection : Swift.Collection, Collection.Element : GRDB.DatabaseValueConvertible, Collection.Element == Self.ID.Wrapped
  public static func fetchOne(_ db: GRDB.Database, id: Self.ID.Wrapped) throws -> Self?
}
extension GRDB.FetchableRecord where Self : GRDB.TableRecord, Self : Swift.Hashable {
  public static func fetchSet<Sequence>(_ db: GRDB.Database, keys: Sequence) throws -> Swift.Set<Self> where Sequence : Swift.Sequence, Sequence.Element : GRDB.DatabaseValueConvertible
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension GRDB.FetchableRecord where Self : GRDB.TableRecord, Self : Swift.Hashable, Self : Swift.Identifiable, Self.ID : GRDB.DatabaseValueConvertible {
  public static func fetchSet<Collection>(_ db: GRDB.Database, ids: Collection) throws -> Swift.Set<Self> where Collection : Swift.Collection, Self.ID == Collection.Element
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension GRDB.FetchableRecord where Self : GRDB.TableRecord, Self : Swift.Hashable, Self : Swift.Identifiable, Self.ID : GRDB._OptionalProtocol, Self.ID.Wrapped : GRDB.DatabaseValueConvertible {
  public static func fetchSet<Collection>(_ db: GRDB.Database, ids: Collection) throws -> Swift.Set<Self> where Collection : Swift.Collection, Collection.Element : GRDB.DatabaseValueConvertible, Collection.Element == Self.ID.Wrapped
}
extension GRDB.FetchableRecord where Self : GRDB.TableRecord {
  public static func fetchCursor(_ db: GRDB.Database, keys: [[Swift.String : GRDB.DatabaseValueConvertible?]]) throws -> GRDB.RecordCursor<Self>
  public static func fetchAll(_ db: GRDB.Database, keys: [[Swift.String : GRDB.DatabaseValueConvertible?]]) throws -> [Self]
  public static func fetchOne(_ db: GRDB.Database, key: [Swift.String : GRDB.DatabaseValueConvertible?]?) throws -> Self?
}
extension GRDB.FetchableRecord where Self : GRDB.TableRecord, Self : Swift.Hashable {
  public static func fetchSet(_ db: GRDB.Database, keys: [[Swift.String : GRDB.DatabaseValueConvertible?]]) throws -> Swift.Set<Self>
}
@_hasMissingDesignatedInitializers public class ValueObservationScheduler {
  public static func async(onQueue queue: Dispatch.DispatchQueue) -> GRDB.ValueObservationScheduler
  public static let immediate: GRDB.ValueObservationScheduler
  @objc deinit
}
public protocol TableRecord {
  static var databaseTableName: Swift.String { get }
  static var databaseSelection: [GRDB.SQLSelectable] { get }
}
extension GRDB.TableRecord {
  public static var databaseTableName: Swift.String {
    get
  }
  public static var databaseSelection: [GRDB.SQLSelectable] {
    get
  }
}
extension GRDB.TableRecord {
  public static func fetchCount(_ db: GRDB.Database) throws -> Swift.Int
}
extension GRDB.TableRecord {
  public static func numberOfSelectedColumns(_ db: GRDB.Database) throws -> Swift.Int
}
extension GRDB.TableRecord {
  @discardableResult
  public static func deleteAll(_ db: GRDB.Database) throws -> Swift.Int
}
extension GRDB.TableRecord {
  public static func exists<PrimaryKeyType>(_ db: GRDB.Database, key: PrimaryKeyType) throws -> Swift.Bool where PrimaryKeyType : GRDB.DatabaseValueConvertible
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension GRDB.TableRecord where Self : Swift.Identifiable, Self.ID : GRDB.DatabaseValueConvertible {
  public static func exists(_ db: GRDB.Database, id: Self.ID) throws -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension GRDB.TableRecord where Self : Swift.Identifiable, Self.ID : GRDB._OptionalProtocol, Self.ID.Wrapped : GRDB.DatabaseValueConvertible {
  public static func exists(_ db: GRDB.Database, id: Self.ID.Wrapped) throws -> Swift.Bool
}
extension GRDB.TableRecord {
  public static func exists(_ db: GRDB.Database, key: [Swift.String : GRDB.DatabaseValueConvertible?]) throws -> Swift.Bool
}
extension GRDB.TableRecord {
  @discardableResult
  public static func deleteAll<Sequence>(_ db: GRDB.Database, keys: Sequence) throws -> Swift.Int where Sequence : Swift.Sequence, Sequence.Element : GRDB.DatabaseValueConvertible
  @discardableResult
  public static func deleteOne<PrimaryKeyType>(_ db: GRDB.Database, key: PrimaryKeyType?) throws -> Swift.Bool where PrimaryKeyType : GRDB.DatabaseValueConvertible
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension GRDB.TableRecord where Self : Swift.Identifiable, Self.ID : GRDB.DatabaseValueConvertible {
  @discardableResult
  public static func deleteAll<Collection>(_ db: GRDB.Database, ids: Collection) throws -> Swift.Int where Collection : Swift.Collection, Self.ID == Collection.Element
  @discardableResult
  public static func deleteOne(_ db: GRDB.Database, id: Self.ID) throws -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension GRDB.TableRecord where Self : Swift.Identifiable, Self.ID : GRDB._OptionalProtocol, Self.ID.Wrapped : GRDB.DatabaseValueConvertible {
  @discardableResult
  public static func deleteAll<Collection>(_ db: GRDB.Database, ids: Collection) throws -> Swift.Int where Collection : Swift.Collection, Collection.Element : GRDB.DatabaseValueConvertible, Collection.Element == Self.ID.Wrapped
  @discardableResult
  public static func deleteOne(_ db: GRDB.Database, id: Self.ID.Wrapped) throws -> Swift.Bool
}
extension GRDB.TableRecord {
  @discardableResult
  public static func deleteAll(_ db: GRDB.Database, keys: [[Swift.String : GRDB.DatabaseValueConvertible?]]) throws -> Swift.Int
  @discardableResult
  public static func deleteOne(_ db: GRDB.Database, key: [Swift.String : GRDB.DatabaseValueConvertible?]) throws -> Swift.Bool
}
extension GRDB.TableRecord {
  @discardableResult
  public static func updateAll(_ db: GRDB.Database, onConflict conflictResolution: GRDB.Database.ConflictResolution? = nil, _ assignments: [GRDB.ColumnAssignment]) throws -> Swift.Int
  @discardableResult
  public static func updateAll(_ db: GRDB.Database, onConflict conflictResolution: GRDB.Database.ConflictResolution? = nil, _ assignment: GRDB.ColumnAssignment, _ otherAssignments: GRDB.ColumnAssignment...) throws -> Swift.Int
}
extension GRDB.Inflections {
  public static var `default`: GRDB.Inflections
}
public struct DatabaseBackupProgress {
  public let remainingPageCount: Swift.Int
  public let totalPageCount: Swift.Int
  public var completedPageCount: Swift.Int {
    get
  }
  public let isCompleted: Swift.Bool
}
public struct _SQLAssociation {
}
public protocol EncodableRecord {
  func encode(to container: inout GRDB.PersistenceContainer)
  static var databaseEncodingUserInfo: [Swift.CodingUserInfoKey : Any] { get }
  static func databaseJSONEncoder(for column: Swift.String) -> Foundation.JSONEncoder
  static var databaseDateEncodingStrategy: GRDB.DatabaseDateEncodingStrategy { get }
  static var databaseUUIDEncodingStrategy: GRDB.DatabaseUUIDEncodingStrategy { get }
  static var databaseColumnEncodingStrategy: GRDB.DatabaseColumnEncodingStrategy { get }
}
extension GRDB.EncodableRecord {
  public static var databaseEncodingUserInfo: [Swift.CodingUserInfoKey : Any] {
    get
  }
  public static func databaseJSONEncoder(for column: Swift.String) -> Foundation.JSONEncoder
  public static var databaseDateEncodingStrategy: GRDB.DatabaseDateEncodingStrategy {
    get
  }
  public static var databaseUUIDEncodingStrategy: GRDB.DatabaseUUIDEncodingStrategy {
    get
  }
  public static var databaseColumnEncodingStrategy: GRDB.DatabaseColumnEncodingStrategy {
    get
  }
}
extension GRDB.EncodableRecord {
  public var databaseDictionary: [Swift.String : GRDB.DatabaseValue] {
    get
  }
}
extension GRDB.EncodableRecord {
  public func databaseEquals(_ record: Self) -> Swift.Bool
  public func databaseChanges<Record>(from record: Record) -> [Swift.String : GRDB.DatabaseValue] where Record : GRDB.EncodableRecord
}
public struct PersistenceContainer {
  public subscript(column: Swift.String) -> GRDB.DatabaseValueConvertible? {
    get
    set
  }
  public subscript<Column>(column: Column) -> GRDB.DatabaseValueConvertible? where Column : GRDB.ColumnExpression {
    get
    set
  }
}
public enum DatabaseDateEncodingStrategy {
  case deferredToDate
  case timeIntervalSinceReferenceDate
  case timeIntervalSince1970
  case secondsSince1970
  case millisecondsSince1970
  @available(macOS 10.12, watchOS 3.0, tvOS 10.0, *)
  case iso8601
  case formatted(Foundation.DateFormatter)
  case custom((Foundation.Date) -> GRDB.DatabaseValueConvertible?)
}
public enum DatabaseUUIDEncodingStrategy {
  case deferredToUUID
  case uppercaseString
  case lowercaseString
  @available(*, deprecated, renamed: "uppercaseString")
  public static var string: GRDB.DatabaseUUIDEncodingStrategy {
    get
  }
  public static func == (a: GRDB.DatabaseUUIDEncodingStrategy, b: GRDB.DatabaseUUIDEncodingStrategy) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum DatabaseColumnEncodingStrategy {
  case useDefaultKeys
  case convertToSnakeCase
  case custom((Swift.CodingKey) -> Swift.String)
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public enum DatabasePublishers {
}
@_hasMissingDesignatedInitializers public class TableAlias : Swift.Hashable {
  public init(name: Swift.String? = nil)
  public subscript(selectable: GRDB.SQLSelectable) -> GRDB.SQLSelection {
    get
  }
  public subscript(expression: GRDB.SQLSpecificExpressible) -> GRDB.SQLExpression {
    get
  }
  public subscript(ordering: GRDB.SQLOrderingTerm) -> GRDB.SQLOrdering {
    get
  }
  public subscript(column: Swift.String) -> GRDB.SQLExpression {
    get
  }
  public var exists: GRDB.SQLExpression {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: GRDB.TableAlias, rhs: GRDB.TableAlias) -> Swift.Bool
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
extension Foundation.NSURL : GRDB.DatabaseValueConvertible {
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> Self?
}
extension Foundation.URL : GRDB.DatabaseValueConvertible {
}
public protocol TypedRequest {
  associatedtype RowDecoder
}
public protocol SelectionRequest {
  func select(_ selection: @escaping (GRDB.Database) throws -> [GRDB.SQLSelectable]) -> Self
  func annotated(with selection: @escaping (GRDB.Database) throws -> [GRDB.SQLSelectable]) -> Self
}
extension GRDB.SelectionRequest {
  public func select(_ selection: [GRDB.SQLSelectable]) -> Self
  public func select(_ selection: GRDB.SQLSelectable...) -> Self
  public func select(sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments()) -> Self
  public func select(literal sqlLiteral: GRDB.SQL) -> Self
  public func annotated(with selection: [GRDB.SQLSelectable]) -> Self
  public func annotated(with selection: GRDB.SQLSelectable...) -> Self
}
public protocol FilteredRequest {
  func filter(_ predicate: @escaping (GRDB.Database) throws -> GRDB.SQLExpressible) -> Self
}
extension GRDB.FilteredRequest {
  @available(*, deprecated, message: "Did you mean filter(id:) or filter(key:)? If not, prefer filter(value.databaseValue) instead. See also none().")
  public func filter(_ predicate: GRDB.SQLExpressible) -> Self
  public func filter(_ predicate: GRDB.SQLSpecificExpressible) -> Self
  public func filter(sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments()) -> Self
  public func filter(literal sqlLiteral: GRDB.SQL) -> Self
  public func none() -> Self
}
public protocol TableRequest {
  var databaseTableName: Swift.String { get }
  func aliased(_ alias: GRDB.TableAlias) -> Self
}
extension GRDB.TableRequest where Self : GRDB.FilteredRequest, Self : GRDB.TypedRequest {
  public func filter<PrimaryKeyType>(key: PrimaryKeyType?) -> Self where PrimaryKeyType : GRDB.DatabaseValueConvertible
  public func filter<Sequence>(keys: Sequence) -> Self where Sequence : Swift.Sequence, Sequence.Element : GRDB.DatabaseValueConvertible
  public func filter(key: [Swift.String : GRDB.DatabaseValueConvertible?]?) -> Self
  public func filter(keys: [[Swift.String : GRDB.DatabaseValueConvertible?]]) -> Self
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension GRDB.TableRequest where Self : GRDB.FilteredRequest, Self : GRDB.TypedRequest, Self.RowDecoder : Swift.Identifiable, Self.RowDecoder.ID : GRDB.DatabaseValueConvertible {
  public func filter(id: Self.RowDecoder.ID) -> Self
  public func filter<Collection>(ids: Collection) -> Self where Collection : Swift.Collection, Collection.Element : GRDB.DatabaseValueConvertible, Collection.Element == Self.RowDecoder.ID
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension GRDB.TableRequest where Self : GRDB.FilteredRequest, Self : GRDB.TypedRequest, Self.RowDecoder : Swift.Identifiable, Self.RowDecoder.ID : GRDB._OptionalProtocol, Self.RowDecoder.ID.Wrapped : GRDB.DatabaseValueConvertible {
  public func filter(id: Self.RowDecoder.ID.Wrapped) -> Self
  public func filter<Collection>(ids: Collection) -> Self where Collection : Swift.Collection, Collection.Element : GRDB.DatabaseValueConvertible, Collection.Element == Self.RowDecoder.ID.Wrapped
}
extension GRDB.TableRequest where Self : GRDB.OrderedRequest {
  public func orderByPrimaryKey() -> Self
}
extension GRDB.TableRequest where Self : GRDB.AggregatingRequest {
  public func groupByPrimaryKey() -> Self
}
public protocol AggregatingRequest {
  func group(_ expressions: @escaping (GRDB.Database) throws -> [GRDB.SQLExpressible]) -> Self
  func having(_ predicate: @escaping (GRDB.Database) throws -> GRDB.SQLExpressible) -> Self
}
extension GRDB.AggregatingRequest {
  public func group(_ expressions: [GRDB.SQLExpressible]) -> Self
  public func group(_ expressions: GRDB.SQLExpressible...) -> Self
  public func group(sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments()) -> Self
  public func group(literal sqlLiteral: GRDB.SQL) -> Self
  public func having(_ predicate: GRDB.SQLExpressible) -> Self
  public func having(sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments()) -> Self
  public func having(literal sqlLiteral: GRDB.SQL) -> Self
}
public protocol OrderedRequest {
  func order(_ orderings: @escaping (GRDB.Database) throws -> [GRDB.SQLOrderingTerm]) -> Self
  func reversed() -> Self
  func unordered() -> Self
}
extension GRDB.OrderedRequest {
  public func order(_ orderings: GRDB.SQLOrderingTerm...) -> Self
  public func order(_ orderings: [GRDB.SQLOrderingTerm]) -> Self
  public func order(sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments()) -> Self
  public func order(literal sqlLiteral: GRDB.SQL) -> Self
}
public protocol _JoinableRequest {
  func _including(all association: GRDB._SQLAssociation) -> Self
  func _including(optional association: GRDB._SQLAssociation) -> Self
  func _including(required association: GRDB._SQLAssociation) -> Self
  func _joining(optional association: GRDB._SQLAssociation) -> Self
  func _joining(required association: GRDB._SQLAssociation) -> Self
}
public protocol JoinableRequest : GRDB.TypedRequest, GRDB._JoinableRequest {
}
extension GRDB.JoinableRequest {
  public func including<A>(all association: A) -> Self where A : GRDB.AssociationToMany, Self.RowDecoder == A.OriginRowDecoder
  public func including<A>(optional association: A) -> Self where A : GRDB.Association, Self.RowDecoder == A.OriginRowDecoder
  public func including<A>(required association: A) -> Self where A : GRDB.Association, Self.RowDecoder == A.OriginRowDecoder
  public func joining<A>(optional association: A) -> Self where A : GRDB.Association, Self.RowDecoder == A.OriginRowDecoder
  public func joining<A>(required association: A) -> Self where A : GRDB.Association, Self.RowDecoder == A.OriginRowDecoder
}
extension GRDB.JoinableRequest where Self : GRDB.SelectionRequest {
  public func annotated<A>(withOptional association: A) -> Self where A : GRDB.Association, Self.RowDecoder == A.OriginRowDecoder
  public func annotated<A>(withRequired association: A) -> Self where A : GRDB.Association, Self.RowDecoder == A.OriginRowDecoder
}
public protocol DerivableRequest : GRDB.AggregatingRequest, GRDB.FilteredRequest, GRDB.JoinableRequest, GRDB.OrderedRequest, GRDB.SelectionRequest, GRDB.TableRequest {
  func distinct() -> Self
  func limit(_ limit: Swift.Int, offset: Swift.Int?) -> Self
  func with<RowDecoder>(_ cte: GRDB.CommonTableExpression<RowDecoder>) -> Self
}
extension GRDB.DerivableRequest {
  public func limit(_ limit: Swift.Int) -> Self
  public func annotated(with aggregates: GRDB.AssociationAggregate<Self.RowDecoder>...) -> Self
  public func annotated(with aggregates: [GRDB.AssociationAggregate<Self.RowDecoder>]) -> Self
  public func having(_ predicate: GRDB.AssociationAggregate<Self.RowDecoder>) -> Self
}
extension Swift.String {
  public var quotedDatabaseIdentifier: Swift.String {
    get
  }
}
public func databaseQuestionMarks(count: Swift.Int) -> Swift.String
public protocol _OptionalProtocol {
  associatedtype Wrapped
}
extension Swift.Optional : GRDB._OptionalProtocol {
}
public typealias GRDBSendable = Swift.Sendable
@inline(__always) @inlinable internal func GRDBPrecondition(_ condition: @autoclosure () -> Swift.Bool, _ message: @autoclosure () -> Swift.String = "", file: Swift.StaticString = #file, line: Swift.UInt = #line) {
    /// Custom precondition function which aims at solving
    /// <https://bugs.swift.org/browse/SR-905> and
    /// <https://github.com/groue/GRDB.swift/issues/37>
    if !condition() {
        fatalError(message(), file: file, line: line)
    }
}
public struct Configuration {
  public var foreignKeysEnabled: Swift.Bool
  public var readonly: Swift.Bool
  public var label: Swift.String?
  public var acceptsDoubleQuotedStringLiterals: Swift.Bool
  public var observesSuspensionNotifications: Swift.Bool
  public var publicStatementArguments: Swift.Bool
  public mutating func prepareDatabase(_ setup: @escaping (GRDB.Database) throws -> Swift.Void)
  public var defaultTransactionKind: GRDB.Database.TransactionKind
  public var allowsUnsafeTransactions: Swift.Bool
  public var busyMode: GRDB.Database.BusyMode
  public var maximumReaderCount: Swift.Int
  public var qos: Dispatch.DispatchQoS
  public var targetQueue: Dispatch.DispatchQueue?
  public var writeTargetQueue: Dispatch.DispatchQueue?
  public var automaticMemoryManagement: Swift.Bool
  public init()
}
extension Swift.RangeReplaceableCollection {
  public init<C>(_ cursor: C) throws where C : GRDB.Cursor, Self.Element == C.Element
  public init<C>(_ cursor: C, minimumCapacity: Swift.Int) throws where C : GRDB.Cursor, Self.Element == C.Element
}
extension Swift.Dictionary {
  public init<C>(grouping cursor: C, by keyForValue: (C.Element) throws -> Key) throws where Value == [C.Element], C : GRDB.Cursor
  public init<C>(minimumCapacity: Swift.Int, grouping cursor: C, by keyForValue: (C.Element) throws -> Key) throws where Value == [C.Element], C : GRDB.Cursor
  public init<C>(uniqueKeysWithValues keysAndValues: C) throws where C : GRDB.Cursor, C.Element == (Key, Value)
  public init<C>(minimumCapacity: Swift.Int, uniqueKeysWithValues keysAndValues: C) throws where C : GRDB.Cursor, C.Element == (Key, Value)
}
extension Swift.Set {
  public init<C>(_ cursor: C) throws where Element == C.Element, C : GRDB.Cursor
  public init<C>(_ cursor: C, minimumCapacity: Swift.Int) throws where Element == C.Element, C : GRDB.Cursor
}
extension Swift.Sequence {
  public func flatMap<SegmentOfResult>(_ transform: @escaping (Self.Iterator.Element) throws -> SegmentOfResult) -> GRDB.FlattenCursor<GRDB.MapCursor<GRDB.AnyCursor<Self.Iterator.Element>, SegmentOfResult>> where SegmentOfResult : GRDB.Cursor
}
public protocol Cursor : AnyObject {
  associatedtype Element
  func next() throws -> Self.Element?
  func forEach(_ body: (Self.Element) throws -> Swift.Void) throws
}
extension GRDB.Cursor {
  public func isEmpty() throws -> Swift.Bool
  public func contains(where predicate: (Self.Element) throws -> Swift.Bool) throws -> Swift.Bool
  public func enumerated() -> GRDB.EnumeratedCursor<Self>
  public func filter(_ isIncluded: @escaping (Self.Element) throws -> Swift.Bool) -> GRDB.FilterCursor<Self>
  public func first(where predicate: (Self.Element) throws -> Swift.Bool) throws -> Self.Element?
  public func compactMap<ElementOfResult>(_ transform: @escaping (Self.Element) throws -> ElementOfResult?) -> GRDB.MapCursor<GRDB.FilterCursor<GRDB.MapCursor<Self, ElementOfResult?>>, ElementOfResult>
  public func drop(while predicate: @escaping (Self.Element) throws -> Swift.Bool) -> GRDB.DropWhileCursor<Self>
  public func dropFirst(_ n: Swift.Int) -> GRDB.DropFirstCursor<Self>
  public func dropFirst() -> GRDB.DropFirstCursor<Self>
  public func dropLast(_ n: Swift.Int) throws -> [Self.Element]
  public func dropLast() throws -> [Self.Element]
  public func flatMap<SegmentOfResult>(_ transform: @escaping (Self.Element) throws -> SegmentOfResult) -> GRDB.FlattenCursor<GRDB.MapCursor<Self, GRDB.AnyCursor<SegmentOfResult.Element>>> where SegmentOfResult : Swift.Sequence
  public func flatMap<SegmentOfResult>(_ transform: @escaping (Self.Element) throws -> SegmentOfResult) -> GRDB.FlattenCursor<GRDB.MapCursor<Self, SegmentOfResult>> where SegmentOfResult : GRDB.Cursor
  public func forEach(_ body: (Self.Element) throws -> Swift.Void) throws
  public func map<T>(_ transform: @escaping (Self.Element) throws -> T) -> GRDB.MapCursor<Self, T>
  public func max(by areInIncreasingOrder: (Self.Element, Self.Element) throws -> Swift.Bool) throws -> Self.Element?
  public func min(by areInIncreasingOrder: (Self.Element, Self.Element) throws -> Swift.Bool) throws -> Self.Element?
  public func prefix(_ maxLength: Swift.Int) -> GRDB.PrefixCursor<Self>
  public func prefix(while predicate: @escaping (Self.Element) throws -> Swift.Bool) -> GRDB.PrefixWhileCursor<Self>
  public func reduce<Result>(_ initialResult: Result, _ nextPartialResult: (Result, Self.Element) throws -> Result) throws -> Result
  public func reduce<Result>(into initialResult: Result, _ updateAccumulatingResult: (inout Result, Self.Element) throws -> Swift.Void) throws -> Result
  public func suffix(_ maxLength: Swift.Int) throws -> [Self.Element]
}
extension GRDB.Cursor where Self.Element : Swift.Equatable {
  public func contains(_ element: Self.Element) throws -> Swift.Bool
}
extension GRDB.Cursor where Self.Element : Swift.Comparable {
  public func max() throws -> Self.Element?
  public func min() throws -> Self.Element?
}
extension GRDB.Cursor where Self.Element : GRDB.Cursor {
  public func joined() -> GRDB.FlattenCursor<Self>
}
extension GRDB.Cursor where Self.Element : Swift.Sequence {
  public func joined() -> GRDB.FlattenCursor<GRDB.MapCursor<Self, GRDB.AnyCursor<Self.Element.Element>>>
}
extension GRDB.Cursor where Self.Element : Swift.StringProtocol {
  public func joined(separator: Swift.String = "") throws -> Swift.String
}
final public class AnyCursor<Element> : GRDB.Cursor {
  public init<C>(_ base: C) where Element == C.Element, C : GRDB.Cursor
  convenience public init<I>(iterator: I) where Element == I.Element, I : Swift.IteratorProtocol
  convenience public init<S>(_ s: S) where Element == S.Element, S : Swift.Sequence
  public init(_ next: @escaping () throws -> Element?)
  final public func next() throws -> Element?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DropFirstCursor<Base> : GRDB.Cursor where Base : GRDB.Cursor {
  final public func next() throws -> Base.Element?
  public typealias Element = Base.Element
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DropWhileCursor<Base> : GRDB.Cursor where Base : GRDB.Cursor {
  final public func next() throws -> Base.Element?
  public typealias Element = Base.Element
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class EnumeratedCursor<Base> : GRDB.Cursor where Base : GRDB.Cursor {
  final public func next() throws -> (Swift.Int, Base.Element)?
  final public func forEach(_ body: ((Swift.Int, Base.Element)) throws -> Swift.Void) throws
  public typealias Element = (Swift.Int, Base.Element)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FilterCursor<Base> : GRDB.Cursor where Base : GRDB.Cursor {
  final public func next() throws -> Base.Element?
  final public func forEach(_ body: (Base.Element) throws -> Swift.Void) throws
  public typealias Element = Base.Element
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FlattenCursor<Base> : GRDB.Cursor where Base : GRDB.Cursor, Base.Element : GRDB.Cursor {
  final public func next() throws -> Base.Element.Element?
  public typealias Element = Base.Element.Element
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class MapCursor<Base, Element> : GRDB.Cursor where Base : GRDB.Cursor {
  final public func next() throws -> Element?
  final public func forEach(_ body: (Element) throws -> Swift.Void) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class PrefixCursor<Base> : GRDB.Cursor where Base : GRDB.Cursor {
  final public func next() throws -> Base.Element?
  public typealias Element = Base.Element
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class PrefixWhileCursor<Base> : GRDB.Cursor where Base : GRDB.Cursor {
  final public func next() throws -> Base.Element?
  public typealias Element = Base.Element
  @objc deinit
}
final public class DatabasePool : GRDB.DatabaseWriter {
  final public var configuration: GRDB.Configuration {
    get
  }
  final public var path: Swift.String {
    get
  }
  public init(path: Swift.String, configuration: GRDB.Configuration = Configuration()) throws
  @objc deinit
}
extension GRDB.DatabasePool : @unchecked Swift.Sendable {
}
extension GRDB.DatabasePool {
  final public func releaseMemory()
  final public func releaseMemoryEventually()
}
extension GRDB.DatabasePool : GRDB.DatabaseReader {
  final public func close() throws
  final public func interrupt()
  @_disfavoredOverload final public func read<T>(_ value: (GRDB.Database) throws -> T) throws -> T
  final public func asyncRead(_ value: @escaping (Swift.Result<GRDB.Database, Swift.Error>) -> Swift.Void)
  @_disfavoredOverload final public func unsafeRead<T>(_ value: (GRDB.Database) throws -> T) throws -> T
  final public func asyncUnsafeRead(_ value: @escaping (Swift.Result<GRDB.Database, Swift.Error>) -> Swift.Void)
  final public func unsafeReentrantRead<T>(_ value: (GRDB.Database) throws -> T) throws -> T
  final public func concurrentRead<T>(_ value: @escaping (GRDB.Database) throws -> T) -> GRDB.DatabaseFuture<T>
  final public func spawnConcurrentRead(_ value: @escaping (Swift.Result<GRDB.Database, Swift.Error>) -> Swift.Void)
  final public func asyncConcurrentRead(_ value: @escaping (Swift.Result<GRDB.Database, Swift.Error>) -> Swift.Void)
  final public func invalidateReadOnlyConnections()
  @_disfavoredOverload final public func writeWithoutTransaction<T>(_ updates: (GRDB.Database) throws -> T) rethrows -> T
  @_disfavoredOverload final public func barrierWriteWithoutTransaction<T>(_ updates: (GRDB.Database) throws -> T) rethrows -> T
  final public func asyncBarrierWriteWithoutTransaction(_ updates: @escaping (GRDB.Database) -> Swift.Void)
  final public func writeInTransaction(_ kind: GRDB.Database.TransactionKind? = nil, _ updates: (GRDB.Database) throws -> GRDB.Database.TransactionCompletion) throws
  final public func unsafeReentrantWrite<T>(_ updates: (GRDB.Database) throws -> T) rethrows -> T
  final public func asyncWriteWithoutTransaction(_ updates: @escaping (GRDB.Database) -> Swift.Void)
  final public func _add<Reducer>(observation: GRDB.ValueObservation<Reducer>, scheduling scheduler: GRDB.ValueObservationScheduler, onChange: @escaping (Reducer.Value) -> Swift.Void) -> GRDB.DatabaseCancellable where Reducer : GRDB.ValueReducer
}
extension GRDB.DatabasePool {
  final public func makeSnapshot() throws -> GRDB.DatabaseSnapshot
}
public struct ForeignKey : Swift.Equatable {
  public init(_ originColumns: [Swift.String], to destinationColumns: [Swift.String]? = nil)
  public init(_ originColumns: [GRDB.ColumnExpression], to destinationColumns: [GRDB.ColumnExpression]? = nil)
  public static func == (a: GRDB.ForeignKey, b: GRDB.ForeignKey) -> Swift.Bool
}
extension GRDB.DatabaseValueConvertible where Self : Foundation.ReferenceConvertible, Self.ReferenceType : GRDB.DatabaseValueConvertible {
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> Self?
}
extension GRDB.DatabaseValueConvertible where Self : Foundation.ReferenceConvertible, Self : Swift.Decodable, Self.ReferenceType : GRDB.DatabaseValueConvertible {
  public static func fromDatabaseValue(_ databaseValue: GRDB.DatabaseValue) -> Self?
}
extension GRDB.DatabaseValueConvertible where Self : Foundation.ReferenceConvertible, Self : Swift.Encodable, Self.ReferenceType : GRDB.DatabaseValueConvertible {
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
}
public struct HasOneThroughAssociation<Origin, Destination> : GRDB.AssociationToOne {
  public typealias OriginRowDecoder = Origin
  public typealias RowDecoder = Destination
  public var _sqlAssociation: GRDB._SQLAssociation
}
public typealias SQLiteStatement = Swift.OpaquePointer
@_hasMissingDesignatedInitializers final public class Statement {
  final public let sqliteStatement: GRDB.SQLiteStatement
  final public var sql: Swift.String {
    get
  }
  final public var columnNames: [Swift.String] {
    get
    set
  }
  final public var databaseRegion: GRDB.DatabaseRegion {
    get
  }
  final public var isReadonly: Swift.Bool {
    get
  }
  @usableFromInline
  unowned final internal let database: GRDB.Database
  @objc deinit
  final public var arguments: GRDB.StatementArguments {
    get
    set
  }
  final public func validateArguments(_ arguments: GRDB.StatementArguments) throws
  final public func setUncheckedArguments(_ arguments: GRDB.StatementArguments)
  final public func setArguments(_ arguments: GRDB.StatementArguments) throws
  final public func execute(arguments: GRDB.StatementArguments? = nil) throws
  @usableFromInline
  final internal func forEachStep(_ body: (GRDB.SQLiteStatement) throws -> Swift.Void) throws
  @usableFromInline
  final internal func step<T>(_ body: (GRDB.SQLiteStatement) throws -> T) throws -> T?
}
@available(*, deprecated, renamed: "Statement")
public typealias SelectStatement = GRDB.Statement
@available(*, deprecated, renamed: "Statement")
public typealias UpdateStatement = GRDB.Statement
extension GRDB.Statement : Swift.CustomStringConvertible {
  final public var description: Swift.String {
    get
  }
}
extension GRDB.Statement {
  final public var columnCount: Swift.Int {
    get
  }
  final public func index(ofColumn name: Swift.String) -> Swift.Int?
}
public protocol _DatabaseCursor : GRDB.Cursor {
  var _isDone: Swift.Bool { get set }
  func _element(sqliteStatement: GRDB.SQLiteStatement) throws -> Self.Element
}
public protocol DatabaseCursor : GRDB._DatabaseCursor {
  var statement: GRDB.Statement { get }
}
extension GRDB.DatabaseCursor {
  @inlinable public func next() throws -> Self.Element? {
        if _isDone {
            return nil
        }
        if let element = try statement.step(_element) {
            return element
        }
        _isDone = true
        return nil
    }
  @inlinable public func forEach(_ body: (Self.Element) throws -> Swift.Void) throws {
        if _isDone { return }
        try statement.forEachStep { try body(_element(sqliteStatement: $0)) }
        _isDone = true
    }
}
public protocol StatementBinding {
  func bind(to sqliteStatement: GRDB.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
public struct StatementArguments : Swift.CustomStringConvertible, Swift.Equatable, Swift.ExpressibleByArrayLiteral, Swift.ExpressibleByDictionaryLiteral {
  public var isEmpty: Swift.Bool {
    get
  }
  public init()
  public init<Sequence>(_ sequence: Sequence) where Sequence : Swift.Sequence, Sequence.Element == GRDB.DatabaseValueConvertible?
  public init<Sequence>(_ sequence: Sequence) where Sequence : Swift.Sequence, Sequence.Element : GRDB.DatabaseValueConvertible
  public init?(_ array: [Any])
  public init(_ dictionary: [Swift.String : GRDB.DatabaseValueConvertible?])
  public init<Sequence>(_ sequence: Sequence) where Sequence : Swift.Sequence, Sequence.Element == (Swift.String, GRDB.DatabaseValueConvertible?)
  public init?(_ dictionary: [Swift.AnyHashable : Any])
  public mutating func append(contentsOf arguments: GRDB.StatementArguments) -> [Swift.String : GRDB.DatabaseValue]
  public static func + (lhs: GRDB.StatementArguments, rhs: GRDB.StatementArguments) -> GRDB.StatementArguments
  public static func &+ (lhs: GRDB.StatementArguments, rhs: GRDB.StatementArguments) -> GRDB.StatementArguments
  public static func += (lhs: inout GRDB.StatementArguments, rhs: GRDB.StatementArguments)
  public static func == (a: GRDB.StatementArguments, b: GRDB.StatementArguments) -> Swift.Bool
  public typealias ArrayLiteralElement = GRDB.DatabaseValueConvertible?
  public typealias Key = Swift.String
  public typealias Value = GRDB.DatabaseValueConvertible?
}
extension GRDB.StatementArguments {
  public init(arrayLiteral elements: GRDB.DatabaseValueConvertible?...)
}
extension GRDB.StatementArguments {
  public init(dictionaryLiteral elements: (Swift.String, GRDB.DatabaseValueConvertible?)...)
}
extension GRDB.StatementArguments {
  public var description: Swift.String {
    get
  }
}
extension GRDB.StatementArguments : GRDB.GRDBSendable {
}
extension Foundation.Data : GRDB.DatabaseValueConvertible, GRDB.StatementColumnConvertible {
  public init(sqliteStatement: GRDB.SQLiteStatement, index: Swift.Int32)
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> Foundation.Data?
  public func bind(to sqliteStatement: GRDB.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension GRDB.FetchableRecord where Self : Swift.Decodable {
  public init(row: GRDB.Row)
}
extension GRDB.DatabaseValueConvertible where Self : Swift.Decodable {
  public static func fromDatabaseValue(_ databaseValue: GRDB.DatabaseValue) -> Self?
}
extension GRDB.DatabaseValueConvertible where Self : Swift.Decodable, Self : Swift.RawRepresentable, Self.RawValue : GRDB.DatabaseValueConvertible {
  public static func fromDatabaseValue(_ databaseValue: GRDB.DatabaseValue) -> Self?
}
final public class DatabaseCollation {
  final public let name: Swift.String
  public init(_ name: Swift.String, function: @escaping (Swift.String, Swift.String) -> Foundation.ComparisonResult)
  @objc deinit
}
extension GRDB.DatabaseCollation : Swift.Hashable {
  final public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: GRDB.DatabaseCollation, rhs: GRDB.DatabaseCollation) -> Swift.Bool
  final public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class Row : Swift.Equatable, Swift.Hashable, Swift.RandomAccessCollection, Swift.ExpressibleByDictionaryLiteral, Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  @usableFromInline
  final internal let sqliteStatement: GRDB.SQLiteStatement?
  final public let count: Swift.Int
  final public var prefetchedRows: GRDB.Row.PrefetchedRowsView {
    get
  }
  convenience public init()
  convenience public init(_ dictionary: [Swift.String : GRDB.DatabaseValueConvertible?])
  convenience public init?(_ dictionary: [Swift.AnyHashable : Any])
  convenience public init(dictionaryLiteral elements: (Swift.String, GRDB.DatabaseValueConvertible?)...)
  final public func copy() -> GRDB.Row
  public typealias Element = (Swift.String, GRDB.DatabaseValue)
  public typealias Index = GRDB.RowIndex
  public typealias Indices = Swift.Range<GRDB.RowIndex>
  public typealias Iterator = Swift.IndexingIterator<GRDB.Row>
  public typealias Key = Swift.String
  public typealias SubSequence = Swift.Slice<GRDB.Row>
  public typealias Value = GRDB.DatabaseValueConvertible?
  @objc deinit
  final public var hashValue: Swift.Int {
    get
  }
}
extension GRDB.Row {
  final public var columnNames: Swift.LazyMapCollection<GRDB.Row, Swift.String> {
    get
  }
  final public func hasColumn(_ columnName: Swift.String) -> Swift.Bool
  @usableFromInline
  final internal func index(forColumn name: Swift.String) -> Swift.Int?
}
extension GRDB.Row {
  @usableFromInline
  @inline(__always) final internal func _checkIndex(_ index: Swift.Int, file: Swift.StaticString = #file, line: Swift.UInt = #line)
  final public var containsNonNullValue: Swift.Bool {
    get
  }
  final public func hasNull(atIndex index: Swift.Int) -> Swift.Bool
  final public subscript(index: Swift.Int) -> GRDB.DatabaseValueConvertible? {
    get
  }
  @inlinable final public subscript<Value>(index: Swift.Int) -> Value? where Value : GRDB.DatabaseValueConvertible {
    get {
        try! decodeIfPresent(Value.self, atIndex: index)
    }
  }
  @inline(__always) @inlinable final public subscript<Value>(index: Swift.Int) -> Value? where Value : GRDB.DatabaseValueConvertible, Value : GRDB.StatementColumnConvertible {
    get {
        try! decodeIfPresent(Value.self, atIndex: index)
    }
  }
  @inlinable final public subscript<Value>(index: Swift.Int) -> Value where Value : GRDB.DatabaseValueConvertible {
    get {
        try! decode(Value.self, atIndex: index)
    }
  }
  @inline(__always) @inlinable final public subscript<Value>(index: Swift.Int) -> Value where Value : GRDB.DatabaseValueConvertible, Value : GRDB.StatementColumnConvertible {
    get {
        try! decode(Value.self, atIndex: index)
    }
  }
  final public subscript(columnName: Swift.String) -> GRDB.DatabaseValueConvertible? {
    get
  }
  @inlinable final public subscript<Value>(columnName: Swift.String) -> Value? where Value : GRDB.DatabaseValueConvertible {
    get {
        try! decodeIfPresent(Value.self, forKey: columnName)
    }
  }
  @inlinable final public subscript<Value>(columnName: Swift.String) -> Value? where Value : GRDB.DatabaseValueConvertible, Value : GRDB.StatementColumnConvertible {
    get {
        try! decodeIfPresent(Value.self, forKey: columnName)
    }
  }
  @inlinable final public subscript<Value>(columnName: Swift.String) -> Value where Value : GRDB.DatabaseValueConvertible {
    get {
        try! decode(Value.self, forKey: columnName)
    }
  }
  @inlinable final public subscript<Value>(columnName: Swift.String) -> Value where Value : GRDB.DatabaseValueConvertible, Value : GRDB.StatementColumnConvertible {
    get {
        try! decode(Value.self, forKey: columnName)
    }
  }
  final public subscript<Column>(column: Column) -> GRDB.DatabaseValueConvertible? where Column : GRDB.ColumnExpression {
    get
  }
  @inlinable final public subscript<Value, Column>(column: Column) -> Value? where Value : GRDB.DatabaseValueConvertible, Column : GRDB.ColumnExpression {
    get {
        try! decodeIfPresent(Value.self, forKey: column.name)
    }
  }
  @inlinable final public subscript<Value, Column>(column: Column) -> Value? where Value : GRDB.DatabaseValueConvertible, Value : GRDB.StatementColumnConvertible, Column : GRDB.ColumnExpression {
    get {
        try! decodeIfPresent(Value.self, forKey: column.name)
    }
  }
  @inlinable final public subscript<Value, Column>(column: Column) -> Value where Value : GRDB.DatabaseValueConvertible, Column : GRDB.ColumnExpression {
    get {
        try! decode(Value.self, forKey: column.name)
    }
  }
  @inlinable final public subscript<Value, Column>(column: Column) -> Value where Value : GRDB.DatabaseValueConvertible, Value : GRDB.StatementColumnConvertible, Column : GRDB.ColumnExpression {
    get {
        try! decode(Value.self, forKey: column.name)
    }
  }
  final public func dataNoCopy(atIndex index: Swift.Int) -> Foundation.Data?
  final public func dataNoCopy(named columnName: Swift.String) -> Foundation.Data?
  final public func dataNoCopy<Column>(_ column: Column) -> Foundation.Data? where Column : GRDB.ColumnExpression
}
extension GRDB.Row {
  final public var databaseValues: Swift.LazyMapCollection<GRDB.Row, GRDB.DatabaseValue> {
    get
  }
}
extension GRDB.Row {
  final public subscript<Record>(scope: Swift.String) -> Record where Record : GRDB.FetchableRecord {
    get
  }
  final public subscript<Record>(scope: Swift.String) -> Record? where Record : GRDB.FetchableRecord {
    get
  }
  final public subscript<Collection>(key: Swift.String) -> Collection where Collection : Swift.RangeReplaceableCollection, Collection.Element : GRDB.FetchableRecord {
    get
  }
  final public subscript<Record>(key: Swift.String) -> Swift.Set<Record> where Record : GRDB.FetchableRecord, Record : Swift.Hashable {
    get
  }
}
extension GRDB.Row {
  final public var scopes: GRDB.Row.ScopesView {
    get
  }
  final public var scopesTree: GRDB.Row.ScopesTreeView {
    get
  }
  final public var unscoped: GRDB.Row {
    get
  }
  final public var unadapted: GRDB.Row {
    get
  }
}
extension GRDB.Row {
  @inlinable final internal func decodeIfPresent<Value>(_ type: Value.Type = Value.self, atIndex index: Swift.Int) throws -> Value? where Value : GRDB.DatabaseValueConvertible {
        _checkIndex(index)
        return try Value.decodeIfPresent(fromRow: self, atUncheckedIndex: index)
    }
  @inlinable final internal func decode<Value>(_ type: Value.Type = Value.self, atIndex index: Swift.Int) throws -> Value where Value : GRDB.DatabaseValueConvertible {
        _checkIndex(index)
        return try Value.decode(fromRow: self, atUncheckedIndex: index)
    }
  @inlinable final internal func decodeIfPresent<Value>(_ type: Value.Type = Value.self, forKey columnName: Swift.String) throws -> Value? where Value : GRDB.DatabaseValueConvertible {
        guard let index = index(forColumn: columnName) else {
            return nil
        }
        return try Value.decodeIfPresent(fromRow: self, atUncheckedIndex: index)
    }
  @inlinable final internal func decode<Value>(_ type: Value.Type = Value.self, forKey columnName: Swift.String) throws -> Value where Value : GRDB.DatabaseValueConvertible {
        guard let index = index(forColumn: columnName) else {
            throw RowDecodingError.columnNotFound(columnName, context: RowDecodingContext(row: self))
        }
        return try Value.decode(fromRow: self, atUncheckedIndex: index)
    }
}
extension GRDB.Row {
  @inline(__always) @inlinable final internal func decodeIfPresent<Value>(_ type: Value.Type = Value.self, atIndex index: Swift.Int) throws -> Value? where Value : GRDB.DatabaseValueConvertible, Value : GRDB.StatementColumnConvertible {
        _checkIndex(index)
        return try Value.fastDecodeIfPresent(fromRow: self, atUncheckedIndex: index)
    }
  @inline(__always) @inlinable final internal func decode<Value>(_ type: Value.Type = Value.self, atIndex index: Swift.Int) throws -> Value where Value : GRDB.DatabaseValueConvertible, Value : GRDB.StatementColumnConvertible {
        _checkIndex(index)
        return try Value.fastDecode(fromRow: self, atUncheckedIndex: index)
    }
  @inline(__always) @inlinable final internal func decodeIfPresent<Value>(_ type: Value.Type = Value.self, forKey columnName: Swift.String) throws -> Value? where Value : GRDB.DatabaseValueConvertible, Value : GRDB.StatementColumnConvertible {
        guard let index = index(forColumn: columnName) else {
            return nil
        }
        return try Value.fastDecodeIfPresent(fromRow: self, atUncheckedIndex: index)
    }
  @inlinable final internal func decode<Value>(_ type: Value.Type = Value.self, forKey columnName: Swift.String) throws -> Value where Value : GRDB.DatabaseValueConvertible, Value : GRDB.StatementColumnConvertible {
        guard let index = index(forColumn: columnName) else {
            throw RowDecodingError.columnNotFound(columnName, context: RowDecodingContext(row: self))
        }
        return try Value.fastDecode(fromRow: self, atUncheckedIndex: index)
    }
  @usableFromInline
  final internal func fastDecode<Value>(_ type: Value.Type, atUncheckedIndex index: Swift.Int) throws -> Value where Value : GRDB.DatabaseValueConvertible, Value : GRDB.StatementColumnConvertible
  @usableFromInline
  final internal func fastDecodeIfPresent<Value>(_ type: Value.Type, atUncheckedIndex index: Swift.Int) throws -> Value? where Value : GRDB.DatabaseValueConvertible, Value : GRDB.StatementColumnConvertible
}
@_hasMissingDesignatedInitializers final public class RowCursor : GRDB.DatabaseCursor {
  public typealias Element = GRDB.Row
  final public let statement: GRDB.Statement
  final public var _isDone: Swift.Bool
  @usableFromInline
  final internal let _row: GRDB.Row
  @objc deinit
  @inlinable final public func _element(sqliteStatement: GRDB.SQLiteStatement) -> GRDB.Row { _row }
}
extension GRDB.Row {
  public static func fetchCursor(_ statement: GRDB.Statement, arguments: GRDB.StatementArguments? = nil, adapter: GRDB.RowAdapter? = nil) throws -> GRDB.RowCursor
  public static func fetchAll(_ statement: GRDB.Statement, arguments: GRDB.StatementArguments? = nil, adapter: GRDB.RowAdapter? = nil) throws -> [GRDB.Row]
  public static func fetchSet(_ statement: GRDB.Statement, arguments: GRDB.StatementArguments? = nil, adapter: GRDB.RowAdapter? = nil) throws -> Swift.Set<GRDB.Row>
  public static func fetchOne(_ statement: GRDB.Statement, arguments: GRDB.StatementArguments? = nil, adapter: GRDB.RowAdapter? = nil) throws -> GRDB.Row?
}
extension GRDB.Row {
  public static func fetchCursor(_ db: GRDB.Database, sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments(), adapter: GRDB.RowAdapter? = nil) throws -> GRDB.RowCursor
  public static func fetchAll(_ db: GRDB.Database, sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments(), adapter: GRDB.RowAdapter? = nil) throws -> [GRDB.Row]
  public static func fetchSet(_ db: GRDB.Database, sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments(), adapter: GRDB.RowAdapter? = nil) throws -> Swift.Set<GRDB.Row>
  public static func fetchOne(_ db: GRDB.Database, sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments(), adapter: GRDB.RowAdapter? = nil) throws -> GRDB.Row?
}
extension GRDB.Row {
  public static func fetchCursor<R>(_ db: GRDB.Database, _ request: R) throws -> GRDB.RowCursor where R : GRDB.FetchRequest
  public static func fetchAll<R>(_ db: GRDB.Database, _ request: R) throws -> [GRDB.Row] where R : GRDB.FetchRequest
  public static func fetchSet<R>(_ db: GRDB.Database, _ request: R) throws -> Swift.Set<GRDB.Row> where R : GRDB.FetchRequest
  public static func fetchOne<R>(_ db: GRDB.Database, _ request: R) throws -> GRDB.Row? where R : GRDB.FetchRequest
}
extension GRDB.FetchRequest where Self.RowDecoder == GRDB.Row {
  public func fetchCursor(_ db: GRDB.Database) throws -> GRDB.RowCursor
  public func fetchAll(_ db: GRDB.Database) throws -> [GRDB.Row]
  public func fetchSet(_ db: GRDB.Database) throws -> Swift.Set<GRDB.Row>
  public func fetchOne(_ db: GRDB.Database) throws -> GRDB.Row?
}
extension GRDB.Row {
  final public var startIndex: GRDB.RowIndex {
    get
  }
  final public var endIndex: GRDB.RowIndex {
    get
  }
  final public subscript(position: GRDB.RowIndex) -> (Swift.String, GRDB.DatabaseValue) {
    get
  }
}
extension GRDB.Row {
  public static func == (lhs: GRDB.Row, rhs: GRDB.Row) -> Swift.Bool
}
extension GRDB.Row {
  final public func hash(into hasher: inout Swift.Hasher)
}
extension GRDB.Row {
  final public var description: Swift.String {
    get
  }
  final public var debugDescription: Swift.String {
    get
  }
}
public struct RowIndex : Swift.Comparable, Swift.Strideable {
  public typealias Stride = Swift.Int
}
extension GRDB.RowIndex {
  public static func == (lhs: GRDB.RowIndex, rhs: GRDB.RowIndex) -> Swift.Bool
  public static func < (lhs: GRDB.RowIndex, rhs: GRDB.RowIndex) -> Swift.Bool
}
extension GRDB.RowIndex {
  public func distance(to other: GRDB.RowIndex) -> Swift.Int
  public func advanced(by n: Swift.Int) -> GRDB.RowIndex
}
extension GRDB.Row {
  public struct ScopesView : Swift.Collection {
    public typealias Index = Swift.Dictionary<Swift.String, GRDB._LayoutedRowAdapter>.Index
    public var names: Swift.Dictionary<Swift.String, GRDB._LayoutedRowAdapter>.Keys {
      get
    }
    public var startIndex: GRDB.Row.ScopesView.Index {
      get
    }
    public var endIndex: GRDB.Row.ScopesView.Index {
      get
    }
    public func index(after i: GRDB.Row.ScopesView.Index) -> GRDB.Row.ScopesView.Index
    public subscript(position: GRDB.Row.ScopesView.Index) -> (name: Swift.String, row: GRDB.Row) {
      get
    }
    public subscript(name: Swift.String) -> GRDB.Row? {
      get
    }
    public typealias Element = (name: Swift.String, row: GRDB.Row)
    public typealias Indices = Swift.DefaultIndices<GRDB.Row.ScopesView>
    public typealias Iterator = Swift.IndexingIterator<GRDB.Row.ScopesView>
    public typealias SubSequence = Swift.Slice<GRDB.Row.ScopesView>
  }
}
extension GRDB.Row {
  public struct ScopesTreeView {
    public var names: Swift.Set<Swift.String> {
      get
    }
    public subscript(name: Swift.String) -> GRDB.Row? {
      get
    }
  }
}
extension GRDB.Row {
  public struct PrefetchedRowsView : Swift.Equatable {
    public var isEmpty: Swift.Bool {
      get
    }
    public var keys: Swift.Set<Swift.String> {
      get
    }
    public subscript(key: Swift.String) -> [GRDB.Row]? {
      get
    }
    public static func == (a: GRDB.Row.PrefetchedRowsView, b: GRDB.Row.PrefetchedRowsView) -> Swift.Bool
  }
}
public struct Inflections {
  public init()
  public mutating func plural(_ pattern: Swift.String, options: Foundation.NSRegularExpression.Options = [.caseInsensitive], _ template: Swift.String)
  public mutating func singular(_ pattern: Swift.String, options: Foundation.NSRegularExpression.Options = [.caseInsensitive], _ template: Swift.String)
  public mutating func uncountableWords(_ words: [Swift.String])
  public mutating func irregularSuffix(_ singular: Swift.String, _ plural: Swift.String)
  public func pluralize(_ string: Swift.String) -> Swift.String
  public func singularize(_ string: Swift.String) -> Swift.String
}
public protocol FetchableRecord {
  init(row: GRDB.Row)
  static var databaseDecodingUserInfo: [Swift.CodingUserInfoKey : Any] { get }
  static func databaseJSONDecoder(for column: Swift.String) -> Foundation.JSONDecoder
  static var databaseDateDecodingStrategy: GRDB.DatabaseDateDecodingStrategy { get }
  static var databaseColumnDecodingStrategy: GRDB.DatabaseColumnDecodingStrategy { get }
}
extension GRDB.FetchableRecord {
  public static var databaseDecodingUserInfo: [Swift.CodingUserInfoKey : Any] {
    get
  }
  public static func databaseJSONDecoder(for column: Swift.String) -> Foundation.JSONDecoder
  public static var databaseDateDecodingStrategy: GRDB.DatabaseDateDecodingStrategy {
    get
  }
  public static var databaseColumnDecodingStrategy: GRDB.DatabaseColumnDecodingStrategy {
    get
  }
}
extension GRDB.FetchableRecord {
  public static func fetchCursor(_ statement: GRDB.Statement, arguments: GRDB.StatementArguments? = nil, adapter: GRDB.RowAdapter? = nil) throws -> GRDB.RecordCursor<Self>
  public static func fetchAll(_ statement: GRDB.Statement, arguments: GRDB.StatementArguments? = nil, adapter: GRDB.RowAdapter? = nil) throws -> [Self]
  public static func fetchOne(_ statement: GRDB.Statement, arguments: GRDB.StatementArguments? = nil, adapter: GRDB.RowAdapter? = nil) throws -> Self?
}
extension GRDB.FetchableRecord where Self : Swift.Hashable {
  public static func fetchSet(_ statement: GRDB.Statement, arguments: GRDB.StatementArguments? = nil, adapter: GRDB.RowAdapter? = nil) throws -> Swift.Set<Self>
}
extension GRDB.FetchableRecord {
  public static func fetchCursor(_ db: GRDB.Database, sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments(), adapter: GRDB.RowAdapter? = nil) throws -> GRDB.RecordCursor<Self>
  public static func fetchAll(_ db: GRDB.Database, sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments(), adapter: GRDB.RowAdapter? = nil) throws -> [Self]
  public static func fetchOne(_ db: GRDB.Database, sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments(), adapter: GRDB.RowAdapter? = nil) throws -> Self?
}
extension GRDB.FetchableRecord where Self : Swift.Hashable {
  public static func fetchSet(_ db: GRDB.Database, sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments(), adapter: GRDB.RowAdapter? = nil) throws -> Swift.Set<Self>
}
extension GRDB.FetchableRecord {
  public static func fetchCursor<R>(_ db: GRDB.Database, _ request: R) throws -> GRDB.RecordCursor<Self> where R : GRDB.FetchRequest
  public static func fetchAll<R>(_ db: GRDB.Database, _ request: R) throws -> [Self] where R : GRDB.FetchRequest
  public static func fetchOne<R>(_ db: GRDB.Database, _ request: R) throws -> Self? where R : GRDB.FetchRequest
}
extension GRDB.FetchableRecord where Self : Swift.Hashable {
  public static func fetchSet<R>(_ db: GRDB.Database, _ request: R) throws -> Swift.Set<Self> where R : GRDB.FetchRequest
}
extension GRDB.FetchRequest where Self.RowDecoder : GRDB.FetchableRecord {
  public func fetchCursor(_ db: GRDB.Database) throws -> GRDB.RecordCursor<Self.RowDecoder>
  public func fetchAll(_ db: GRDB.Database) throws -> [Self.RowDecoder]
  public func fetchOne(_ db: GRDB.Database) throws -> Self.RowDecoder?
}
extension GRDB.FetchRequest where Self.RowDecoder : GRDB.FetchableRecord, Self.RowDecoder : Swift.Hashable {
  public func fetchSet(_ db: GRDB.Database) throws -> Swift.Set<Self.RowDecoder>
}
@_hasMissingDesignatedInitializers final public class RecordCursor<Record> : GRDB.DatabaseCursor where Record : GRDB.FetchableRecord {
  public typealias Element = Record
  final public let statement: GRDB.Statement
  final public var _isDone: Swift.Bool
  @objc deinit
  final public func _element(sqliteStatement: GRDB.SQLiteStatement) -> Record
}
public enum DatabaseDateDecodingStrategy {
  case deferredToDate
  case timeIntervalSinceReferenceDate
  case timeIntervalSince1970
  case millisecondsSince1970
  @available(macOS 10.12, watchOS 3.0, tvOS 10.0, *)
  case iso8601
  case formatted(Foundation.DateFormatter)
  case custom((GRDB.DatabaseValue) -> Foundation.Date?)
}
public enum DatabaseColumnDecodingStrategy {
  case useDefaultKeys
  case convertFromSnakeCase
  case custom((Swift.String) -> Swift.CodingKey)
}
public struct DatabaseDateComponents : GRDB.DatabaseValueConvertible, GRDB.StatementColumnConvertible, Swift.Codable {
  public enum Format : Swift.String {
    case YMD
    case YMD_HM
    case YMD_HMS
    case YMD_HMSS
    case HM
    case HMS
    case HMSS
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public let dateComponents: Foundation.DateComponents
  public let format: GRDB.DatabaseDateComponents.Format
  public init(_ dateComponents: Foundation.DateComponents, format: GRDB.DatabaseDateComponents.Format)
  @inline(__always) @inlinable public init?(sqliteStatement: GRDB.SQLiteStatement, index: Swift.Int32) {
        guard let cString = sqlite3_column_text(sqliteStatement, index) else {
            return nil
        }
        let length = Int(sqlite3_column_bytes(sqliteStatement, index)) // avoid an strlen
        let optionalComponents = cString.withMemoryRebound(
            to: Int8.self,
            capacity: length + 1 /* trailing \0 */) { cString in
            SQLiteDateParser().components(cString: cString, length: length)
        }
        guard let components = optionalComponents else {
            return nil
        }
        self.init(components.dateComponents, format: components.format)
    }
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> GRDB.DatabaseDateComponents?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct HasManyThroughAssociation<Origin, Destination> : GRDB.AssociationToMany {
  public typealias OriginRowDecoder = Origin
  public typealias RowDecoder = Destination
  public var _sqlAssociation: GRDB._SQLAssociation
}
public protocol DatabaseReader : AnyObject, Swift.Sendable {
  var configuration: GRDB.Configuration { get }
  func close() throws
  func interrupt()
  @_disfavoredOverload func read<T>(_ value: (GRDB.Database) throws -> T) throws -> T
  func asyncRead(_ value: @escaping (Swift.Result<GRDB.Database, Swift.Error>) -> Swift.Void)
  @_disfavoredOverload func unsafeRead<T>(_ value: (GRDB.Database) throws -> T) throws -> T
  func asyncUnsafeRead(_ value: @escaping (Swift.Result<GRDB.Database, Swift.Error>) -> Swift.Void)
  func unsafeReentrantRead<T>(_ value: (GRDB.Database) throws -> T) throws -> T
  func _add<Reducer>(observation: GRDB.ValueObservation<Reducer>, scheduling scheduler: GRDB.ValueObservationScheduler, onChange: @escaping (Reducer.Value) -> Swift.Void) -> GRDB.DatabaseCancellable where Reducer : GRDB.ValueReducer
}
extension GRDB.DatabaseReader {
  public func backup(to writer: GRDB.DatabaseWriter, pagesPerStep: Swift.Int32 = -1, progress: ((GRDB.DatabaseBackupProgress) throws -> Swift.Void)? = nil) throws
}
extension GRDB.DatabaseReader {
  #if compiler(>=5.3) && $AsyncAwait && $Sendable
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  public func read<T>(_ value: @escaping @Sendable (GRDB.Database) throws -> T) async throws -> T
  #endif
  #if compiler(>=5.3) && $AsyncAwait && $Sendable
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  public func unsafeRead<T>(_ value: @escaping @Sendable (GRDB.Database) throws -> T) async throws -> T
  #endif
}
extension GRDB.DatabaseReader {
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  public func readPublisher<Output>(value: @escaping (GRDB.Database) throws -> Output) -> GRDB.DatabasePublishers.Read<Output>
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  public func readPublisher<S, Output>(receiveOn scheduler: S, value: @escaping (GRDB.Database) throws -> Output) -> GRDB.DatabasePublishers.Read<Output> where S : Combine.Scheduler
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension GRDB.DatabasePublishers {
  public struct Read<Output> : Combine.Publisher {
    public typealias Output = Output
    public typealias Failure = Swift.Error
    public func receive<S>(subscriber: S) where Output == S.Input, S : Combine.Subscriber, S.Failure == Swift.Error
  }
}
final public class AnyDatabaseReader : GRDB.DatabaseReader {
  public init(_ base: GRDB.DatabaseReader)
  final public var configuration: GRDB.Configuration {
    get
  }
  final public func close() throws
  final public func interrupt()
  @_disfavoredOverload final public func read<T>(_ value: (GRDB.Database) throws -> T) throws -> T
  final public func asyncRead(_ value: @escaping (Swift.Result<GRDB.Database, Swift.Error>) -> Swift.Void)
  @_disfavoredOverload final public func unsafeRead<T>(_ value: (GRDB.Database) throws -> T) throws -> T
  final public func asyncUnsafeRead(_ value: @escaping (Swift.Result<GRDB.Database, Swift.Error>) -> Swift.Void)
  final public func unsafeReentrantRead<T>(_ value: (GRDB.Database) throws -> T) throws -> T
  final public func _add<Reducer>(observation: GRDB.ValueObservation<Reducer>, scheduling scheduler: GRDB.ValueObservationScheduler, onChange: @escaping (Reducer.Value) -> Swift.Void) -> GRDB.DatabaseCancellable where Reducer : GRDB.ValueReducer
  @objc deinit
}
extension Foundation.NSNull : GRDB.DatabaseValueConvertible {
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> Self?
}
extension GRDB.TableRecord {
  public static func belongsTo<Destination>(_ destination: Destination.Type, key: Swift.String? = nil, using foreignKey: GRDB.ForeignKey? = nil) -> GRDB.BelongsToAssociation<Self, Destination> where Destination : GRDB.TableRecord
  public static func hasMany<Destination>(_ destination: Destination.Type, key: Swift.String? = nil, using foreignKey: GRDB.ForeignKey? = nil) -> GRDB.HasManyAssociation<Self, Destination> where Destination : GRDB.TableRecord
  public static func hasOne<Destination>(_ destination: Destination.Type, key: Swift.String? = nil, using foreignKey: GRDB.ForeignKey? = nil) -> GRDB.HasOneAssociation<Self, Destination> where Destination : GRDB.TableRecord
}
extension GRDB.TableRecord {
  public static func belongsTo<Destination>(_ destination: GRDB.Table<Destination>, key: Swift.String? = nil, using foreignKey: GRDB.ForeignKey? = nil) -> GRDB.BelongsToAssociation<Self, Destination>
  public static func hasMany<Destination>(_ destination: GRDB.Table<Destination>, key: Swift.String? = nil, using foreignKey: GRDB.ForeignKey? = nil) -> GRDB.HasManyAssociation<Self, Destination>
  public static func hasOne<Destination>(_ destination: GRDB.Table<Destination>, key: Swift.String? = nil, using foreignKey: GRDB.ForeignKey? = nil) -> GRDB.HasOneAssociation<Self, Destination>
}
extension GRDB.TableRecord {
  public static func association<Destination>(to cte: GRDB.CommonTableExpression<Destination>, on condition: @escaping (_ left: GRDB.TableAlias, _ right: GRDB.TableAlias) -> GRDB.SQLExpressible) -> GRDB.JoinAssociation<Self, Destination>
  public static func association<Destination>(to cte: GRDB.CommonTableExpression<Destination>) -> GRDB.JoinAssociation<Self, Destination>
}
extension GRDB.TableRecord {
  public static func hasMany<Pivot, Target>(_ destination: Target.RowDecoder.Type, through pivot: Pivot, using target: Target, key: Swift.String? = nil) -> GRDB.HasManyThroughAssociation<Self, Target.RowDecoder> where Self == Pivot.OriginRowDecoder, Pivot : GRDB.Association, Target : GRDB.Association, Pivot.RowDecoder == Target.OriginRowDecoder
  public static func hasOne<Pivot, Target>(_ destination: Target.RowDecoder.Type, through pivot: Pivot, using target: Target, key: Swift.String? = nil) -> GRDB.HasOneThroughAssociation<Self, Target.RowDecoder> where Self == Pivot.OriginRowDecoder, Pivot : GRDB.AssociationToOne, Target : GRDB.AssociationToOne, Pivot.RowDecoder == Target.OriginRowDecoder
}
extension GRDB.TableRecord where Self : GRDB.EncodableRecord {
  public func request<A>(for association: A) -> GRDB.QueryInterfaceRequest<A.RowDecoder> where Self == A.OriginRowDecoder, A : GRDB.Association
}
extension GRDB.TableRecord {
  public static func including<A>(all association: A) -> GRDB.QueryInterfaceRequest<Self> where Self == A.OriginRowDecoder, A : GRDB.AssociationToMany
  public static func including<A>(optional association: A) -> GRDB.QueryInterfaceRequest<Self> where Self == A.OriginRowDecoder, A : GRDB.Association
  public static func including<A>(required association: A) -> GRDB.QueryInterfaceRequest<Self> where Self == A.OriginRowDecoder, A : GRDB.Association
  public static func joining<A>(optional association: A) -> GRDB.QueryInterfaceRequest<Self> where Self == A.OriginRowDecoder, A : GRDB.Association
  public static func joining<A>(required association: A) -> GRDB.QueryInterfaceRequest<Self> where Self == A.OriginRowDecoder, A : GRDB.Association
  public static func annotated<A>(withOptional association: A) -> GRDB.QueryInterfaceRequest<Self> where Self == A.OriginRowDecoder, A : GRDB.Association
  public static func annotated<A>(withRequired association: A) -> GRDB.QueryInterfaceRequest<Self> where Self == A.OriginRowDecoder, A : GRDB.Association
}
extension GRDB.TableRecord {
  public static func annotated(with aggregates: GRDB.AssociationAggregate<Self>...) -> GRDB.QueryInterfaceRequest<Self>
  public static func annotated(with aggregates: [GRDB.AssociationAggregate<Self>]) -> GRDB.QueryInterfaceRequest<Self>
  public static func having(_ predicate: GRDB.AssociationAggregate<Self>) -> GRDB.QueryInterfaceRequest<Self>
}
public struct DatabaseRegion : Swift.CustomStringConvertible, Swift.Equatable {
  public var isEmpty: Swift.Bool {
    get
  }
  public var isFullDatabase: Swift.Bool {
    get
  }
  public static let fullDatabase: GRDB.DatabaseRegion
  public init()
  @available(*, deprecated, message: "In order to specify a table region, prefer `Table(tableName)`")
  public init(table: Swift.String)
  public func union(_ other: GRDB.DatabaseRegion) -> GRDB.DatabaseRegion
  public mutating func formUnion(_ other: GRDB.DatabaseRegion)
}
extension GRDB.DatabaseRegion {
  public func isModified(byEventsOfKind eventKind: GRDB.DatabaseEventKind) -> Swift.Bool
  public func isModified(by event: GRDB.DatabaseEvent) -> Swift.Bool
}
extension GRDB.DatabaseRegion {
  public static func == (lhs: GRDB.DatabaseRegion, rhs: GRDB.DatabaseRegion) -> Swift.Bool
}
extension GRDB.DatabaseRegion {
  public var description: Swift.String {
    get
  }
}
public protocol DatabaseRegionConvertible {
  func databaseRegion(_ db: GRDB.Database) throws -> GRDB.DatabaseRegion
}
extension GRDB.DatabaseRegionConvertible where Self == GRDB.DatabaseRegion {
  public static var fullDatabase: GRDB.DatabaseRegion {
    get
  }
}
extension GRDB.DatabaseRegion : GRDB.DatabaseRegionConvertible {
  public func databaseRegion(_ db: GRDB.Database) throws -> GRDB.DatabaseRegion
}
public struct AnyDatabaseRegionConvertible : GRDB.DatabaseRegionConvertible {
  public init(_ region: @escaping (GRDB.Database) throws -> GRDB.DatabaseRegion)
  public init(_ region: GRDB.DatabaseRegionConvertible)
  public func databaseRegion(_ db: GRDB.Database) throws -> GRDB.DatabaseRegion
}
final public class DatabaseQueue : GRDB.DatabaseWriter {
  final public var configuration: GRDB.Configuration {
    get
  }
  final public var path: Swift.String {
    get
  }
  public init(path: Swift.String, configuration: GRDB.Configuration = Configuration()) throws
  public init(configuration: GRDB.Configuration = Configuration())
  @objc deinit
  final public func close() throws
}
extension GRDB.DatabaseQueue {
  final public func releaseMemory()
}
extension GRDB.DatabaseQueue {
  final public func interrupt()
  @_disfavoredOverload final public func read<T>(_ value: (GRDB.Database) throws -> T) throws -> T
  final public func asyncRead(_ value: @escaping (Swift.Result<GRDB.Database, Swift.Error>) -> Swift.Void)
  final public func unsafeRead<T>(_ value: (GRDB.Database) throws -> T) rethrows -> T
  final public func asyncUnsafeRead(_ value: @escaping (Swift.Result<GRDB.Database, Swift.Error>) -> Swift.Void)
  final public func unsafeReentrantRead<T>(_ value: (GRDB.Database) throws -> T) rethrows -> T
  final public func concurrentRead<T>(_ value: @escaping (GRDB.Database) throws -> T) -> GRDB.DatabaseFuture<T>
  final public func spawnConcurrentRead(_ value: @escaping (Swift.Result<GRDB.Database, Swift.Error>) -> Swift.Void)
  final public func inTransaction(_ kind: GRDB.Database.TransactionKind? = nil, _ updates: (GRDB.Database) throws -> GRDB.Database.TransactionCompletion) throws
  @_disfavoredOverload final public func writeWithoutTransaction<T>(_ updates: (GRDB.Database) throws -> T) rethrows -> T
  @_disfavoredOverload final public func barrierWriteWithoutTransaction<T>(_ updates: (GRDB.Database) throws -> T) rethrows -> T
  final public func asyncBarrierWriteWithoutTransaction(_ updates: @escaping (GRDB.Database) -> Swift.Void)
  final public func inDatabase<T>(_ updates: (GRDB.Database) throws -> T) rethrows -> T
  final public func unsafeReentrantWrite<T>(_ updates: (GRDB.Database) throws -> T) rethrows -> T
  final public func asyncWriteWithoutTransaction(_ updates: @escaping (GRDB.Database) -> Swift.Void)
  final public func _add<Reducer>(observation: GRDB.ValueObservation<Reducer>, scheduling scheduler: GRDB.ValueObservationScheduler, onChange: @escaping (Reducer.Value) -> Swift.Void) -> GRDB.DatabaseCancellable where Reducer : GRDB.ValueReducer
}
public struct ValueObservation<Reducer> where Reducer : GRDB.ValueReducer {
  public var requiresWriteAccess: Swift.Bool
}
extension GRDB.ValueObservation {
  public func start(in reader: GRDB.DatabaseReader, scheduling scheduler: GRDB.ValueObservationScheduler = .async(onQueue: .main), onError: @escaping (Swift.Error) -> Swift.Void, onChange: @escaping (Reducer.Value) -> Swift.Void) -> GRDB.DatabaseCancellable
  public func handleEvents(willStart: (() -> Swift.Void)? = nil, willFetch: (() -> Swift.Void)? = nil, willTrackRegion: ((GRDB.DatabaseRegion) -> Swift.Void)? = nil, databaseDidChange: (() -> Swift.Void)? = nil, didReceiveValue: ((Reducer.Value) -> Swift.Void)? = nil, didFail: ((Swift.Error) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil) -> GRDB.ValueObservation<GRDB.ValueReducers.Trace<Reducer>>
  public func print(_ prefix: Swift.String = "", to stream: Swift.TextOutputStream? = nil) -> GRDB.ValueObservation<GRDB.ValueReducers.Trace<Reducer>>
}
extension GRDB.ValueObservation {
  #if compiler(>=5.3) && $RethrowsProtocol
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  public func values(in reader: GRDB.DatabaseReader, scheduling scheduler: GRDB.ValueObservationScheduler = .async(onQueue: .main), bufferingPolicy: GRDB.AsyncValueObservation<Reducer.Value>.BufferingPolicy = .unbounded) -> GRDB.AsyncValueObservation<Reducer.Value>
  #endif
}
#if compiler(>=5.3) && $RethrowsProtocol
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct AsyncValueObservation<Element> : _Concurrency.AsyncSequence {
  public typealias BufferingPolicy = _Concurrency.AsyncThrowingStream<Element, Swift.Error>.Continuation.BufferingPolicy
  public typealias AsyncIterator = GRDB.AsyncValueObservation<Element>.Iterator
  public func makeAsyncIterator() -> GRDB.AsyncValueObservation<Element>.Iterator
  public struct Iterator : _Concurrency.AsyncIteratorProtocol {
    #if compiler(>=5.3) && $AsyncAwait
    public mutating func next() async throws -> Element?
    #endif
  }
}
#endif
extension GRDB.ValueObservation {
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  public func publisher(in reader: GRDB.DatabaseReader, scheduling scheduler: GRDB.ValueObservationScheduler = .async(onQueue: .main)) -> GRDB.DatabasePublishers.Value<Reducer.Value>
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension GRDB.DatabasePublishers {
  public struct Value<Output> : Combine.Publisher {
    public typealias Failure = Swift.Error
    public func receive<S>(subscriber: S) where Output == S.Input, S : Combine.Subscriber, S.Failure == Swift.Error
  }
}
extension GRDB.ValueObservation where Reducer == GRDB.ValueReducers.Auto {
  public static func trackingConstantRegion<Value>(_ fetch: @escaping (GRDB.Database) throws -> Value) -> GRDB.ValueObservation<GRDB.ValueReducers.Fetch<Value>>
  public static func tracking<Value>(region: GRDB.DatabaseRegionConvertible..., fetch: @escaping (GRDB.Database) throws -> Value) -> GRDB.ValueObservation<GRDB.ValueReducers.Fetch<Value>>
  public static func tracking<Value>(regions: [GRDB.DatabaseRegionConvertible], fetch: @escaping (GRDB.Database) throws -> Value) -> GRDB.ValueObservation<GRDB.ValueReducers.Fetch<Value>>
  public static func tracking<Value>(_ fetch: @escaping (GRDB.Database) throws -> Value) -> GRDB.ValueObservation<GRDB.ValueReducers.Fetch<Value>>
  @available(*, deprecated, renamed: "tracking(_:)")
  public static func trackingVaryingRegion<Value>(_ fetch: @escaping (GRDB.Database) throws -> Value) -> GRDB.ValueObservation<GRDB.ValueReducers.Fetch<Value>>
}
public enum SharedValueObservationExtent {
  case observationLifetime
  case whileObserved
  public static func == (a: GRDB.SharedValueObservationExtent, b: GRDB.SharedValueObservationExtent) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GRDB.ValueObservation {
  public func shared(in reader: GRDB.DatabaseReader, scheduling scheduler: GRDB.ValueObservationScheduler = .async(onQueue: .main), extent: GRDB.SharedValueObservationExtent = .whileObserved) -> GRDB.SharedValueObservation<Reducer.Value>
}
@_hasMissingDesignatedInitializers final public class SharedValueObservation<Element> {
  final public func start(onError: @escaping (Swift.Error) -> Swift.Void, onChange: @escaping (Element) -> Swift.Void) -> GRDB.DatabaseCancellable
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  final public func publisher() -> GRDB.DatabasePublishers.Value<Element>
  @objc deinit
}
extension GRDB.SharedValueObservation {
  #if compiler(>=5.3) && $RethrowsProtocol
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  final public func values(bufferingPolicy: GRDB.AsyncValueObservation<Element>.BufferingPolicy = .unbounded) -> GRDB.AsyncValueObservation<Element>
  #endif
}
public struct JoinAssociation<Origin, Destination> : GRDB.AssociationToOne {
  public typealias OriginRowDecoder = Origin
  public typealias RowDecoder = Destination
  public var _sqlAssociation: GRDB._SQLAssociation
}
public protocol VirtualTableModule {
  associatedtype TableDefinition
  var moduleName: Swift.String { get }
  func makeTableDefinition() -> Self.TableDefinition
  func makeTableDefinition(configuration: GRDB.VirtualTableConfiguration) -> Self.TableDefinition
  func moduleArguments(for definition: Self.TableDefinition, in db: GRDB.Database) throws -> [Swift.String]
  func database(_ db: GRDB.Database, didCreate tableName: Swift.String, using definition: Self.TableDefinition) throws
}
extension GRDB.VirtualTableModule {
  public func makeTableDefinition(configuration: GRDB.VirtualTableConfiguration) -> Self.TableDefinition
}
public struct VirtualTableConfiguration {
}
extension GRDB.Database {
  final public func create(virtualTable name: Swift.String, ifNotExists: Swift.Bool = false, using module: Swift.String) throws
  final public func create<Module>(virtualTable tableName: Swift.String, ifNotExists: Swift.Bool = false, using module: Module, _ body: ((Module.TableDefinition) throws -> Swift.Void)? = nil) throws where Module : GRDB.VirtualTableModule
}
extension Foundation.Decimal : GRDB.DatabaseValueConvertible {
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> Foundation.Decimal?
}
extension Foundation.Decimal : GRDB.StatementColumnConvertible {
  @inline(__always) @inlinable public init?(sqliteStatement: GRDB.SQLiteStatement, index: Swift.Int32) {
        switch sqlite3_column_type(sqliteStatement, index) {
        case SQLITE_INTEGER:
            self.init(sqlite3_column_int64(sqliteStatement, index))
        case SQLITE_FLOAT:
            self.init(sqlite3_column_double(sqliteStatement, index))
        case SQLITE_TEXT:
            self.init(
                string: String(cString: sqlite3_column_text(sqliteStatement, index)!),
                locale: _posixLocale)
        default:
            return nil
        }
    }
}
@usableFromInline
internal let _posixLocale: Foundation.Locale
public struct SQLInterpolation : Swift.StringInterpolationProtocol {
  public init(literalCapacity: Swift.Int, interpolationCount: Swift.Int)
  public mutating func appendLiteral(_ sql: Swift.String)
  public mutating func appendInterpolation(sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments())
  public mutating func appendInterpolation(_ sqlLiteral: GRDB.SQL)
  public mutating func appendInterpolation<S>(_ string: S) where S : Swift.StringProtocol
  public mutating func appendInterpolation(literal sqlLiteral: GRDB.SQL)
  public typealias StringLiteralType = Swift.String
}
public struct ResultCode : Swift.RawRepresentable, Swift.Equatable, Swift.CustomStringConvertible {
  public let rawValue: Swift.CInt
  public init(rawValue: Swift.CInt)
  public var primaryResultCode: GRDB.ResultCode {
    get
  }
  public static func ~= (pattern: GRDB.ResultCode, code: GRDB.ResultCode) -> Swift.Bool
  public static let SQLITE_OK: GRDB.ResultCode
  public static let SQLITE_ERROR: GRDB.ResultCode
  public static let SQLITE_INTERNAL: GRDB.ResultCode
  public static let SQLITE_PERM: GRDB.ResultCode
  public static let SQLITE_ABORT: GRDB.ResultCode
  public static let SQLITE_BUSY: GRDB.ResultCode
  public static let SQLITE_LOCKED: GRDB.ResultCode
  public static let SQLITE_NOMEM: GRDB.ResultCode
  public static let SQLITE_READONLY: GRDB.ResultCode
  public static let SQLITE_INTERRUPT: GRDB.ResultCode
  public static let SQLITE_IOERR: GRDB.ResultCode
  public static let SQLITE_CORRUPT: GRDB.ResultCode
  public static let SQLITE_NOTFOUND: GRDB.ResultCode
  public static let SQLITE_FULL: GRDB.ResultCode
  public static let SQLITE_CANTOPEN: GRDB.ResultCode
  public static let SQLITE_PROTOCOL: GRDB.ResultCode
  public static let SQLITE_EMPTY: GRDB.ResultCode
  public static let SQLITE_SCHEMA: GRDB.ResultCode
  public static let SQLITE_TOOBIG: GRDB.ResultCode
  public static let SQLITE_CONSTRAINT: GRDB.ResultCode
  public static let SQLITE_MISMATCH: GRDB.ResultCode
  public static let SQLITE_MISUSE: GRDB.ResultCode
  public static let SQLITE_NOLFS: GRDB.ResultCode
  public static let SQLITE_AUTH: GRDB.ResultCode
  public static let SQLITE_FORMAT: GRDB.ResultCode
  public static let SQLITE_RANGE: GRDB.ResultCode
  public static let SQLITE_NOTADB: GRDB.ResultCode
  public static let SQLITE_NOTICE: GRDB.ResultCode
  public static let SQLITE_WARNING: GRDB.ResultCode
  public static let SQLITE_ROW: GRDB.ResultCode
  public static let SQLITE_DONE: GRDB.ResultCode
  public static let SQLITE_ERROR_MISSING_COLLSEQ: GRDB.ResultCode
  public static let SQLITE_ERROR_RETRY: GRDB.ResultCode
  public static let SQLITE_ERROR_SNAPSHOT: GRDB.ResultCode
  public static let SQLITE_IOERR_READ: GRDB.ResultCode
  public static let SQLITE_IOERR_SHORT_READ: GRDB.ResultCode
  public static let SQLITE_IOERR_WRITE: GRDB.ResultCode
  public static let SQLITE_IOERR_FSYNC: GRDB.ResultCode
  public static let SQLITE_IOERR_DIR_FSYNC: GRDB.ResultCode
  public static let SQLITE_IOERR_TRUNCATE: GRDB.ResultCode
  public static let SQLITE_IOERR_FSTAT: GRDB.ResultCode
  public static let SQLITE_IOERR_UNLOCK: GRDB.ResultCode
  public static let SQLITE_IOERR_RDLOCK: GRDB.ResultCode
  public static let SQLITE_IOERR_DELETE: GRDB.ResultCode
  public static let SQLITE_IOERR_BLOCKED: GRDB.ResultCode
  public static let SQLITE_IOERR_NOMEM: GRDB.ResultCode
  public static let SQLITE_IOERR_ACCESS: GRDB.ResultCode
  public static let SQLITE_IOERR_CHECKRESERVEDLOCK: GRDB.ResultCode
  public static let SQLITE_IOERR_LOCK: GRDB.ResultCode
  public static let SQLITE_IOERR_CLOSE: GRDB.ResultCode
  public static let SQLITE_IOERR_DIR_CLOSE: GRDB.ResultCode
  public static let SQLITE_IOERR_SHMOPEN: GRDB.ResultCode
  public static let SQLITE_IOERR_SHMSIZE: GRDB.ResultCode
  public static let SQLITE_IOERR_SHMLOCK: GRDB.ResultCode
  public static let SQLITE_IOERR_SHMMAP: GRDB.ResultCode
  public static let SQLITE_IOERR_SEEK: GRDB.ResultCode
  public static let SQLITE_IOERR_DELETE_NOENT: GRDB.ResultCode
  public static let SQLITE_IOERR_MMAP: GRDB.ResultCode
  public static let SQLITE_IOERR_GETTEMPPATH: GRDB.ResultCode
  public static let SQLITE_IOERR_CONVPATH: GRDB.ResultCode
  public static let SQLITE_IOERR_VNODE: GRDB.ResultCode
  public static let SQLITE_IOERR_AUTH: GRDB.ResultCode
  public static let SQLITE_IOERR_BEGIN_ATOMIC: GRDB.ResultCode
  public static let SQLITE_IOERR_COMMIT_ATOMIC: GRDB.ResultCode
  public static let SQLITE_IOERR_ROLLBACK_ATOMIC: GRDB.ResultCode
  public static let SQLITE_IOERR_DATA: GRDB.ResultCode
  public static let SQLITE_IOERR_CORRUPTFS: GRDB.ResultCode
  public static let SQLITE_LOCKED_SHAREDCACHE: GRDB.ResultCode
  public static let SQLITE_LOCKED_VTAB: GRDB.ResultCode
  public static let SQLITE_BUSY_RECOVERY: GRDB.ResultCode
  public static let SQLITE_BUSY_SNAPSHOT: GRDB.ResultCode
  public static let SQLITE_BUSY_TIMEOUT: GRDB.ResultCode
  public static let SQLITE_CANTOPEN_NOTEMPDIR: GRDB.ResultCode
  public static let SQLITE_CANTOPEN_ISDIR: GRDB.ResultCode
  public static let SQLITE_CANTOPEN_FULLPATH: GRDB.ResultCode
  public static let SQLITE_CANTOPEN_CONVPATH: GRDB.ResultCode
  public static let SQLITE_CANTOPEN_DIRTYWAL: GRDB.ResultCode
  public static let SQLITE_CANTOPEN_SYMLINK: GRDB.ResultCode
  public static let SQLITE_CORRUPT_VTAB: GRDB.ResultCode
  public static let SQLITE_CORRUPT_SEQUENCE: GRDB.ResultCode
  public static let SQLITE_CORRUPT_INDEX: GRDB.ResultCode
  public static let SQLITE_READONLY_RECOVERY: GRDB.ResultCode
  public static let SQLITE_READONLY_CANTLOCK: GRDB.ResultCode
  public static let SQLITE_READONLY_ROLLBACK: GRDB.ResultCode
  public static let SQLITE_READONLY_DBMOVED: GRDB.ResultCode
  public static let SQLITE_READONLY_CANTINIT: GRDB.ResultCode
  public static let SQLITE_READONLY_DIRECTORY: GRDB.ResultCode
  public static let SQLITE_ABORT_ROLLBACK: GRDB.ResultCode
  public static let SQLITE_CONSTRAINT_CHECK: GRDB.ResultCode
  public static let SQLITE_CONSTRAINT_COMMITHOOK: GRDB.ResultCode
  public static let SQLITE_CONSTRAINT_FOREIGNKEY: GRDB.ResultCode
  public static let SQLITE_CONSTRAINT_FUNCTION: GRDB.ResultCode
  public static let SQLITE_CONSTRAINT_NOTNULL: GRDB.ResultCode
  public static let SQLITE_CONSTRAINT_PRIMARYKEY: GRDB.ResultCode
  public static let SQLITE_CONSTRAINT_TRIGGER: GRDB.ResultCode
  public static let SQLITE_CONSTRAINT_UNIQUE: GRDB.ResultCode
  public static let SQLITE_CONSTRAINT_VTAB: GRDB.ResultCode
  public static let SQLITE_CONSTRAINT_ROWID: GRDB.ResultCode
  public static let SQLITE_CONSTRAINT_PINNED: GRDB.ResultCode
  public static let SQLITE_CONSTRAINT_DATATYPE: GRDB.ResultCode
  public static let SQLITE_NOTICE_RECOVER_WAL: GRDB.ResultCode
  public static let SQLITE_NOTICE_RECOVER_ROLLBACK: GRDB.ResultCode
  public static let SQLITE_WARNING_AUTOINDEX: GRDB.ResultCode
  public static let SQLITE_AUTH_USER: GRDB.ResultCode
  public static let SQLITE_OK_LOAD_PERMANENTLY: GRDB.ResultCode
  public static let SQLITE_OK_SYMLINK: GRDB.ResultCode
  public typealias RawValue = Swift.CInt
}
extension GRDB.ResultCode {
  public static func ~= (lhs: GRDB.ResultCode, rhs: Swift.Error) -> Swift.Bool
}
extension GRDB.ResultCode {
  public var description: Swift.String {
    get
  }
}
extension GRDB.ResultCode : GRDB.GRDBSendable {
}
public struct DatabaseError : Swift.Error, Swift.CustomStringConvertible, Foundation.CustomNSError {
  public var resultCode: GRDB.ResultCode {
    get
  }
  public let extendedResultCode: GRDB.ResultCode
  public let message: Swift.String?
  public let sql: Swift.String?
  public let arguments: GRDB.StatementArguments?
  public init(resultCode: GRDB.ResultCode = .SQLITE_ERROR, message: Swift.String? = nil, sql: Swift.String? = nil, arguments: GRDB.StatementArguments? = nil, publicStatementArguments: Swift.Bool = false)
  @usableFromInline
  internal init(resultCode: Swift.CInt, message: Swift.String? = nil, sql: Swift.String? = nil)
  @usableFromInline
  internal init(resultCode: Swift.CInt, message: Swift.String? = nil, sql: Swift.String? = nil, arguments: GRDB.StatementArguments?, publicStatementArguments: Swift.Bool)
}
extension GRDB.DatabaseError {
  public static let SQLITE_OK: GRDB.ResultCode
  public static let SQLITE_ERROR: GRDB.ResultCode
  public static let SQLITE_INTERNAL: GRDB.ResultCode
  public static let SQLITE_PERM: GRDB.ResultCode
  public static let SQLITE_ABORT: GRDB.ResultCode
  public static let SQLITE_BUSY: GRDB.ResultCode
  public static let SQLITE_LOCKED: GRDB.ResultCode
  public static let SQLITE_NOMEM: GRDB.ResultCode
  public static let SQLITE_READONLY: GRDB.ResultCode
  public static let SQLITE_INTERRUPT: GRDB.ResultCode
  public static let SQLITE_IOERR: GRDB.ResultCode
  public static let SQLITE_CORRUPT: GRDB.ResultCode
  public static let SQLITE_NOTFOUND: GRDB.ResultCode
  public static let SQLITE_FULL: GRDB.ResultCode
  public static let SQLITE_CANTOPEN: GRDB.ResultCode
  public static let SQLITE_PROTOCOL: GRDB.ResultCode
  public static let SQLITE_EMPTY: GRDB.ResultCode
  public static let SQLITE_SCHEMA: GRDB.ResultCode
  public static let SQLITE_TOOBIG: GRDB.ResultCode
  public static let SQLITE_CONSTRAINT: GRDB.ResultCode
  public static let SQLITE_MISMATCH: GRDB.ResultCode
  public static let SQLITE_MISUSE: GRDB.ResultCode
  public static let SQLITE_NOLFS: GRDB.ResultCode
  public static let SQLITE_AUTH: GRDB.ResultCode
  public static let SQLITE_FORMAT: GRDB.ResultCode
  public static let SQLITE_RANGE: GRDB.ResultCode
  public static let SQLITE_NOTADB: GRDB.ResultCode
  public static let SQLITE_NOTICE: GRDB.ResultCode
  public static let SQLITE_WARNING: GRDB.ResultCode
  public static let SQLITE_ROW: GRDB.ResultCode
  public static let SQLITE_DONE: GRDB.ResultCode
  public static let SQLITE_ERROR_MISSING_COLLSEQ: GRDB.ResultCode
  public static let SQLITE_ERROR_RETRY: GRDB.ResultCode
  public static let SQLITE_ERROR_SNAPSHOT: GRDB.ResultCode
  public static let SQLITE_IOERR_READ: GRDB.ResultCode
  public static let SQLITE_IOERR_SHORT_READ: GRDB.ResultCode
  public static let SQLITE_IOERR_WRITE: GRDB.ResultCode
  public static let SQLITE_IOERR_FSYNC: GRDB.ResultCode
  public static let SQLITE_IOERR_DIR_FSYNC: GRDB.ResultCode
  public static let SQLITE_IOERR_TRUNCATE: GRDB.ResultCode
  public static let SQLITE_IOERR_FSTAT: GRDB.ResultCode
  public static let SQLITE_IOERR_UNLOCK: GRDB.ResultCode
  public static let SQLITE_IOERR_RDLOCK: GRDB.ResultCode
  public static let SQLITE_IOERR_DELETE: GRDB.ResultCode
  public static let SQLITE_IOERR_BLOCKED: GRDB.ResultCode
  public static let SQLITE_IOERR_NOMEM: GRDB.ResultCode
  public static let SQLITE_IOERR_ACCESS: GRDB.ResultCode
  public static let SQLITE_IOERR_CHECKRESERVEDLOCK: GRDB.ResultCode
  public static let SQLITE_IOERR_LOCK: GRDB.ResultCode
  public static let SQLITE_IOERR_CLOSE: GRDB.ResultCode
  public static let SQLITE_IOERR_DIR_CLOSE: GRDB.ResultCode
  public static let SQLITE_IOERR_SHMOPEN: GRDB.ResultCode
  public static let SQLITE_IOERR_SHMSIZE: GRDB.ResultCode
  public static let SQLITE_IOERR_SHMLOCK: GRDB.ResultCode
  public static let SQLITE_IOERR_SHMMAP: GRDB.ResultCode
  public static let SQLITE_IOERR_SEEK: GRDB.ResultCode
  public static let SQLITE_IOERR_DELETE_NOENT: GRDB.ResultCode
  public static let SQLITE_IOERR_MMAP: GRDB.ResultCode
  public static let SQLITE_IOERR_GETTEMPPATH: GRDB.ResultCode
  public static let SQLITE_IOERR_CONVPATH: GRDB.ResultCode
  public static let SQLITE_IOERR_VNODE: GRDB.ResultCode
  public static let SQLITE_IOERR_AUTH: GRDB.ResultCode
  public static let SQLITE_IOERR_BEGIN_ATOMIC: GRDB.ResultCode
  public static let SQLITE_IOERR_COMMIT_ATOMIC: GRDB.ResultCode
  public static let SQLITE_IOERR_ROLLBACK_ATOMIC: GRDB.ResultCode
  public static let SQLITE_IOERR_DATA: GRDB.ResultCode
  public static let SQLITE_IOERR_CORRUPTFS: GRDB.ResultCode
  public static let SQLITE_LOCKED_SHAREDCACHE: GRDB.ResultCode
  public static let SQLITE_LOCKED_VTAB: GRDB.ResultCode
  public static let SQLITE_BUSY_RECOVERY: GRDB.ResultCode
  public static let SQLITE_BUSY_SNAPSHOT: GRDB.ResultCode
  public static let SQLITE_BUSY_TIMEOUT: GRDB.ResultCode
  public static let SQLITE_CANTOPEN_NOTEMPDIR: GRDB.ResultCode
  public static let SQLITE_CANTOPEN_ISDIR: GRDB.ResultCode
  public static let SQLITE_CANTOPEN_FULLPATH: GRDB.ResultCode
  public static let SQLITE_CANTOPEN_CONVPATH: GRDB.ResultCode
  public static let SQLITE_CANTOPEN_DIRTYWAL: GRDB.ResultCode
  public static let SQLITE_CANTOPEN_SYMLINK: GRDB.ResultCode
  public static let SQLITE_CORRUPT_VTAB: GRDB.ResultCode
  public static let SQLITE_CORRUPT_SEQUENCE: GRDB.ResultCode
  public static let SQLITE_CORRUPT_INDEX: GRDB.ResultCode
  public static let SQLITE_READONLY_RECOVERY: GRDB.ResultCode
  public static let SQLITE_READONLY_CANTLOCK: GRDB.ResultCode
  public static let SQLITE_READONLY_ROLLBACK: GRDB.ResultCode
  public static let SQLITE_READONLY_DBMOVED: GRDB.ResultCode
  public static let SQLITE_READONLY_CANTINIT: GRDB.ResultCode
  public static let SQLITE_READONLY_DIRECTORY: GRDB.ResultCode
  public static let SQLITE_ABORT_ROLLBACK: GRDB.ResultCode
  public static let SQLITE_CONSTRAINT_CHECK: GRDB.ResultCode
  public static let SQLITE_CONSTRAINT_COMMITHOOK: GRDB.ResultCode
  public static let SQLITE_CONSTRAINT_FOREIGNKEY: GRDB.ResultCode
  public static let SQLITE_CONSTRAINT_FUNCTION: GRDB.ResultCode
  public static let SQLITE_CONSTRAINT_NOTNULL: GRDB.ResultCode
  public static let SQLITE_CONSTRAINT_PRIMARYKEY: GRDB.ResultCode
  public static let SQLITE_CONSTRAINT_TRIGGER: GRDB.ResultCode
  public static let SQLITE_CONSTRAINT_UNIQUE: GRDB.ResultCode
  public static let SQLITE_CONSTRAINT_VTAB: GRDB.ResultCode
  public static let SQLITE_CONSTRAINT_ROWID: GRDB.ResultCode
  public static let SQLITE_CONSTRAINT_PINNED: GRDB.ResultCode
  public static let SQLITE_CONSTRAINT_DATATYPE: GRDB.ResultCode
  public static let SQLITE_NOTICE_RECOVER_WAL: GRDB.ResultCode
  public static let SQLITE_NOTICE_RECOVER_ROLLBACK: GRDB.ResultCode
  public static let SQLITE_WARNING_AUTOINDEX: GRDB.ResultCode
  public static let SQLITE_AUTH_USER: GRDB.ResultCode
  public static let SQLITE_OK_LOAD_PERMANENTLY: GRDB.ResultCode
  public static let SQLITE_OK_SYMLINK: GRDB.ResultCode
}
extension GRDB.DatabaseError {
  public var isInterruptionError: Swift.Bool {
    get
  }
}
extension GRDB.DatabaseError {
  public var description: Swift.String {
    get
  }
  public var expandedDescription: Swift.String {
    get
  }
}
extension GRDB.DatabaseError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
public struct HasManyAssociation<Origin, Destination> : GRDB.AssociationToMany {
  public typealias OriginRowDecoder = Origin
  public typealias RowDecoder = Destination
  public var _sqlAssociation: GRDB._SQLAssociation
}
extension GRDB.AnyFetchRequest {
  @available(*, unavailable, message: "Use AnyFetchRequest(request).asRequest(of: SomeType.self) instead.")
  public init<Request>(_ request: Request) where Request : GRDB.FetchRequest
  @available(*, unavailable, message: "Define your own FetchRequest type instead.")
  public init(_ prepare: @escaping (GRDB.Database, _ singleResult: Swift.Bool) throws -> (GRDB.Statement, GRDB.RowAdapter?))
}
@available(*, unavailable, message: "Custom reducers are no longer supported. See the \"Migrating From GRDB 4 to GRDB 5\" guide.")
public struct AnyValueReducer<Fetched, Value> : GRDB.ValueReducer {
  public init(fetch: @escaping (GRDB.Database) throws -> Fetched, value: @escaping (Fetched) -> Value?)
  public init<Base>(_ reducer: Base) where Fetched == Base.Fetched, Value == Base.Value, Base : GRDB._ValueReducer
  public func _fetch(_ db: GRDB.Database) throws -> Fetched
  public func _value(_ fetched: Fetched) -> Value?
}
extension GRDB.AssociationAggregate {
  @available(*, unavailable, renamed: "forKey(_:)")
  public func aliased(_ name: Swift.String) -> GRDB.AssociationAggregate<RowDecoder>
  @available(*, unavailable, renamed: "forKey(_:)")
  public func aliased(_ key: Swift.CodingKey) -> GRDB.AssociationAggregate<RowDecoder>
}
extension GRDB.Configuration {
  @available(*, unavailable, message: "Replace the assignment with a method call: prepareDatabase { db in ... }")
  public var prepareDatabase: ((GRDB.Database) throws -> Swift.Void)? {
    get
    set
  }
  @available(*, unavailable, message: "Use Database.trace(options:_:) in Configuration.prepareDatabase instead.")
  public var trace: GRDB.TraceFunction? {
    get
    set
  }
}
extension GRDB.DatabaseFunction {
  @available(*, unavailable, renamed: "callAsFunction(_:)")
  final public func apply(_ arguments: GRDB.SQLExpressible...) -> GRDB.SQLExpression
}
extension GRDB.DatabaseMigrator {
  @available(*, unavailable, renamed: "registerMigration(_:migrate:)")
  public mutating func registerMigrationWithDeferredForeignKeyCheck(_ identifier: Swift.String, migrate: @escaping (GRDB.Database) throws -> Swift.Void)
  @available(*, unavailable, message: "Wrap this method: reader.read(migrator.appliedMigrations) }")
  public func appliedMigrations(in reader: GRDB.DatabaseReader) throws -> Swift.Set<Swift.String>
  @available(*, unavailable, message: "Wrap this method: reader.read(migrator.hasCompletedMigrations) }")
  public func hasCompletedMigrations(in reader: GRDB.DatabaseReader) throws -> Swift.Bool
  @available(*, unavailable, message: "Prefer reader.read(migrator.completedMigrations).contains(targetIdentifier)")
  public func hasCompletedMigrations(in reader: GRDB.DatabaseReader, through targetIdentifier: Swift.String) throws -> Swift.Bool
  @available(*, unavailable, message: "Prefer reader.read(migrator.completedMigrations).last")
  public func lastCompletedMigration(in reader: GRDB.DatabaseReader) throws -> Swift.String?
}
extension GRDB.DatabasePool {
  @available(*, unavailable, message: "Use pool.writeWithoutTransaction { $0.checkpoint() } instead")
  final public func checkpoint(_ kind: GRDB.Database.CheckpointMode = .passive) throws
  @available(*, unavailable, message: "Memory management is now enabled by default. This method does nothing.")
  final public func setupMemoryManagement(in application: UIKit.UIApplication)
}
extension GRDB.DatabaseQueue {
  @available(*, unavailable, message: "Memory management is now enabled by default. This method does nothing.")
  final public func setupMemoryManagement(in application: UIKit.UIApplication)
}
extension GRDB.DatabaseReader {
  @available(*, unavailable, message: "Use Database.add(collation:) in Configuration.prepareDatabase instead.")
  public func add(collation: GRDB.DatabaseCollation)
  @available(*, unavailable)
  public func remove(collation: GRDB.DatabaseCollation)
  @available(*, unavailable, message: "Use Database.add(function:) in Configuration.prepareDatabase instead.")
  public func add(function: GRDB.DatabaseFunction)
  @available(*, unavailable)
  public func remove(function: GRDB.DatabaseFunction)
}
extension GRDB.FetchRequest {
  @available(*, unavailable, message: "Use ValueObservation.tracking(request.fetchCount) instead")
  public func observationForCount() -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<Swift.Int>>
}
extension GRDB.FetchRequest where Self.RowDecoder : GRDB.DatabaseValueConvertible {
  @available(*, unavailable, message: "Use ValueObservation.tracking(request.fetchAll) instead")
  public func observationForAll() -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<[Self.RowDecoder]>>
  @available(*, unavailable, message: "Use ValueObservation.tracking(request.fetchOne) instead")
  public func observationForFirst() -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<Self.RowDecoder?>>
}
extension GRDB.FetchRequest where Self.RowDecoder : GRDB.FetchableRecord {
  @available(*, unavailable, message: "Use ValueObservation.tracking(request.fetchAll) instead")
  public func observationForAll() -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<[Self.RowDecoder]>>
  @available(*, unavailable, message: "Use ValueObservation.tracking(request.fetchOne) instead")
  public func observationForFirst() -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<Self.RowDecoder?>>
}
extension GRDB.FetchRequest where Self.RowDecoder : GRDB._OptionalProtocol, Self.RowDecoder.Wrapped : GRDB.DatabaseValueConvertible {
  @available(*, unavailable, message: "Use ValueObservation.tracking(request.fetchAll) instead")
  public func observationForAll() -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<[Self.RowDecoder.Wrapped?]>>
  @available(*, unavailable, message: "Use ValueObservation.tracking(request.fetchOne) instead")
  public func observationForFirst() -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<Self.RowDecoder.Wrapped?>>
}
extension GRDB.FetchRequest where Self.RowDecoder == GRDB.Row {
  @available(*, unavailable, message: "Use ValueObservation.tracking(request.fetchAll) instead")
  public func observationForAll() -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<[GRDB.Row]>>
  @available(*, unavailable, message: "Use ValueObservation.tracking(request.fetchOne) instead")
  public func observationForFirst() -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<GRDB.Row?>>
}
extension GRDB.SQLExpression {
  @available(*, unavailable, message: "Use SQL initializer instead")
  public var sqlLiteral: GRDB.SQL {
    get
  }
}
@available(*, deprecated, renamed: "SQL")
public typealias SQLLiteral = GRDB.SQL
@available(*, deprecated, renamed: "SQL")
public typealias SQLiteral = GRDB.SQL
extension GRDB.SQL {
  @available(*, unavailable, message: "Use SQL interpolation instead.")
  public func mapSQL(_ transform: @escaping (Swift.String) -> Swift.String) -> GRDB.SQL
  @available(*, unavailable, message: "Use the build(_:) method instead.")
  public var sql: Swift.String {
    get
  }
  @available(*, unavailable, message: "Use the build(_:) method instead.")
  public var arguments: GRDB.StatementArguments {
    get
  }
}
extension GRDB.SQLRequest {
  @available(*, unavailable, message: "Turning a request into SQLRequest is no longer supported.")
  public init<Request>(_ db: GRDB.Database, request: Request, cached: Swift.Bool = false) throws where RowDecoder == Request.RowDecoder, Request : GRDB.FetchRequest
  @available(*, unavailable, message: "Use makePreparedRequest(db).statement.sql instead")
  public var sql: Swift.String {
    get
  }
  @available(*, unavailable, message: "Use makePreparedRequest(db).statement.arguments instead")
  public var arguments: GRDB.StatementArguments {
    get
  }
}
extension GRDB.SQLSpecificExpressible {
  @available(*, unavailable, renamed: "forKey(_:)")
  public func aliased(_ name: Swift.String) -> GRDB.SQLSelectable
  @available(*, unavailable, renamed: "forKey(_:)")
  public func aliased(_ key: Swift.CodingKey) -> GRDB.SQLSelectable
}
extension GRDB.Statement {
  @available(*, unavailable, renamed: "setUncheckedArguments(_:)")
  final public func unsafeSetArguments(_ arguments: GRDB.StatementArguments)
  @available(*, unavailable, renamed: "validateArguments(_:)")
  final public func validate(arguments: GRDB.StatementArguments) throws
}
extension GRDB.TableRecord {
  @available(*, unavailable, message: "Use ValueObservation.tracking(MyRecord.fetchCount) instead")
  public static func observationForCount() -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<Swift.Int>>
  @available(*, unavailable, message: "Use SQL interpolation instead")
  public static func selectionSQL(alias: Swift.String? = nil) -> Swift.String
}
extension GRDB.TableRecord where Self : GRDB.FetchableRecord {
  @available(*, unavailable, message: "Use ValueObservation.tracking(MyRecord.fetchAll) instead")
  public static func observationForAll() -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<[Self]>>
  @available(*, unavailable, message: "Use ValueObservation.tracking(MyRecord.fetchOne) instead")
  public static func observationForFirst() -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<Self?>>
}
@available(*, unavailable)
public typealias TraceFunction = (Swift.String) -> Swift.Void
extension GRDB.ValueObservation {
  @available(*, unavailable, message: "Custom reducers are no longer supported. See the \"Migrating From GRDB 4 to GRDB 5\" guide.")
  public static func tracking(_ regions: GRDB.DatabaseRegionConvertible..., reducer: @escaping (GRDB.Database) throws -> Reducer) -> GRDB.ValueObservation<Reducer>
  @available(*, unavailable, message: "Custom reducers are no longer supported. See the \"Migrating From GRDB 4 to GRDB 5\" guide.")
  public static func tracking(_ regions: [GRDB.DatabaseRegionConvertible], reducer: @escaping (GRDB.Database) throws -> Reducer) -> GRDB.ValueObservation<Reducer>
  @available(*, unavailable, message: "combine is no longer available. See the \"Migrating From GRDB 4 to GRDB 5\" guide.")
  public func combine<R1, Combined>(_ other: GRDB.ValueObservation<R1>, _ transform: @escaping (Reducer.Value, R1.Value) -> Combined) -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<Combined>> where R1 : GRDB.ValueReducer
  @available(*, unavailable, message: "combine is no longer available. See the \"Migrating From GRDB 4 to GRDB 5\" guide.")
  public func combine<R1, R2, Combined>(_ observation1: GRDB.ValueObservation<R1>, _ observation2: GRDB.ValueObservation<R2>, _ transform: @escaping (Reducer.Value, R1.Value, R2.Value) -> Combined) -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<Combined>> where R1 : GRDB.ValueReducer, R2 : GRDB.ValueReducer
  @available(*, unavailable, message: "combine is no longer available. See the \"Migrating From GRDB 4 to GRDB 5\" guide.")
  public func combine<R1, R2, R3, Combined>(_ observation1: GRDB.ValueObservation<R1>, _ observation2: GRDB.ValueObservation<R2>, _ observation3: GRDB.ValueObservation<R3>, _ transform: @escaping (Reducer.Value, R1.Value, R2.Value, R3.Value) -> Combined) -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<Combined>> where R1 : GRDB.ValueReducer, R2 : GRDB.ValueReducer, R3 : GRDB.ValueReducer
  @available(*, unavailable, message: "combine is no longer available. See the \"Migrating From GRDB 4 to GRDB 5\" guide.")
  public func combine<R1, R2, R3, R4, Combined>(_ observation1: GRDB.ValueObservation<R1>, _ observation2: GRDB.ValueObservation<R2>, _ observation3: GRDB.ValueObservation<R3>, _ observation4: GRDB.ValueObservation<R4>, _ transform: @escaping (Reducer.Value, R1.Value, R2.Value, R3.Value, R4.Value) -> Combined) -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<Combined>> where R1 : GRDB.ValueReducer, R2 : GRDB.ValueReducer, R3 : GRDB.ValueReducer, R4 : GRDB.ValueReducer
  @available(*, unavailable, message: "compactMap is no longer available. See the \"Migrating From GRDB 4 to GRDB 5\" guide.")
  public func compactMap<T>(_ transform: @escaping (Reducer.Value) -> T?) -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<T>>
  @available(*, unavailable, message: "Use start(in:onError:onChange:) instead.")
  public func start(in reader: GRDB.DatabaseReader, onChange: @escaping (Reducer.Value) -> Swift.Void) throws -> GRDB.TransactionObserver
}
extension GRDB.ValueObservation where Reducer == GRDB.ValueReducers.Auto {
  @available(*, unavailable, message: "combine is no longer available. See the \"Migrating From GRDB 4 to GRDB 5\" guide.")
  public static func combine<R1, R2>(_ o1: GRDB.ValueObservation<R1>, _ o2: GRDB.ValueObservation<R2>) -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<(R1.Value, R2.Value)>> where R1 : GRDB.ValueReducer, R2 : GRDB.ValueReducer
  @available(*, unavailable, message: "combine is no longer available. See the \"Migrating From GRDB 4 to GRDB 5\" guide.")
  public static func combine<R1, R2, R3>(_ o1: GRDB.ValueObservation<R1>, _ o2: GRDB.ValueObservation<R2>, _ o3: GRDB.ValueObservation<R3>) -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<(R1.Value, R2.Value, R3.Value)>> where R1 : GRDB.ValueReducer, R2 : GRDB.ValueReducer, R3 : GRDB.ValueReducer
  @available(*, unavailable, message: "combine is no longer available. See the \"Migrating From GRDB 4 to GRDB 5\" guide.")
  public static func combine<R1, R2, R3, R4>(_ o1: GRDB.ValueObservation<R1>, _ o2: GRDB.ValueObservation<R2>, _ o3: GRDB.ValueObservation<R3>, _ o4: GRDB.ValueObservation<R4>) -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<(R1.Value, R2.Value, R3.Value, R4.Value)>> where R1 : GRDB.ValueReducer, R2 : GRDB.ValueReducer, R3 : GRDB.ValueReducer, R4 : GRDB.ValueReducer
  @available(*, unavailable, message: "combine is no longer available. See the \"Migrating From GRDB 4 to GRDB 5\" guide.")
  public static func combine<R1, R2, R3, R4, R5>(_ o1: GRDB.ValueObservation<R1>, _ o2: GRDB.ValueObservation<R2>, _ o3: GRDB.ValueObservation<R3>, _ o4: GRDB.ValueObservation<R4>, _ o5: GRDB.ValueObservation<R5>) -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<(R1.Value, R2.Value, R3.Value, R4.Value, R5.Value)>> where R1 : GRDB.ValueReducer, R2 : GRDB.ValueReducer, R3 : GRDB.ValueReducer, R4 : GRDB.ValueReducer, R5 : GRDB.ValueReducer
  @available(*, unavailable, message: "combine is no longer available. See the \"Migrating From GRDB 4 to GRDB 5\" guide.")
  public static func combine<R1, R2, R3, R4, R5, R6>(_ o1: GRDB.ValueObservation<R1>, _ o2: GRDB.ValueObservation<R2>, _ o3: GRDB.ValueObservation<R3>, _ o4: GRDB.ValueObservation<R4>, _ o5: GRDB.ValueObservation<R5>, _ o6: GRDB.ValueObservation<R6>) -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<(R1.Value, R2.Value, R3.Value, R4.Value, R5.Value, R6.Value)>> where R1 : GRDB.ValueReducer, R2 : GRDB.ValueReducer, R3 : GRDB.ValueReducer, R4 : GRDB.ValueReducer, R5 : GRDB.ValueReducer, R6 : GRDB.ValueReducer
  @available(*, unavailable, message: "combine is no longer available. See the \"Migrating From GRDB 4 to GRDB 5\" guide.")
  public static func combine<R1, R2, R3, R4, R5, R6, R7>(_ o1: GRDB.ValueObservation<R1>, _ o2: GRDB.ValueObservation<R2>, _ o3: GRDB.ValueObservation<R3>, _ o4: GRDB.ValueObservation<R4>, _ o5: GRDB.ValueObservation<R5>, _ o6: GRDB.ValueObservation<R6>, _ o7: GRDB.ValueObservation<R7>) -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<(R1.Value, R2.Value, R3.Value, R4.Value, R5.Value, R6.Value, R7.Value)>> where R1 : GRDB.ValueReducer, R2 : GRDB.ValueReducer, R3 : GRDB.ValueReducer, R4 : GRDB.ValueReducer, R5 : GRDB.ValueReducer, R6 : GRDB.ValueReducer, R7 : GRDB.ValueReducer
  @available(*, unavailable, message: "combine is no longer available. See the \"Migrating From GRDB 4 to GRDB 5\" guide.")
  public static func combine<R1, R2, R3, R4, R5, R6, R7, R8>(_ o1: GRDB.ValueObservation<R1>, _ o2: GRDB.ValueObservation<R2>, _ o3: GRDB.ValueObservation<R3>, _ o4: GRDB.ValueObservation<R4>, _ o5: GRDB.ValueObservation<R5>, _ o6: GRDB.ValueObservation<R6>, _ o7: GRDB.ValueObservation<R7>, _ o8: GRDB.ValueObservation<R8>) -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<(R1.Value, R2.Value, R3.Value, R4.Value, R5.Value, R6.Value, R7.Value, R8.Value)>> where R1 : GRDB.ValueReducer, R2 : GRDB.ValueReducer, R3 : GRDB.ValueReducer, R4 : GRDB.ValueReducer, R5 : GRDB.ValueReducer, R6 : GRDB.ValueReducer, R7 : GRDB.ValueReducer, R8 : GRDB.ValueReducer
  @available(*, unavailable, message: "Use ValueObservation.tracking(_:) instead")
  public static func trackingCount<Request>(_ request: Request) -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<Swift.Int>> where Request : GRDB.FetchRequest
  @available(*, unavailable, message: "Use ValueObservation.tracking(_:) instead")
  public static func trackingAll<Request>(_ request: Request) -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<[Request.RowDecoder]>> where Request : GRDB.FetchRequest, Request.RowDecoder : GRDB.DatabaseValueConvertible
  @available(*, unavailable, message: "Use ValueObservation.tracking(_:) instead")
  public static func trackingOne<Request>(_ request: Request) -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<Request.RowDecoder?>> where Request : GRDB.FetchRequest, Request.RowDecoder : GRDB.DatabaseValueConvertible
  @available(*, unavailable, message: "Use ValueObservation.tracking(_:) instead")
  public static func trackingAll<Request>(_ request: Request) -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<[Request.RowDecoder.Wrapped?]>> where Request : GRDB.FetchRequest, Request.RowDecoder : GRDB._OptionalProtocol, Request.RowDecoder.Wrapped : GRDB.DatabaseValueConvertible
  @available(*, unavailable, message: "Use ValueObservation.tracking(_:) instead")
  public static func trackingAll<Request>(_ request: Request) -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<[Request.RowDecoder]>> where Request : GRDB.FetchRequest, Request.RowDecoder : GRDB.FetchableRecord
  @available(*, unavailable, message: "Use ValueObservation.tracking(_:) instead")
  public static func trackingOne<Request>(_ request: Request) -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<Request.RowDecoder?>> where Request : GRDB.FetchRequest, Request.RowDecoder : GRDB.FetchableRecord
  @available(*, unavailable, message: "Use ValueObservation.tracking(_:) instead")
  public static func trackingAll<Request>(_ request: Request) -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<[GRDB.Row]>> where Request : GRDB.FetchRequest, Request.RowDecoder == GRDB.Row
  @available(*, unavailable, message: "Use ValueObservation.tracking(_:) instead")
  public static func trackingOne<Request>(_ request: Request) -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<GRDB.Row?>> where Request : GRDB.FetchRequest, Request.RowDecoder == GRDB.Row
  @available(*, unavailable, message: "Use ValueObservation.tracking(_:) instead")
  public static func tracking<Value>(_ regions: GRDB.DatabaseRegionConvertible..., fetch: @escaping (GRDB.Database) throws -> Value) -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<Value>>
  @available(*, unavailable, message: "Use ValueObservation.tracking(_:) instead")
  public static func tracking<Value>(_ regions: [GRDB.DatabaseRegionConvertible], fetch: @escaping (GRDB.Database) throws -> Value) -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<Value>>
  @available(*, unavailable, renamed: "tracking(_:)")
  public static func tracking<Value>(value: @escaping (GRDB.Database) throws -> Value) -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<Value>>
}
extension GRDB.ValueObservation where Reducer.Value : Swift.Equatable {
  @available(*, unavailable, renamed: "removeDuplicates")
  public func distinctUntilChanged() -> GRDB.ValueObservation<GRDB.ValueReducers.Unavailable<Reducer.Value>>
}
extension GRDB.ValueReducers {
  @available(*, unavailable)
  public enum Unavailable<T> : GRDB.ValueReducer {
    public func _fetch(_ db: GRDB.Database) throws -> Swift.Never
    public mutating func _value(_ fetched: Swift.Never) -> T?
    public typealias Fetched = Swift.Never
    public typealias Value = T
  }
}
extension GRDB.Database {
  @_disfavoredOverload final public func create(table name: Swift.String, temporary: Swift.Bool = false, ifNotExists: Swift.Bool = false, withoutRowID: Swift.Bool = false, body: (GRDB.TableDefinition) throws -> Swift.Void) throws
  final public func create(table name: Swift.String, options: GRDB.TableOptions = [], body: (GRDB.TableDefinition) throws -> Swift.Void) throws
  final public func rename(table name: Swift.String, to newName: Swift.String) throws
  final public func alter(table name: Swift.String, body: (GRDB.TableAlteration) -> Swift.Void) throws
  final public func drop(table name: Swift.String) throws
  @_disfavoredOverload final public func create(index name: Swift.String, on table: Swift.String, columns: [Swift.String], unique: Swift.Bool = false, ifNotExists: Swift.Bool = false, condition: GRDB.SQLExpressible? = nil) throws
  final public func create(index name: Swift.String, on table: Swift.String, columns: [Swift.String], options: GRDB.IndexOptions = [], condition: GRDB.SQLExpressible? = nil) throws
  final public func drop(index name: Swift.String) throws
  final public func reindex(collation: GRDB.Database.CollationName) throws
  final public func reindex(collation: GRDB.DatabaseCollation) throws
}
public struct TableOptions : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let ifNotExists: GRDB.TableOptions
  public static let temporary: GRDB.TableOptions
  public static let withoutRowID: GRDB.TableOptions
  public typealias ArrayLiteralElement = GRDB.TableOptions
  public typealias Element = GRDB.TableOptions
  public typealias RawValue = Swift.Int
}
@_hasMissingDesignatedInitializers final public class TableDefinition {
  @discardableResult
  final public func autoIncrementedPrimaryKey(_ name: Swift.String, onConflict conflictResolution: GRDB.Database.ConflictResolution? = nil) -> GRDB.ColumnDefinition
  @discardableResult
  final public func column(_ name: Swift.String, _ type: GRDB.Database.ColumnType? = nil) -> GRDB.ColumnDefinition
  final public func column(sql: Swift.String)
  final public func column(literal: GRDB.SQL)
  final public func primaryKey(_ columns: [Swift.String], onConflict conflictResolution: GRDB.Database.ConflictResolution? = nil)
  final public func uniqueKey(_ columns: [Swift.String], onConflict conflictResolution: GRDB.Database.ConflictResolution? = nil)
  final public func foreignKey(_ columns: [Swift.String], references table: Swift.String, columns destinationColumns: [Swift.String]? = nil, onDelete deleteAction: GRDB.Database.ForeignKeyAction? = nil, onUpdate updateAction: GRDB.Database.ForeignKeyAction? = nil, deferred: Swift.Bool = false)
  final public func check(_ condition: GRDB.SQLExpressible)
  final public func check(sql: Swift.String)
  final public func constraint(sql: Swift.String)
  final public func constraint(literal: GRDB.SQL)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TableAlteration {
  @discardableResult
  final public func add(column name: Swift.String, _ type: GRDB.Database.ColumnType? = nil) -> GRDB.ColumnDefinition
  final public func addColumn(sql: Swift.String)
  final public func addColumn(literal: GRDB.SQL)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  final public func rename(column name: Swift.String, to newName: Swift.String)
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  final public func drop(column name: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class ColumnDefinition {
  public enum GeneratedColumnQualification {
    case virtual
    case stored
    public static func == (a: GRDB.ColumnDefinition.GeneratedColumnQualification, b: GRDB.ColumnDefinition.GeneratedColumnQualification) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @discardableResult
  final public func primaryKey(onConflict conflictResolution: GRDB.Database.ConflictResolution? = nil, autoincrement: Swift.Bool = false) -> Self
  @discardableResult
  final public func notNull(onConflict conflictResolution: GRDB.Database.ConflictResolution? = nil) -> Self
  @discardableResult
  final public func unique(onConflict conflictResolution: GRDB.Database.ConflictResolution? = nil) -> Self
  @discardableResult
  final public func indexed() -> Self
  @discardableResult
  final public func check(_ condition: (GRDB.Column) -> GRDB.SQLExpressible) -> Self
  @discardableResult
  final public func check(sql: Swift.String) -> Self
  @discardableResult
  final public func defaults(to value: GRDB.DatabaseValueConvertible) -> Self
  @discardableResult
  final public func defaults(sql: Swift.String) -> Self
  @discardableResult
  final public func collate(_ collation: GRDB.Database.CollationName) -> Self
  @discardableResult
  final public func collate(_ collation: GRDB.DatabaseCollation) -> Self
  @discardableResult
  final public func references(_ table: Swift.String, column: Swift.String? = nil, onDelete deleteAction: GRDB.Database.ForeignKeyAction? = nil, onUpdate updateAction: GRDB.Database.ForeignKeyAction? = nil, deferred: Swift.Bool = false) -> Self
  @objc deinit
}
public struct IndexOptions : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let ifNotExists: GRDB.IndexOptions
  public static let unique: GRDB.IndexOptions
  public typealias ArrayLiteralElement = GRDB.IndexOptions
  public typealias Element = GRDB.IndexOptions
  public typealias RawValue = Swift.Int
}
public struct SQLSubquery {
}
public protocol SQLSubqueryable : GRDB.SQLSpecificExpressible {
  var sqlSubquery: GRDB.SQLSubquery { get }
}
extension GRDB.SQLSubquery : GRDB.SQLSubqueryable {
  @available(*, deprecated, message: "Already SQLSubquery")
  public var sqlSubquery: GRDB.SQLSubquery {
    get
  }
}
extension GRDB.SQLSubqueryable {
  public var sqlExpression: GRDB.SQLExpression {
    get
  }
}
extension GRDB.SQLSubqueryable {
  public func contains(_ element: GRDB.SQLExpressible) -> GRDB.SQLExpression
  public func exists() -> GRDB.SQLExpression
}
public struct SQLRequest<RowDecoder> {
  public var adapter: GRDB.RowAdapter?
}
extension GRDB.SQLRequest {
  public init(sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments(), adapter: GRDB.RowAdapter? = nil, cached: Swift.Bool = false)
  public init(literal sqlLiteral: GRDB.SQL, adapter: GRDB.RowAdapter? = nil, cached: Swift.Bool = false)
}
extension GRDB.SQLRequest where RowDecoder == GRDB.Row {
  public init(sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments(), adapter: GRDB.RowAdapter? = nil, cached: Swift.Bool = false)
  public init(literal sqlLiteral: GRDB.SQL, adapter: GRDB.RowAdapter? = nil, cached: Swift.Bool = false)
}
extension GRDB.SQLRequest : GRDB.FetchRequest {
  public var sqlSubquery: GRDB.SQLSubquery {
    get
  }
  public func fetchCount(_ db: GRDB.Database) throws -> Swift.Int
  public func makePreparedRequest(_ db: GRDB.Database, forSingleResult singleResult: Swift.Bool = false) throws -> GRDB.PreparedRequest
}
extension GRDB.SQLRequest : Swift.ExpressibleByStringInterpolation {
  public init(unicodeScalarLiteral: Swift.String)
  public init(extendedGraphemeClusterLiteral: Swift.String)
  public init(stringLiteral: Swift.String)
  public init(stringInterpolation sqlInterpolation: GRDB.SQLInterpolation)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringInterpolation = GRDB.SQLInterpolation
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
@usableFromInline
internal struct SQLiteDateParser {
  @usableFromInline
  internal init()
  @usableFromInline
  internal func components(cString: Swift.UnsafePointer<Swift.CChar>, length: Swift.Int) -> GRDB.DatabaseDateComponents?
}
extension Foundation.NSNumber : GRDB.DatabaseValueConvertible {
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> Self?
}
public struct DatabaseRegionObservation {
  public var extent: GRDB.Database.TransactionObservationExtent
}
extension GRDB.DatabaseRegionObservation {
  public init(tracking regions: GRDB.DatabaseRegionConvertible...)
  public init(tracking regions: [GRDB.DatabaseRegionConvertible])
}
extension GRDB.DatabaseRegionObservation {
  public func start(in dbWriter: GRDB.DatabaseWriter, onChange: @escaping (GRDB.Database) -> Swift.Void) throws -> GRDB.TransactionObserver
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension GRDB.DatabaseRegionObservation {
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  public func publisher(in writer: GRDB.DatabaseWriter) -> GRDB.DatabasePublishers.DatabaseRegion
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension GRDB.DatabasePublishers {
  public struct DatabaseRegion : Combine.Publisher {
    public typealias Output = GRDB.Database
    public typealias Failure = Swift.Error
    public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Error, S.Input == GRDB.Database
  }
}
public struct FTS4 : GRDB.VirtualTableModule {
  public init()
  public let moduleName: Swift.String
  public func makeTableDefinition() -> GRDB.FTS4TableDefinition
  public func makeTableDefinition(configuration: GRDB.VirtualTableConfiguration) -> GRDB.FTS4TableDefinition
  public func moduleArguments(for definition: GRDB.FTS4TableDefinition, in db: GRDB.Database) -> [Swift.String]
  public func database(_ db: GRDB.Database, didCreate tableName: Swift.String, using definition: GRDB.FTS4TableDefinition) throws
  public typealias TableDefinition = GRDB.FTS4TableDefinition
}
@_hasMissingDesignatedInitializers final public class FTS4TableDefinition {
  final public var tokenizer: GRDB.FTS3TokenizerDescriptor?
  final public var content: Swift.String? {
    get
    set
  }
  final public var compress: Swift.String?
  final public var uncompress: Swift.String?
  final public var matchinfo: Swift.String?
  final public var prefixes: Swift.Set<Swift.Int>?
  @discardableResult
  final public func column(_ name: Swift.String) -> GRDB.FTS4ColumnDefinition
  final public func synchronize(withTable tableName: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FTS4ColumnDefinition {
  @discardableResult
  final public func notIndexed() -> Self
  @discardableResult
  final public func asLanguageId() -> Self
  @objc deinit
}
extension GRDB.Database {
  final public func dropFTS4SynchronizationTriggers(forTable tableName: Swift.String) throws
}
extension GRDB.ValueReducers {
  public struct Trace<Base> : GRDB.ValueReducer where Base : GRDB.ValueReducer {
    public func _fetch(_ db: GRDB.Database) throws -> Base.Fetched
    public mutating func _value(_ fetched: Base.Fetched) -> Base.Value?
    public typealias Fetched = Base.Fetched
    public typealias Value = Base.Value
  }
}
extension Swift.Bool : GRDB.DatabaseValueConvertible, GRDB.StatementColumnConvertible {
  public init(sqliteStatement: GRDB.SQLiteStatement, index: Swift.Int32)
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> Swift.Bool?
  public func bind(to sqliteStatement: GRDB.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension Swift.Int : GRDB.DatabaseValueConvertible, GRDB.StatementColumnConvertible {
  @inline(__always) @inlinable public init?(sqliteStatement: GRDB.SQLiteStatement, index: Swift.Int32) {
        let int64 = sqlite3_column_int64(sqliteStatement, index)
        guard let v = Int(exactly: int64) else { return nil }
        self = v
    }
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> Swift.Int?
  public func bind(to sqliteStatement: GRDB.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension Swift.Int8 : GRDB.DatabaseValueConvertible, GRDB.StatementColumnConvertible {
  @inline(__always) @inlinable public init?(sqliteStatement: GRDB.SQLiteStatement, index: Swift.Int32) {
        let int64 = sqlite3_column_int64(sqliteStatement, index)
        guard let v = Int8(exactly: int64) else { return nil }
        self = v
    }
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> Swift.Int8?
  public func bind(to sqliteStatement: GRDB.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension Swift.Int16 : GRDB.DatabaseValueConvertible, GRDB.StatementColumnConvertible {
  @inline(__always) @inlinable public init?(sqliteStatement: GRDB.SQLiteStatement, index: Swift.Int32) {
        let int64 = sqlite3_column_int64(sqliteStatement, index)
        guard let v = Int16(exactly: int64) else { return nil }
        self = v
    }
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> Swift.Int16?
  public func bind(to sqliteStatement: GRDB.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension Swift.Int32 : GRDB.DatabaseValueConvertible, GRDB.StatementColumnConvertible {
  @inline(__always) @inlinable public init?(sqliteStatement: GRDB.SQLiteStatement, index: Swift.Int32) {
        let int64 = sqlite3_column_int64(sqliteStatement, index)
        guard let v = Int32(exactly: int64) else { return nil }
        self = v
    }
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> Swift.Int32?
  public func bind(to sqliteStatement: GRDB.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension Swift.Int64 : GRDB.DatabaseValueConvertible, GRDB.StatementColumnConvertible {
  public init(sqliteStatement: GRDB.SQLiteStatement, index: Swift.Int32)
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> Swift.Int64?
  public func bind(to sqliteStatement: GRDB.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension Swift.UInt : GRDB.DatabaseValueConvertible, GRDB.StatementColumnConvertible {
  @inline(__always) @inlinable public init?(sqliteStatement: GRDB.SQLiteStatement, index: Swift.Int32) {
        let int64 = sqlite3_column_int64(sqliteStatement, index)
        guard let v = UInt(exactly: int64) else { return nil }
        self = v
    }
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> Swift.UInt?
  public func bind(to sqliteStatement: GRDB.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension Swift.UInt8 : GRDB.DatabaseValueConvertible, GRDB.StatementColumnConvertible {
  @inline(__always) @inlinable public init?(sqliteStatement: GRDB.SQLiteStatement, index: Swift.Int32) {
        let int64 = sqlite3_column_int64(sqliteStatement, index)
        guard let v = UInt8(exactly: int64) else { return nil }
        self = v
    }
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> Swift.UInt8?
  public func bind(to sqliteStatement: GRDB.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension Swift.UInt16 : GRDB.DatabaseValueConvertible, GRDB.StatementColumnConvertible {
  @inline(__always) @inlinable public init?(sqliteStatement: GRDB.SQLiteStatement, index: Swift.Int32) {
        let int64 = sqlite3_column_int64(sqliteStatement, index)
        guard let v = UInt16(exactly: int64) else { return nil }
        self = v
    }
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> Swift.UInt16?
  public func bind(to sqliteStatement: GRDB.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension Swift.UInt32 : GRDB.DatabaseValueConvertible, GRDB.StatementColumnConvertible {
  @inline(__always) @inlinable public init?(sqliteStatement: GRDB.SQLiteStatement, index: Swift.Int32) {
        let int64 = sqlite3_column_int64(sqliteStatement, index)
        guard let v = UInt32(exactly: int64) else { return nil }
        self = v
    }
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> Swift.UInt32?
  public func bind(to sqliteStatement: GRDB.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension Swift.UInt64 : GRDB.DatabaseValueConvertible, GRDB.StatementColumnConvertible {
  @inline(__always) @inlinable public init?(sqliteStatement: GRDB.SQLiteStatement, index: Swift.Int32) {
        let int64 = sqlite3_column_int64(sqliteStatement, index)
        guard let v = UInt64(exactly: int64) else { return nil }
        self = v
    }
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> Swift.UInt64?
  public func bind(to sqliteStatement: GRDB.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension Swift.Double : GRDB.DatabaseValueConvertible, GRDB.StatementColumnConvertible {
  public init(sqliteStatement: GRDB.SQLiteStatement, index: Swift.Int32)
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> Swift.Double?
  public func bind(to sqliteStatement: GRDB.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension Swift.Float : GRDB.DatabaseValueConvertible, GRDB.StatementColumnConvertible {
  public init(sqliteStatement: GRDB.SQLiteStatement, index: Swift.Int32)
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> Swift.Float?
  public func bind(to sqliteStatement: GRDB.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension Swift.String : GRDB.DatabaseValueConvertible, GRDB.StatementColumnConvertible {
  public init(sqliteStatement: GRDB.SQLiteStatement, index: Swift.Int32)
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> Swift.String?
  public func bind(to sqliteStatement: GRDB.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension GRDB.DatabaseFunction {
  public static let capitalize: GRDB.DatabaseFunction
  public static let lowercase: GRDB.DatabaseFunction
  public static let uppercase: GRDB.DatabaseFunction
}
extension GRDB.DatabaseFunction {
  @available(macOS 10.11, watchOS 3.0, *)
  public static let localizedCapitalize: GRDB.DatabaseFunction
  @available(macOS 10.11, watchOS 3.0, *)
  public static let localizedLowercase: GRDB.DatabaseFunction
  @available(macOS 10.11, watchOS 3.0, *)
  public static let localizedUppercase: GRDB.DatabaseFunction
}
extension GRDB.DatabaseCollation {
  public static let unicodeCompare: GRDB.DatabaseCollation
  public static let caseInsensitiveCompare: GRDB.DatabaseCollation
  public static let localizedCaseInsensitiveCompare: GRDB.DatabaseCollation
  public static let localizedCompare: GRDB.DatabaseCollation
  public static let localizedStandardCompare: GRDB.DatabaseCollation
}
extension GRDB.SQLInterpolation {
  public mutating func appendInterpolation<T>(_ table: T.Type) where T : GRDB.TableRecord
  @_disfavoredOverload public mutating func appendInterpolation(_ table: GRDB.TableRecord.Type)
  public mutating func appendInterpolation<T>(tableOf record: T) where T : GRDB.TableRecord
  @_disfavoredOverload public mutating func appendInterpolation(tableOf record: GRDB.TableRecord)
  public mutating func appendInterpolation<T>(columnsOf record: T.Type, tableAlias: Swift.String? = nil) where T : GRDB.TableRecord
  public mutating func appendInterpolation<T>(_ selection: T) where T : GRDB.SQLSelectable
  @_disfavoredOverload public mutating func appendInterpolation(_ selection: GRDB.SQLSelectable?)
  public mutating func appendInterpolation<T>(_ orderingTerm: T) where T : GRDB.SQLOrderingTerm
  @_disfavoredOverload public mutating func appendInterpolation(_ orderingTerm: GRDB.SQLOrderingTerm)
  public mutating func appendInterpolation<T>(_ expressible: T) where T : GRDB.SQLExpressible, T : GRDB.SQLOrderingTerm, T : GRDB.SQLSelectable
  @_disfavoredOverload public mutating func appendInterpolation(_ expressible: GRDB.SQLExpressible?)
  public mutating func appendInterpolation<T>(_ key: T) where T : Swift.CodingKey
  public mutating func appendInterpolation<T>(_ key: T) where T : GRDB.SQLExpressible, T : GRDB.SQLOrderingTerm, T : GRDB.SQLSelectable, T : Swift.CodingKey
  @_disfavoredOverload public mutating func appendInterpolation(_ key: Swift.CodingKey)
  public mutating func appendInterpolation<T>(_ subquery: T) where T : GRDB.SQLSubqueryable
  public mutating func appendInterpolation<T>(_ sequence: T) where T : Swift.Sequence, T.Element : GRDB.SQLExpressible
  public mutating func appendInterpolation<T>(_ sequence: T) where T : Swift.Sequence, T.Element == GRDB.SQLExpressible
  public mutating func appendInterpolation<T>(_ expressible: T) where T : GRDB.SQLExpressible, T : Swift.Sequence, T.Element : GRDB.SQLExpressible
  public mutating func appendInterpolation<T>(_ cte: GRDB.CommonTableExpression<T>)
  public mutating func appendInterpolation<T>(definitionFor cte: GRDB.CommonTableExpression<T>)
  public mutating func appendInterpolation(_ collation: GRDB.DatabaseCollation)
  public mutating func appendInterpolation(_ collation: GRDB.Database.CollationName)
}
@usableFromInline
internal enum RowKey : Swift.Hashable, GRDB.GRDBSendable {
  case columnName(Swift.String)
  case columnIndex(Swift.Int)
  case scope(Swift.String)
  case prefetchKey(Swift.String)
  @usableFromInline
  internal func hash(into hasher: inout Swift.Hasher)
  @usableFromInline
  internal static func == (a: GRDB.RowKey, b: GRDB.RowKey) -> Swift.Bool
  @usableFromInline
  internal var hashValue: Swift.Int {
    @usableFromInline
    get
  }
}
@usableFromInline
internal enum RowDecodingError : Swift.Error {
  @usableFromInline
  internal struct Context : Swift.CustomDebugStringConvertible, GRDB.GRDBSendable {
    @usableFromInline
    internal let debugDescription: Swift.String
  }
  case keyNotFound(GRDB.RowKey, GRDB.RowDecodingError.Context)
  case valueMismatch(Any.Type, GRDB.RowDecodingError.Context)
  @usableFromInline
  internal static func valueMismatch(_ type: Any.Type, sqliteStatement: GRDB.SQLiteStatement, index: Swift.Int32, context: GRDB.RowDecodingContext) -> GRDB.RowDecodingError
  @usableFromInline
  internal static func columnNotFound(_ columnName: Swift.String, context: GRDB.RowDecodingContext) -> GRDB.RowDecodingError
}
@usableFromInline
internal struct RowDecodingContext {
  @usableFromInline
  internal init(row: GRDB.Row, key: GRDB.RowKey? = nil)
  @usableFromInline
  internal init(statement: GRDB.Statement, index: Swift.Int)
}
extension GRDB.RowDecodingError : Swift.CustomStringConvertible {
  @usableFromInline
  internal var description: Swift.String {
    get
  }
}
public enum PersistenceError : Swift.Error, Swift.CustomStringConvertible {
  case recordNotFound(databaseTableName: Swift.String, key: [Swift.String : GRDB.DatabaseValue])
}
extension GRDB.PersistenceError {
  public var description: Swift.String {
    get
  }
}
public struct PersistenceConflictPolicy {
  public let conflictResolutionForInsert: GRDB.Database.ConflictResolution
  public let conflictResolutionForUpdate: GRDB.Database.ConflictResolution
  public init(insert: GRDB.Database.ConflictResolution = .abort, update: GRDB.Database.ConflictResolution = .abort)
}
public protocol MutablePersistableRecord : GRDB.EncodableRecord, GRDB.TableRecord {
  static var persistenceConflictPolicy: GRDB.PersistenceConflictPolicy { get }
  mutating func didInsert(with rowID: Swift.Int64, for column: Swift.String?)
  mutating func insert(_ db: GRDB.Database) throws
  func update(_ db: GRDB.Database, columns: Swift.Set<Swift.String>) throws
  mutating func save(_ db: GRDB.Database) throws
  @discardableResult
  func delete(_ db: GRDB.Database) throws -> Swift.Bool
  func exists(_ db: GRDB.Database) throws -> Swift.Bool
}
extension GRDB.MutablePersistableRecord {
  public static var persistenceConflictPolicy: GRDB.PersistenceConflictPolicy {
    get
  }
  public mutating func didInsert(with rowID: Swift.Int64, for column: Swift.String?)
  public mutating func insert(_ db: GRDB.Database) throws
  public func inserted(_ db: GRDB.Database) throws -> Self
  public func update(_ db: GRDB.Database, columns: Swift.Set<Swift.String>) throws
  public func update<Sequence>(_ db: GRDB.Database, columns: Sequence) throws where Sequence : Swift.Sequence, Sequence.Element : GRDB.ColumnExpression
  public func update<Sequence>(_ db: GRDB.Database, columns: Sequence) throws where Sequence : Swift.Sequence, Sequence.Element == Swift.String
  public func update(_ db: GRDB.Database) throws
  @discardableResult
  public func updateChanges<Record>(_ db: GRDB.Database, from record: Record) throws -> Swift.Bool where Record : GRDB.MutablePersistableRecord
  @discardableResult
  public mutating func updateChanges(_ db: GRDB.Database, with change: (inout Self) throws -> Swift.Void) throws -> Swift.Bool
  public mutating func save(_ db: GRDB.Database) throws
  public func saved(_ db: GRDB.Database) throws -> Self
  @discardableResult
  public func delete(_ db: GRDB.Database) throws -> Swift.Bool
  public func exists(_ db: GRDB.Database) throws -> Swift.Bool
  public mutating func performInsert(_ db: GRDB.Database) throws
  public func performUpdate(_ db: GRDB.Database, columns: Swift.Set<Swift.String>) throws
  public mutating func performSave(_ db: GRDB.Database) throws
  public func performDelete(_ db: GRDB.Database) throws -> Swift.Bool
  public func performExists(_ db: GRDB.Database) throws -> Swift.Bool
}
extension GRDB.MutablePersistableRecord where Self : AnyObject {
  @discardableResult
  public func updateChanges(_ db: GRDB.Database, with change: (Self) throws -> Swift.Void) throws -> Swift.Bool
}
public protocol PersistableRecord : GRDB.MutablePersistableRecord {
  func didInsert(with rowID: Swift.Int64, for column: Swift.String?)
  func insert(_ db: GRDB.Database) throws
  func save(_ db: GRDB.Database) throws
}
extension GRDB.PersistableRecord {
  public func didInsert(with rowID: Swift.Int64, for column: Swift.String?)
  public func insert(_ db: GRDB.Database) throws
  public func save(_ db: GRDB.Database) throws
  public func performInsert(_ db: GRDB.Database) throws
  public func performSave(_ db: GRDB.Database) throws
}
public protocol _ValueReducer {
  associatedtype Fetched
  associatedtype Value
  func _fetch(_ db: GRDB.Database) throws -> Self.Fetched
  mutating func _value(_ fetched: Self.Fetched) -> Self.Value?
}
public protocol ValueReducer : GRDB._ValueReducer {
}
public enum ValueReducers {
  public enum Auto : GRDB.ValueReducer {
    public func _fetch(_ db: GRDB.Database) throws -> Swift.Never
    public mutating func _value(_ fetched: Swift.Never) -> Swift.Never?
    public typealias Fetched = Swift.Never
    public typealias Value = Swift.Never
  }
}
public protocol StatementColumnConvertible {
  init?(sqliteStatement: GRDB.SQLiteStatement, index: Swift.Int32)
}
extension GRDB.DatabaseValueConvertible where Self : GRDB.StatementColumnConvertible {
  @usableFromInline
  internal static func _valueMismatch(fromStatement sqliteStatement: GRDB.SQLiteStatement, atUncheckedIndex index: Swift.Int32, context: @autoclosure () -> GRDB.RowDecodingContext) throws -> Swift.Never
  @inline(__always) @inlinable internal static func fastDecode(fromStatement sqliteStatement: GRDB.SQLiteStatement, atUncheckedIndex index: Swift.Int32, context: @autoclosure () -> GRDB.RowDecodingContext) throws -> Self {
        guard sqlite3_column_type(sqliteStatement, index) != SQLITE_NULL,
              let value = self.init(sqliteStatement: sqliteStatement, index: index)
        else {
            try _valueMismatch(fromStatement: sqliteStatement, atUncheckedIndex: index, context: context())
        }
        return value
    }
  @inline(__always) @inlinable internal static func fastDecode(fromRow row: GRDB.Row, atUncheckedIndex index: Swift.Int) throws -> Self {
        if let sqliteStatement = row.sqliteStatement {
            return try fastDecode(
                fromStatement: sqliteStatement,
                atUncheckedIndex: Int32(index),
                context: RowDecodingContext(row: row, key: .columnIndex(index)))
        }
        // Support for fast decoding from adapted rows
        return try row.fastDecode(Self.self, atUncheckedIndex: index)
    }
  @inline(__always) @inlinable internal static func fastDecodeIfPresent(fromStatement sqliteStatement: GRDB.SQLiteStatement, atUncheckedIndex index: Swift.Int32, context: @autoclosure () -> GRDB.RowDecodingContext) throws -> Self? {
        if sqlite3_column_type(sqliteStatement, index) == SQLITE_NULL {
            return nil
        }
        guard let value = self.init(sqliteStatement: sqliteStatement, index: index) else {
            try _valueMismatch(fromStatement: sqliteStatement, atUncheckedIndex: index, context: context())
        }
        return value
    }
  @inline(__always) @inlinable internal static func fastDecodeIfPresent(fromRow row: GRDB.Row, atUncheckedIndex index: Swift.Int) throws -> Self? {
        if let sqliteStatement = row.sqliteStatement {
            return try fastDecodeIfPresent(
                fromStatement: sqliteStatement,
                atUncheckedIndex: Int32(index),
                context: RowDecodingContext(row: row, key: .columnIndex(index)))
        }
        // Support for fast decoding from adapted rows
        return try row.fastDecodeIfPresent(Self.self, atUncheckedIndex: index)
    }
}
@_hasMissingDesignatedInitializers final public class FastDatabaseValueCursor<Value> : GRDB.DatabaseCursor where Value : GRDB.DatabaseValueConvertible, Value : GRDB.StatementColumnConvertible {
  public typealias Element = Value
  final public let statement: GRDB.Statement
  final public var _isDone: Swift.Bool
  @usableFromInline
  final internal let columnIndex: Swift.Int32
  @objc deinit
  @inlinable final public func _element(sqliteStatement: GRDB.SQLiteStatement) -> Value {
        // TODO GRDB6: don't crash on decoding errors
        try! Value.fastDecode(
            fromStatement: sqliteStatement,
            atUncheckedIndex: columnIndex,
            context: RowDecodingContext(statement: statement, index: Int(columnIndex)))
    }
}
@_hasMissingDesignatedInitializers final public class FastNullableDatabaseValueCursor<Value> : GRDB.DatabaseCursor where Value : GRDB.DatabaseValueConvertible, Value : GRDB.StatementColumnConvertible {
  public typealias Element = Value?
  final public let statement: GRDB.Statement
  final public var _isDone: Swift.Bool
  @usableFromInline
  final internal let columnIndex: Swift.Int32
  @objc deinit
  @inlinable final public func _element(sqliteStatement: GRDB.SQLiteStatement) -> Value? {
        // TODO GRDB6: don't crash on decoding errors
        try! Value.fastDecodeIfPresent(
            fromStatement: sqliteStatement,
            atUncheckedIndex: columnIndex,
            context: RowDecodingContext(statement: statement, index: Int(columnIndex)))
    }
}
extension GRDB.DatabaseValueConvertible where Self : GRDB.StatementColumnConvertible {
  public static func fetchCursor(_ statement: GRDB.Statement, arguments: GRDB.StatementArguments? = nil, adapter: GRDB.RowAdapter? = nil) throws -> GRDB.FastDatabaseValueCursor<Self>
  public static func fetchAll(_ statement: GRDB.Statement, arguments: GRDB.StatementArguments? = nil, adapter: GRDB.RowAdapter? = nil) throws -> [Self]
  public static func fetchOne(_ statement: GRDB.Statement, arguments: GRDB.StatementArguments? = nil, adapter: GRDB.RowAdapter? = nil) throws -> Self?
}
extension GRDB.DatabaseValueConvertible where Self : GRDB.StatementColumnConvertible, Self : Swift.Hashable {
  public static func fetchSet(_ statement: GRDB.Statement, arguments: GRDB.StatementArguments? = nil, adapter: GRDB.RowAdapter? = nil) throws -> Swift.Set<Self>
}
extension GRDB.DatabaseValueConvertible where Self : GRDB.StatementColumnConvertible {
  public static func fetchCursor(_ db: GRDB.Database, sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments(), adapter: GRDB.RowAdapter? = nil) throws -> GRDB.FastDatabaseValueCursor<Self>
  public static func fetchAll(_ db: GRDB.Database, sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments(), adapter: GRDB.RowAdapter? = nil) throws -> [Self]
  public static func fetchOne(_ db: GRDB.Database, sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments(), adapter: GRDB.RowAdapter? = nil) throws -> Self?
}
extension GRDB.DatabaseValueConvertible where Self : GRDB.StatementColumnConvertible, Self : Swift.Hashable {
  public static func fetchSet(_ db: GRDB.Database, sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments(), adapter: GRDB.RowAdapter? = nil) throws -> Swift.Set<Self>
}
extension GRDB.DatabaseValueConvertible where Self : GRDB.StatementColumnConvertible {
  public static func fetchCursor<R>(_ db: GRDB.Database, _ request: R) throws -> GRDB.FastDatabaseValueCursor<Self> where R : GRDB.FetchRequest
  public static func fetchAll<R>(_ db: GRDB.Database, _ request: R) throws -> [Self] where R : GRDB.FetchRequest
  public static func fetchOne<R>(_ db: GRDB.Database, _ request: R) throws -> Self? where R : GRDB.FetchRequest
}
extension GRDB.DatabaseValueConvertible where Self : GRDB.StatementColumnConvertible, Self : Swift.Hashable {
  public static func fetchSet<R>(_ db: GRDB.Database, _ request: R) throws -> Swift.Set<Self> where R : GRDB.FetchRequest
}
extension GRDB.FetchRequest where Self.RowDecoder : GRDB.DatabaseValueConvertible, Self.RowDecoder : GRDB.StatementColumnConvertible {
  public func fetchCursor(_ db: GRDB.Database) throws -> GRDB.FastDatabaseValueCursor<Self.RowDecoder>
  public func fetchAll(_ db: GRDB.Database) throws -> [Self.RowDecoder]
  public func fetchOne(_ db: GRDB.Database) throws -> Self.RowDecoder?
}
extension GRDB.FetchRequest where Self.RowDecoder : GRDB.DatabaseValueConvertible, Self.RowDecoder : GRDB.StatementColumnConvertible, Self.RowDecoder : Swift.Hashable {
  public func fetchSet(_ db: GRDB.Database) throws -> Swift.Set<Self.RowDecoder>
}
extension Swift.Optional where Wrapped : GRDB.DatabaseValueConvertible, Wrapped : GRDB.StatementColumnConvertible {
  public static func fetchCursor(_ statement: GRDB.Statement, arguments: GRDB.StatementArguments? = nil, adapter: GRDB.RowAdapter? = nil) throws -> GRDB.FastNullableDatabaseValueCursor<Wrapped>
  public static func fetchAll(_ statement: GRDB.Statement, arguments: GRDB.StatementArguments? = nil, adapter: GRDB.RowAdapter? = nil) throws -> [Wrapped?]
}
extension Swift.Optional where Wrapped : GRDB.DatabaseValueConvertible, Wrapped : GRDB.StatementColumnConvertible, Wrapped : Swift.Hashable {
  public static func fetchSet(_ statement: GRDB.Statement, arguments: GRDB.StatementArguments? = nil, adapter: GRDB.RowAdapter? = nil) throws -> Swift.Set<Wrapped?>
}
extension Swift.Optional where Wrapped : GRDB.DatabaseValueConvertible, Wrapped : GRDB.StatementColumnConvertible {
  public static func fetchCursor(_ db: GRDB.Database, sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments(), adapter: GRDB.RowAdapter? = nil) throws -> GRDB.FastNullableDatabaseValueCursor<Wrapped>
  public static func fetchAll(_ db: GRDB.Database, sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments(), adapter: GRDB.RowAdapter? = nil) throws -> [Wrapped?]
}
extension Swift.Optional where Wrapped : GRDB.DatabaseValueConvertible, Wrapped : GRDB.StatementColumnConvertible, Wrapped : Swift.Hashable {
  public static func fetchSet(_ db: GRDB.Database, sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments(), adapter: GRDB.RowAdapter? = nil) throws -> Swift.Set<Wrapped?>
}
extension Swift.Optional where Wrapped : GRDB.DatabaseValueConvertible, Wrapped : GRDB.StatementColumnConvertible {
  public static func fetchCursor<R>(_ db: GRDB.Database, _ request: R) throws -> GRDB.FastNullableDatabaseValueCursor<Wrapped> where R : GRDB.FetchRequest
  public static func fetchAll<R>(_ db: GRDB.Database, _ request: R) throws -> [Wrapped?] where R : GRDB.FetchRequest
}
extension Swift.Optional where Wrapped : GRDB.DatabaseValueConvertible, Wrapped : GRDB.StatementColumnConvertible, Wrapped : Swift.Hashable {
  public static func fetchSet<R>(_ db: GRDB.Database, _ request: R) throws -> Swift.Set<Wrapped?> where R : GRDB.FetchRequest
}
extension GRDB.FetchRequest where Self.RowDecoder : GRDB._OptionalProtocol, Self.RowDecoder.Wrapped : GRDB.DatabaseValueConvertible, Self.RowDecoder.Wrapped : GRDB.StatementColumnConvertible {
  public func fetchCursor(_ db: GRDB.Database) throws -> GRDB.FastNullableDatabaseValueCursor<Self.RowDecoder.Wrapped>
  public func fetchAll(_ db: GRDB.Database) throws -> [Self.RowDecoder.Wrapped?]
  public func fetchOne(_ db: GRDB.Database) throws -> Self.RowDecoder.Wrapped?
}
extension GRDB.FetchRequest where Self.RowDecoder : GRDB._OptionalProtocol, Self.RowDecoder.Wrapped : GRDB.DatabaseValueConvertible, Self.RowDecoder.Wrapped : GRDB.StatementColumnConvertible, Self.RowDecoder.Wrapped : Swift.Hashable {
  public func fetchSet(_ db: GRDB.Database) throws -> Swift.Set<Self.RowDecoder.Wrapped?>
}
extension GRDB.ValueObservation {
  public func map<T>(_ transform: @escaping (Reducer.Value) -> T) -> GRDB.ValueObservation<GRDB.ValueReducers.Map<Reducer, T>>
}
extension GRDB.ValueReducers {
  public struct Map<Base, Value> : GRDB.ValueReducer where Base : GRDB.ValueReducer {
    public func _fetch(_ db: GRDB.Database) throws -> Base.Fetched
    public mutating func _value(_ fetched: Base.Fetched) -> Value?
    public typealias Fetched = Base.Fetched
  }
}
public struct SQL {
  public init(sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments())
  public init(_ expression: GRDB.SQLSpecificExpressible)
  public var isEmpty: Swift.Bool {
    get
  }
  public func build(_ db: GRDB.Database) throws -> (sql: Swift.String, arguments: GRDB.StatementArguments)
}
extension GRDB.SQL {
  public static func + (lhs: GRDB.SQL, rhs: GRDB.SQL) -> GRDB.SQL
  public static func += (lhs: inout GRDB.SQL, rhs: GRDB.SQL)
  public mutating func append(literal sqlLiteral: GRDB.SQL)
  public mutating func append(sql: Swift.String, arguments: GRDB.StatementArguments = StatementArguments())
}
extension GRDB.SQL : GRDB.SQLSpecificExpressible {
  public var sqlExpression: GRDB.SQLExpression {
    get
  }
}
extension GRDB.SQL : GRDB.SQLSelectable {
  public var sqlSelection: GRDB.SQLSelection {
    get
  }
}
extension GRDB.SQL : GRDB.SQLOrderingTerm {
  public var sqlOrdering: GRDB.SQLOrdering {
    get
  }
}
extension Swift.Sequence where Self.Element == GRDB.SQL {
  public func joined(separator: Swift.String = "") -> GRDB.SQL
}
extension Swift.Collection where Self.Element == GRDB.SQL {
  public func joined(separator: Swift.String = "") -> GRDB.SQL
}
extension GRDB.SQL : Swift.ExpressibleByStringInterpolation {
  public init(unicodeScalarLiteral: Swift.String)
  public init(extendedGraphemeClusterLiteral: Swift.String)
  public init(stringLiteral: Swift.String)
  public init(stringInterpolation sqlInterpolation: GRDB.SQLInterpolation)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringInterpolation = GRDB.SQLInterpolation
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension Foundation.NSData : GRDB.DatabaseValueConvertible {
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> Self?
}
public struct DatabaseValue : Swift.Hashable, Swift.CustomStringConvertible, GRDB.DatabaseValueConvertible, GRDB.SQLSpecificExpressible {
  public let storage: GRDB.DatabaseValue.Storage
  public static let null: GRDB.DatabaseValue
  @frozen public enum Storage : Swift.Equatable {
    case null
    case int64(Swift.Int64)
    case double(Swift.Double)
    case string(Swift.String)
    case blob(Foundation.Data)
    public var value: GRDB.DatabaseValueConvertible? {
      get
    }
    public static func == (lhs: GRDB.DatabaseValue.Storage, rhs: GRDB.DatabaseValue.Storage) -> Swift.Bool
  }
  public init?(value: Any)
  public var isNull: Swift.Bool {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension GRDB.DatabaseValue : GRDB.StatementBinding {
  public func bind(to sqliteStatement: GRDB.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension GRDB.DatabaseValue : GRDB.GRDBSendable {
}
extension GRDB.DatabaseValue.Storage : @unchecked Swift.Sendable {
}
extension GRDB.DatabaseValue {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: GRDB.DatabaseValue, rhs: GRDB.DatabaseValue) -> Swift.Bool
}
extension GRDB.DatabaseValue {
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: GRDB.DatabaseValue) -> GRDB.DatabaseValue?
}
extension GRDB.DatabaseValue {
  public var sqlExpression: GRDB.SQLExpression {
    get
  }
}
extension GRDB.DatabaseValue {
  public var description: Swift.String {
    get
  }
}
extension GRDB.Database {
  final public func clearSchemaCache()
  final public func tableExists(_ name: Swift.String) throws -> Swift.Bool
  public static func isSQLiteInternalTable(_ tableName: Swift.String) -> Swift.Bool
  @available(*, deprecated, message: "Use Database.isSQLiteInternalTable(_:) static method instead.")
  final public func isSQLiteInternalTable(_ tableName: Swift.String) -> Swift.Bool
  public static func isGRDBInternalTable(_ tableName: Swift.String) -> Swift.Bool
  @available(*, deprecated, message: "Use Database.isGRDBInternalTable(_:) static method instead.")
  final public func isGRDBInternalTable(_ tableName: Swift.String) -> Swift.Bool
  final public func viewExists(_ name: Swift.String) throws -> Swift.Bool
  final public func triggerExists(_ name: Swift.String) throws -> Swift.Bool
  final public func primaryKey(_ tableName: Swift.String) throws -> GRDB.PrimaryKeyInfo
  final public func indexes(on tableName: Swift.String) throws -> [GRDB.IndexInfo]
  final public func table<T>(_ tableName: Swift.String, hasUniqueKey columns: T) throws -> Swift.Bool where T : Swift.Sequence, T.Element == Swift.String
  final public func foreignKeys(on tableName: Swift.String) throws -> [GRDB.ForeignKeyInfo]
  final public func foreignKeyViolations() throws -> GRDB.RecordCursor<GRDB.ForeignKeyViolation>
  final public func foreignKeyViolations(in tableName: Swift.String) throws -> GRDB.RecordCursor<GRDB.ForeignKeyViolation>
  final public func checkForeignKeys() throws
  final public func checkForeignKeys(in tableName: Swift.String) throws
}
extension GRDB.Database {
  final public func columns(in tableName: Swift.String) throws -> [GRDB.ColumnInfo]
}
public struct ColumnInfo : GRDB.FetchableRecord {
  public let name: Swift.String
  public let type: Swift.String
  public let isNotNull: Swift.Bool
  public let defaultValueSQL: Swift.String?
  public let primaryKeyIndex: Swift.Int
  public init(row: GRDB.Row)
}
public struct IndexInfo {
  public let name: Swift.String
  public let columns: [Swift.String]
  public let isUnique: Swift.Bool
}
public struct ForeignKeyViolation : GRDB.FetchableRecord, Swift.CustomStringConvertible {
  public var originTable: Swift.String
  public var originRowID: Swift.Int64?
  public var destinationTable: Swift.String
  public var foreignKeyId: Swift.Int
  public init(row: GRDB.Row)
  public var description: Swift.String {
    get
  }
  public func failureDescription(_ db: GRDB.Database) throws -> Swift.String
  public func databaseError(_ db: GRDB.Database) -> GRDB.DatabaseError
}
public struct PrimaryKeyInfo {
  public var columns: [Swift.String] {
    get
  }
  public var rowIDColumn: Swift.String? {
    get
  }
  public var isRowID: Swift.Bool {
    get
  }
}
public struct ForeignKeyInfo {
  public var id: Swift.Int
  public let destinationTable: Swift.String
  public let mapping: [(origin: Swift.String, destination: Swift.String)]
  public var originColumns: [Swift.String] {
    get
  }
  public var destinationColumns: [Swift.String] {
    get
  }
}
final public class DatabaseFunction : Swift.Hashable {
  final public var name: Swift.String {
    get
  }
  public init(_ name: Swift.String, argumentCount: Swift.Int32? = nil, pure: Swift.Bool = false, function: @escaping ([GRDB.DatabaseValue]) throws -> GRDB.DatabaseValueConvertible?)
  public init<Aggregate>(_ name: Swift.String, argumentCount: Swift.Int32? = nil, pure: Swift.Bool = false, aggregate: Aggregate.Type) where Aggregate : GRDB.DatabaseAggregate
  final public func callAsFunction(_ arguments: GRDB.SQLExpressible...) -> GRDB.SQLExpression
  @objc deinit
  final public var hashValue: Swift.Int {
    get
  }
}
extension GRDB.DatabaseFunction {
  final public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: GRDB.DatabaseFunction, rhs: GRDB.DatabaseFunction) -> Swift.Bool
}
public protocol DatabaseAggregate {
  init()
  mutating func step(_ dbValues: [GRDB.DatabaseValue]) throws
  func finalize() throws -> GRDB.DatabaseValueConvertible?
}
extension GRDB.ValueObservation {
  public func removeDuplicates(by predicate: @escaping (Reducer.Value, Reducer.Value) -> Swift.Bool) -> GRDB.ValueObservation<GRDB.ValueReducers.RemoveDuplicates<Reducer>>
}
extension GRDB.ValueObservation where Reducer.Value : Swift.Equatable {
  public func removeDuplicates() -> GRDB.ValueObservation<GRDB.ValueReducers.RemoveDuplicates<Reducer>>
}
extension GRDB.ValueReducers {
  public struct RemoveDuplicates<Base> : GRDB.ValueReducer where Base : GRDB.ValueReducer {
    public func _fetch(_ db: GRDB.Database) throws -> Base.Fetched
    public mutating func _value(_ fetched: Base.Fetched) -> Base.Value?
    public typealias Fetched = Base.Fetched
    public typealias Value = Base.Value
  }
}
extension GRDB.DatabaseValueConvertible where Self : Swift.Encodable {
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
}
extension GRDB.DatabaseValueConvertible where Self : Swift.Encodable, Self : Swift.RawRepresentable, Self.RawValue : GRDB.DatabaseValueConvertible {
  public var databaseValue: GRDB.DatabaseValue {
    get
  }
}
extension GRDB.Database.CheckpointMode : Swift.Equatable {}
extension GRDB.Database.CheckpointMode : Swift.Hashable {}
extension GRDB.Database.CheckpointMode : Swift.RawRepresentable {}
extension GRDB.Database.ConflictResolution : Swift.Equatable {}
extension GRDB.Database.ConflictResolution : Swift.Hashable {}
extension GRDB.Database.ConflictResolution : Swift.RawRepresentable {}
extension GRDB.Database.ForeignKeyAction : Swift.Equatable {}
extension GRDB.Database.ForeignKeyAction : Swift.Hashable {}
extension GRDB.Database.ForeignKeyAction : Swift.RawRepresentable {}
extension GRDB.Database.TransactionCompletion : Swift.Equatable {}
extension GRDB.Database.TransactionCompletion : Swift.Hashable {}
extension GRDB.Database.TransactionCompletion : Swift.Sendable {}
extension GRDB.Database.TransactionKind : Swift.Equatable {}
extension GRDB.Database.TransactionKind : Swift.Hashable {}
extension GRDB.Database.TransactionKind : Swift.RawRepresentable {}
extension GRDB.FTS3.Diacritics : Swift.Equatable {}
extension GRDB.FTS3.Diacritics : Swift.Hashable {}
extension GRDB.Database.TransactionObservationExtent : Swift.Equatable {}
extension GRDB.Database.TransactionObservationExtent : Swift.Hashable {}
extension GRDB.DatabaseEventKind : Swift.Sendable {}
extension GRDB.DatabaseEvent.Kind : Swift.Equatable {}
extension GRDB.DatabaseEvent.Kind : Swift.Hashable {}
extension GRDB.DatabaseEvent.Kind : Swift.RawRepresentable {}
extension GRDB.DatabaseMigrator.ForeignKeyChecks : Swift.Equatable {}
extension GRDB.DatabaseMigrator.ForeignKeyChecks : Swift.Hashable {}
extension GRDB.DatabaseUUIDEncodingStrategy : Swift.Equatable {}
extension GRDB.DatabaseUUIDEncodingStrategy : Swift.Hashable {}
extension GRDB.DatabaseDateComponents.Format : Swift.Equatable {}
extension GRDB.DatabaseDateComponents.Format : Swift.Hashable {}
extension GRDB.DatabaseDateComponents.Format : Swift.RawRepresentable {}
extension GRDB.SharedValueObservationExtent : Swift.Equatable {}
extension GRDB.SharedValueObservationExtent : Swift.Hashable {}
extension GRDB.ColumnDefinition.GeneratedColumnQualification : Swift.Equatable {}
extension GRDB.ColumnDefinition.GeneratedColumnQualification : Swift.Hashable {}
